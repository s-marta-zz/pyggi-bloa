2020-12-31 13:25:54,498	[INFO]	Path to the temporal program variants: ./.pyggi/tmp_variants/QuixBugs/1609417554
2020-12-31 13:25:54,498	[INFO]	========== EXPERIMENT FOR ['java_programs/SHORTEST_PATH_LENGTH.java.xml']  ==========
2020-12-31 13:25:54,498	[INFO]	modification points:
 ['./decl_stmt[1]', './decl_stmt[2]', './decl_stmt[3]', './expr_stmt[1]', './while[1]', './while[1]/decl_stmt[1]', './while[1]/decl_stmt[2]', './while[1]/expr_stmt[1]', './while[1]/if[1]', './while[1]/if[1]/operator_comp[1]', './while[1]/if[1]/return[1]', './while[1]/expr_stmt[2]', './while[1]/for[1]', './while[1]/for[1]/if[1]', './while[1]/for[1]/if[1]/continue[1]', './while[1]/for[1]/if[2]', './while[1]/for[1]/if[2]/operator_comp[1]', './while[1]/for[1]/if[2]/expr_stmt[1]', './while[1]/for[1]/expr_stmt[1]', './return[1]', './decl_stmt[4]', './decl_stmt[5]', './for[1]', './for[1]/decl_stmt[1]', './for[1]/if[1]', './for[1]/if[1]/operator_comp[1]', './for[1]/if[1]/expr_stmt[1]', './for[1]/if[1]/expr_stmt[2]', './return[2]']
2020-12-31 13:25:54,498	[INFO]	number of statements and comparisons: 26, 3
2020-12-31 13:25:54,498	[INFO]	========== EPOCH 1 ==========
2020-12-31 13:25:54,499	[INFO]	==== WARMUP ====
2020-12-31 13:25:57,845	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:25:57,845	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:26:01,198	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:26:01,198	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:26:04,575	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:26:04,575	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:26:07,964	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 13:26:07,964	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:26:07,964	[INFO]	==== START ====
2020-12-31 13:26:08,963	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:26:10,020	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:26:13,299	[INFO]	3	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:26:13,300	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:26:13,301	[INFO]	4	SUCCESS	+2.0	
2020-12-31 13:26:13,302	[DEBUG]	
2020-12-31 13:26:14,349	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:26:15,414	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:26:16,427	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:26:17,452	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:26:18,492	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:26:19,527	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:26:20,545	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:26:21,545	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:26:24,839	[INFO]	13	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:26:25,802	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:26:29,255	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:26:29,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:26:29,256	[INFO]	16	SUCCESS	+2.0	
2020-12-31 13:26:29,257	[DEBUG]	
2020-12-31 13:26:30,264	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:26:31,272	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:26:32,269	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:26:33,276	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:26:34,263	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:26:35,271	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:26:36,354	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:26:37,417	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:26:40,761	[INFO]	25	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:26:40,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:26:40,763	[INFO]	26	SUCCESS	+2.0	
2020-12-31 13:26:40,763	[DEBUG]	
2020-12-31 13:26:44,124	[INFO]	27	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:26:44,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:26:45,130	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:26:45,131	[INFO]	29	SUCCESS	+2.0	
2020-12-31 13:26:45,131	[DEBUG]	
2020-12-31 13:26:46,170	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:26:47,173	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:26:48,165	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:26:51,544	[INFO]	33	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:26:51,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:26:52,511	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:26:52,513	[INFO]	35	SUCCESS	+2.0	
2020-12-31 13:26:52,513	[DEBUG]	
2020-12-31 13:26:53,536	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:26:54,575	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:26:55,610	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:26:56,636	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:26:57,667	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:26:58,678	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:26:59,678	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:27:03,086	[INFO]	43	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:27:04,108	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-31 13:27:05,133	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:27:06,095	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:27:07,103	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:27:08,126	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:27:09,150	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:27:10,144	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:27:11,153	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:27:12,162	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:27:13,224	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:27:16,687	[INFO]	54	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:27:16,688	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:27:16,689	[INFO]	55	SUCCESS	+2.0	
2020-12-31 13:27:16,689	[DEBUG]	
2020-12-31 13:27:17,752	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:27:32,826	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:27:33,717	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:27:36,878	[INFO]	59	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:27:36,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:27:37,902	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:27:38,962	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:27:38,963	[INFO]	62	SUCCESS	+2.0	
2020-12-31 13:27:38,964	[DEBUG]	
2020-12-31 13:27:40,025	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:27:43,530	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:27:43,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:27:44,560	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:27:44,561	[INFO]	66	SUCCESS	+2.0	
2020-12-31 13:27:44,561	[DEBUG]	
2020-12-31 13:27:45,623	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:27:46,713	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:27:50,062	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:27:50,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 13:27:51,018	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:27:51,019	[INFO]	71	SUCCESS	+2.0	
2020-12-31 13:27:51,019	[DEBUG]	
2020-12-31 13:27:52,011	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:27:53,049	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:27:54,075	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:27:57,348	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:27:57,349	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:27:58,368	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:27:59,461	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:28:03,105	[INFO]	78	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:28:03,106	[INFO]	79	SUCCESS	+2.0	
2020-12-31 13:28:03,107	[DEBUG]	
2020-12-31 13:28:06,429	[INFO]	80	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:28:09,745	[INFO]	81	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:28:10,754	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:28:11,761	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:28:15,156	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:28:15,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:28:15,158	[INFO]	85	SUCCESS	+2.0	
2020-12-31 13:28:15,159	[DEBUG]	
2020-12-31 13:28:18,421	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:28:18,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:28:19,426	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:28:19,427	[INFO]	88	SUCCESS	+2.0	
2020-12-31 13:28:19,428	[DEBUG]	
2020-12-31 13:28:22,776	[INFO]	89	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:28:22,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:28:22,778	[INFO]	90	SUCCESS	+2.0	
2020-12-31 13:28:22,778	[DEBUG]	
2020-12-31 13:28:23,831	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:28:24,847	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:28:25,838	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:28:26,852	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:28:27,812	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:28:28,836	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:28:28,840	[INFO]	97	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:28:29,839	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:28:30,822	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:28:31,848	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:28:32,858	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:28:33,866	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:28:37,278	[INFO]	103	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:28:37,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:28:37,279	[INFO]	104	SUCCESS	+2.0	
2020-12-31 13:28:37,280	[DEBUG]	
2020-12-31 13:28:40,542	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:28:40,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:28:40,544	[INFO]	106	SUCCESS	+2.0	
2020-12-31 13:28:40,544	[DEBUG]	
2020-12-31 13:28:41,603	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:28:42,646	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:28:42,647	[INFO]	109	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:28:42,648	[DEBUG]	
2020-12-31 13:28:43,683	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:28:43,684	[INFO]	111	SUCCESS	+2.0	
2020-12-31 13:28:43,685	[DEBUG]	
2020-12-31 13:28:44,737	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:28:45,930	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:28:46,966	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:28:48,030	[INFO]	115	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:28:49,027	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:28:52,345	[INFO]	117	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:28:52,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:28:52,347	[INFO]	118	SUCCESS	+2.0	
2020-12-31 13:28:52,347	[DEBUG]	
2020-12-31 13:28:53,310	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:28:54,316	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:28:55,265	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:28:56,277	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:28:57,315	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:28:57,317	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:28:58,345	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:29:01,744	[INFO]	126	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:29:01,745	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 13:29:01,746	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:29:01,747	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 13:29:02,750	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:29:03,737	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:29:03,738	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:29:03,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 13:29:04,716	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:29:08,101	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:29:08,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:29:09,051	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:29:10,061	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:29:13,521	[INFO]	135	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:29:13,522	[INFO]	136	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:29:13,523	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:29:13,524	[INFO]	137	SUCCESS	+2.0	
2020-12-31 13:29:13,524	[DEBUG]	
2020-12-31 13:29:16,981	[INFO]	138	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:29:18,025	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:29:19,050	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:29:20,108	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:29:21,168	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:29:22,118	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:29:23,180	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:29:24,223	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:29:25,294	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:29:26,341	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:29:29,750	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:29:29,751	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:29:30,784	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:29:30,785	[INFO]	150	SUCCESS	+2.0	
2020-12-31 13:29:30,786	[DEBUG]	
2020-12-31 13:29:31,849	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:29:35,281	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:29:35,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:29:35,283	[INFO]	153	SUCCESS	+2.0	
2020-12-31 13:29:35,283	[DEBUG]	
2020-12-31 13:29:36,334	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:29:37,382	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:29:38,433	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:29:39,914	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:29:40,997	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:29:42,072	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:29:45,370	[INFO]	160	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:29:45,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:29:45,372	[INFO]	161	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:29:45,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:29:46,302	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:29:46,304	[INFO]	163	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:29:46,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:29:46,305	[INFO]	164	SUCCESS	+2.0	
2020-12-31 13:29:46,305	[DEBUG]	
2020-12-31 13:29:47,311	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:29:48,311	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:29:49,315	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:29:50,336	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:29:51,345	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:29:52,333	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:29:53,331	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:29:54,322	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:29:55,317	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:29:56,297	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:29:57,320	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:29:58,353	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:29:59,372	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:30:00,358	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:30:01,366	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:30:02,364	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:30:05,754	[INFO]	181	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:30:06,725	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:30:10,023	[INFO]	183	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:30:13,326	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:30:13,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 13:30:14,386	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:30:17,822	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:30:17,824	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  
***************
*** 47,52 ****
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 13:30:18,876	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:30:19,937	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:30:19,940	[INFO]	189	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:30:19,941	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 13:30:19,943	[INFO]	190	SUCCESS	+2.0	
2020-12-31 13:30:19,943	[DEBUG]	
2020-12-31 13:30:20,972	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:30:22,029	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:30:25,504	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:30:25,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:30:25,506	[INFO]	194	SUCCESS	+2.0	
2020-12-31 13:30:25,506	[DEBUG]	
2020-12-31 13:30:26,590	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:30:27,714	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:30:33,067	[INFO]	197	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:30:33,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:30:33,069	[INFO]	198	SUCCESS	+2.0	
2020-12-31 13:30:33,069	[DEBUG]	
2020-12-31 13:30:33,071	[INFO]	199	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:30:33,071	[DEBUG]	
2020-12-31 13:30:33,073	[INFO]	200	SUCCESS	+2.0	
2020-12-31 13:30:33,073	[DEBUG]	
2020-12-31 13:30:35,269	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:30:37,042	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:30:38,578	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:30:40,676	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:30:43,839	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:30:45,837	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:30:47,801	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:30:51,916	[INFO]	208	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:30:51,917	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:30:51,918	[INFO]	209	SUCCESS	+2.0	
2020-12-31 13:30:51,918	[DEBUG]	
2020-12-31 13:30:52,907	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:30:53,914	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:30:54,923	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:30:55,894	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:30:56,934	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:30:57,975	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:30:58,995	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:31:02,734	[INFO]	217	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:31:03,721	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:31:04,842	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:31:08,427	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:31:08,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 13:31:08,430	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:31:08,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 13:31:09,456	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:31:10,678	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:31:10,679	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:31:10,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 13:31:12,609	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:31:14,313	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:31:15,453	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:31:16,639	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:31:16,640	[INFO]	229	SUCCESS	+2.0	
2020-12-31 13:31:16,640	[DEBUG]	
2020-12-31 13:31:20,063	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:31:20,064	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 13:31:20,065	[INFO]	231	SUCCESS	+2.0	
2020-12-31 13:31:20,065	[DEBUG]	
2020-12-31 13:31:21,112	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:31:22,228	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:31:23,264	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:31:24,305	[INFO]	235	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:31:27,708	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:31:27,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:31:27,710	[INFO]	237	SUCCESS	+2.0	
2020-12-31 13:31:27,710	[DEBUG]	
2020-12-31 13:31:28,704	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:31:29,685	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:31:32,966	[INFO]	240	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:31:33,971	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:31:34,944	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:31:35,963	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:31:36,952	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:31:37,948	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:31:38,939	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:31:39,943	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:31:43,290	[INFO]	248	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:31:43,291	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:31:43,291	[INFO]	249	SUCCESS	+2.0	
2020-12-31 13:31:43,292	[DEBUG]	
2020-12-31 13:31:44,270	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:31:45,292	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:31:46,320	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:31:47,326	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:31:48,326	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:31:49,334	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:31:50,333	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:31:51,327	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:31:52,312	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:31:53,305	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:31:54,299	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:31:55,280	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:31:55,281	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:31:56,276	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:31:57,275	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:31:58,262	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:31:59,265	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:32:02,607	[INFO]	267	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:32:02,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:32:03,595	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:32:03,598	[INFO]	269	SUCCESS	+2.0	
2020-12-31 13:32:03,599	[DEBUG]	
2020-12-31 13:32:04,589	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:32:05,591	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:32:06,601	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:32:07,584	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:32:08,580	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:32:09,614	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:32:10,602	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:32:10,605	[INFO]	277	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:32:10,606	[DEBUG]	
2020-12-31 13:32:11,584	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:32:12,591	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:32:12,592	[INFO]	280	SUCCESS	+2.0	
2020-12-31 13:32:12,593	[DEBUG]	
2020-12-31 13:32:13,587	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:32:16,840	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:32:16,841	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:32:20,117	[INFO]	283	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:32:20,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 44,49 ****
--- 46,52 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 13:32:21,107	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:32:22,125	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:32:23,137	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:32:24,152	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:32:24,154	[INFO]	288	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:32:24,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:32:24,156	[INFO]	289	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:32:24,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:32:25,225	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:32:25,227	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:32:25,228	[DEBUG]	
2020-12-31 13:32:26,219	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:32:26,220	[INFO]	293	SUCCESS	+2.0	
2020-12-31 13:32:26,221	[DEBUG]	
2020-12-31 13:32:27,231	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:32:30,518	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:32:30,519	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:32:30,519	[INFO]	296	SUCCESS	+2.0	
2020-12-31 13:32:30,520	[DEBUG]	
2020-12-31 13:32:31,520	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:32:32,526	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:32:33,544	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:32:34,554	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:32:35,549	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:32:36,559	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:32:37,559	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:32:38,534	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:32:39,559	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:32:42,992	[INFO]	306	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:32:42,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:32:44,026	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:32:44,993	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:32:44,994	[INFO]	309	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:32:44,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:32:45,978	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:32:45,979	[INFO]	311	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:32:45,980	[DEBUG]	
2020-12-31 13:32:46,981	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:32:47,962	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:32:51,280	[INFO]	314	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:32:51,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:32:52,262	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:32:52,263	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:32:52,263	[DEBUG]	
2020-12-31 13:32:52,264	[INFO]	317	SUCCESS	+2.0	
2020-12-31 13:32:52,264	[DEBUG]	
2020-12-31 13:32:53,242	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:32:54,225	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:32:57,493	[INFO]	320	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 13:32:58,473	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:32:59,479	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:33:00,479	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:33:01,484	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:33:02,464	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:33:03,475	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:33:04,491	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:33:07,715	[INFO]	328	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:33:07,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:33:08,734	[INFO]	329	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:33:09,767	[INFO]	330	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:33:09,768	[INFO]	331	SUCCESS	+2.0	
2020-12-31 13:33:09,768	[DEBUG]	
2020-12-31 13:33:13,075	[INFO]	332	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-31 13:33:13,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:33:13,077	[INFO]	333	SUCCESS	+2.0	
2020-12-31 13:33:13,077	[DEBUG]	
2020-12-31 13:33:14,051	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:33:15,117	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:33:18,421	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:33:18,422	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:33:18,423	[INFO]	337	SUCCESS	+2.0	
2020-12-31 13:33:18,423	[DEBUG]	
2020-12-31 13:33:19,400	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:33:22,764	[INFO]	339	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:33:23,739	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:33:24,810	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:33:25,815	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:33:29,125	[INFO]	343	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:33:29,126	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 13:33:29,127	[INFO]	344	SUCCESS	+2.0	
2020-12-31 13:33:29,127	[DEBUG]	
2020-12-31 13:33:30,132	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:33:33,745	[INFO]	346	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:33:33,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:33:34,748	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:33:34,749	[INFO]	348	SUCCESS	+2.0	
2020-12-31 13:33:34,749	[DEBUG]	
2020-12-31 13:33:38,023	[INFO]	349	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:33:38,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:33:38,025	[INFO]	350	SUCCESS	+2.0	
2020-12-31 13:33:38,025	[DEBUG]	
2020-12-31 13:33:38,996	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:33:39,977	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:33:40,971	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:33:44,819	[INFO]	354	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:33:44,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:33:44,821	[INFO]	355	SUCCESS	+2.0	
2020-12-31 13:33:44,821	[DEBUG]	
2020-12-31 13:33:45,825	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:33:46,824	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:33:50,143	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:33:50,144	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:33:53,425	[INFO]	359	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:33:53,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,23 ****
--- 15,28 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:33:53,428	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:33:53,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:33:53,429	[INFO]	361	SUCCESS	+2.0	
2020-12-31 13:33:53,429	[DEBUG]	
2020-12-31 13:33:54,398	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:33:55,394	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:33:56,392	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:33:57,378	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:33:58,382	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:33:59,506	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:00,546	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:34:01,541	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:34:02,539	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:34:03,549	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:34:04,556	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:34:07,829	[INFO]	373	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:34:07,831	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 13:34:08,859	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:34:08,862	[INFO]	375	SUCCESS	+2.0	
2020-12-31 13:34:08,862	[DEBUG]	
2020-12-31 13:34:09,867	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:34:13,137	[INFO]	377	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:34:13,138	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-31 13:34:14,122	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:34:14,123	[INFO]	379	SUCCESS	+2.0	
2020-12-31 13:34:14,124	[DEBUG]	
2020-12-31 13:34:15,286	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:34:16,297	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:34:17,299	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:34:18,282	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:19,269	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:34:20,251	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:34:21,306	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:34:22,301	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:23,266	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:34:24,245	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:34:25,263	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:34:26,272	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:27,250	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:34:30,555	[INFO]	393	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:34:31,560	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:34:32,563	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:34:35,879	[INFO]	396	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:34:35,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 13:34:36,887	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:34:37,860	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:34:37,861	[INFO]	399	SUCCESS	+2.0	
2020-12-31 13:34:37,862	[DEBUG]	
2020-12-31 13:34:38,886	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:34:39,891	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:34:40,883	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:34:41,927	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:34:42,944	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:34:46,259	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:34:46,261	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 13:34:46,262	[INFO]	406	SUCCESS	+2.0	
2020-12-31 13:34:46,262	[DEBUG]	
2020-12-31 13:34:47,222	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:34:48,220	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:34:49,222	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:50,222	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:34:51,216	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:34:52,227	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:34:53,215	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:34:54,225	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:34:54,227	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:34:55,195	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:34:56,189	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:34:57,182	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:34:57,184	[INFO]	419	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 13:34:57,184	[DEBUG]	
2020-12-31 13:34:58,155	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:34:58,157	[INFO]	421	SUCCESS	+2.0	
2020-12-31 13:34:58,157	[DEBUG]	
2020-12-31 13:34:59,213	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:35:00,214	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:35:01,192	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:35:04,471	[INFO]	425	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:35:04,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:35:04,474	[INFO]	426	SUCCESS	+2.0	
2020-12-31 13:35:04,475	[DEBUG]	
2020-12-31 13:35:05,438	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:35:06,423	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:35:07,411	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:35:10,720	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:35:10,721	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:35:11,728	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:35:12,702	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:35:12,703	[INFO]	433	SUCCESS	+2.0	
2020-12-31 13:35:12,704	[DEBUG]	
2020-12-31 13:35:13,700	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:35:17,021	[INFO]	435	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:35:18,014	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:35:21,328	[INFO]	437	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:35:22,290	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:35:25,563	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:35:25,564	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:35:25,565	[INFO]	440	SUCCESS	+2.0	
2020-12-31 13:35:25,566	[DEBUG]	
2020-12-31 13:35:26,569	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:35:27,531	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:35:28,537	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:35:29,523	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:35:30,531	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:35:33,749	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:35:33,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:35:34,743	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:35:34,744	[INFO]	448	SUCCESS	+2.0	
2020-12-31 13:35:34,745	[DEBUG]	
2020-12-31 13:35:35,837	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:35:36,806	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:35:40,201	[INFO]	451	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:35:40,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:35:40,203	[INFO]	452	SUCCESS	+2.0	
2020-12-31 13:35:40,203	[DEBUG]	
2020-12-31 13:35:41,201	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:35:44,487	[INFO]	454	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:35:44,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:35:45,495	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:35:45,496	[INFO]	456	SUCCESS	+2.0	
2020-12-31 13:35:45,496	[DEBUG]	
2020-12-31 13:35:48,739	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:35:48,740	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:35:48,741	[INFO]	458	SUCCESS	+2.0	
2020-12-31 13:35:48,741	[DEBUG]	
2020-12-31 13:35:49,725	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:35:50,720	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:35:51,724	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:35:52,836	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:35:53,811	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:35:57,099	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:35:57,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:36:00,422	[INFO]	465	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:36:00,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:36:01,430	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:36:02,476	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:36:03,466	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:36:04,483	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:36:07,730	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:36:07,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:36:07,733	[INFO]	471	SUCCESS	+2.0	
2020-12-31 13:36:07,734	[DEBUG]	
2020-12-31 13:36:08,766	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:36:09,763	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:36:10,766	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:36:11,757	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:36:12,798	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:36:13,791	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:36:14,814	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:36:15,839	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:36:16,820	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 13:36:17,798	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:36:18,744	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:36:19,729	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:36:19,731	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:36:20,761	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:36:24,025	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:36:24,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-31 13:36:24,027	[INFO]	487	SUCCESS	+2.0	
2020-12-31 13:36:24,027	[DEBUG]	
2020-12-31 13:36:25,045	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:36:26,049	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:36:27,075	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:36:28,055	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:36:29,054	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:36:30,041	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:36:33,374	[INFO]	494	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:36:33,375	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 13:36:34,337	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:36:34,338	[INFO]	496	SUCCESS	+2.0	
2020-12-31 13:36:34,338	[DEBUG]	
2020-12-31 13:36:35,332	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:36:36,324	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:36:37,335	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:36:38,343	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:36:38,344	[INFO]	==== END ====
2020-12-31 13:36:38,344	[INFO]	Reason: step budget
2020-12-31 13:36:38,345	[INFO]	
2020-12-31 13:36:38,345	[INFO]	========== EPOCH 2 ==========
2020-12-31 13:36:38,345	[INFO]	==== WARMUP ====
2020-12-31 13:36:41,650	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:36:41,650	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:36:44,989	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:36:44,989	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:36:48,211	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:36:48,211	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:36:51,498	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 13:36:51,498	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:36:51,498	[INFO]	==== START ====
2020-12-31 13:36:52,517	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:36:53,529	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:36:54,619	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:36:55,621	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:36:58,799	[INFO]	5	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:36:58,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 13:36:59,744	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:37:00,676	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:37:00,677	[INFO]	8	SUCCESS	+2.0	
2020-12-31 13:37:00,678	[DEBUG]	
2020-12-31 13:37:01,678	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:37:04,963	[INFO]	10	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:37:04,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:37:04,965	[INFO]	11	SUCCESS	+2.0	
2020-12-31 13:37:04,965	[DEBUG]	
2020-12-31 13:37:08,252	[INFO]	12	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:37:08,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 13:37:08,253	[INFO]	13	SUCCESS	+2.0	
2020-12-31 13:37:08,254	[DEBUG]	
2020-12-31 13:37:11,621	[INFO]	14	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:37:15,116	[INFO]	15	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:37:15,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 13:37:16,095	[INFO]	16	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:37:16,096	[INFO]	17	SUCCESS	+2.0	
2020-12-31 13:37:16,097	[DEBUG]	
2020-12-31 13:37:17,082	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:37:18,113	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:37:19,096	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:37:20,022	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:37:20,990	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:37:22,003	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:37:23,014	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:37:24,032	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:37:25,061	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:37:26,088	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:37:27,072	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:37:30,320	[INFO]	29	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:37:30,321	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:37:30,322	[INFO]	30	SUCCESS	+2.0	
2020-12-31 13:37:30,322	[DEBUG]	
2020-12-31 13:37:31,314	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:37:32,298	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-31 13:37:33,280	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:37:34,266	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:37:37,557	[INFO]	35	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:37:37,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:37:38,552	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:37:38,553	[INFO]	37	SUCCESS	+2.0	
2020-12-31 13:37:38,554	[DEBUG]	
2020-12-31 13:37:41,886	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:37:41,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:37:41,888	[INFO]	39	SUCCESS	+2.0	
2020-12-31 13:37:41,888	[DEBUG]	
2020-12-31 13:37:42,876	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:37:43,965	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:37:44,955	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:37:48,277	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:37:48,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:37:48,280	[INFO]	44	SUCCESS	+2.0	
2020-12-31 13:37:48,280	[DEBUG]	
2020-12-31 13:37:49,277	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:37:50,246	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:37:51,256	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:37:52,253	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:37:53,218	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:37:54,189	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:37:55,112	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:37:56,147	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:37:57,120	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:37:58,107	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:37:59,126	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:38:00,118	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:38:03,430	[INFO]	57	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:38:03,431	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-31 13:38:03,432	[INFO]	58	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:38:03,433	[DEBUG]	
2020-12-31 13:38:03,434	[INFO]	59	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:38:03,434	[DEBUG]	
2020-12-31 13:38:03,435	[INFO]	60	SUCCESS	+2.0	
2020-12-31 13:38:03,435	[DEBUG]	
2020-12-31 13:38:06,707	[INFO]	61	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:38:06,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:38:06,709	[INFO]	62	SUCCESS	+2.0	
2020-12-31 13:38:06,709	[DEBUG]	
2020-12-31 13:38:07,728	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:38:11,019	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:38:11,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:38:11,021	[INFO]	65	SUCCESS	+2.0	
2020-12-31 13:38:11,022	[DEBUG]	
2020-12-31 13:38:12,003	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:38:12,988	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:38:13,986	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:38:13,988	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:38:13,989	[DEBUG]	
2020-12-31 13:38:13,991	[INFO]	70	SUCCESS	+2.0	
2020-12-31 13:38:13,991	[DEBUG]	
2020-12-31 13:38:14,939	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:38:16,055	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:38:17,092	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:38:20,293	[INFO]	74	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:38:21,275	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:38:21,277	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:38:24,549	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:38:24,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:38:25,599	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:38:26,618	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:38:27,590	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:38:28,592	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:38:28,595	[INFO]	82	SUCCESS	+2.0	
2020-12-31 13:38:28,596	[DEBUG]	
2020-12-31 13:38:29,592	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:38:30,580	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:38:33,789	[INFO]	85	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:38:33,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-31 13:38:37,040	[INFO]	86	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:38:37,041	[INFO]	87	SUCCESS	+2.0	
2020-12-31 13:38:37,042	[DEBUG]	
2020-12-31 13:38:38,032	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:38:39,044	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:38:40,027	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:38:41,014	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:38:42,058	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:38:43,123	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:38:44,160	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:38:45,200	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:38:46,174	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:38:49,489	[INFO]	97	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:38:49,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 13:38:49,491	[INFO]	98	SUCCESS	+2.0	
2020-12-31 13:38:49,491	[DEBUG]	
2020-12-31 13:38:50,470	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:38:53,789	[INFO]	100	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:38:53,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 13:38:53,791	[INFO]	101	SUCCESS	+2.0	
2020-12-31 13:38:53,791	[DEBUG]	
2020-12-31 13:38:54,767	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:38:55,790	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:38:56,771	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:38:57,754	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:39:01,054	[INFO]	106	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:39:01,055	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:39:02,077	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:39:03,065	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:39:04,183	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:39:04,184	[INFO]	110	SUCCESS	+2.0	
2020-12-31 13:39:04,184	[DEBUG]	
2020-12-31 13:39:05,209	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:39:08,557	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:39:08,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:39:08,559	[INFO]	113	SUCCESS	+2.0	
2020-12-31 13:39:08,560	[DEBUG]	
2020-12-31 13:39:09,531	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:39:10,533	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:39:11,543	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:39:11,546	[INFO]	117	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 13:39:11,547	[DEBUG]	
2020-12-31 13:39:12,529	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:39:13,542	[INFO]	119	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:39:13,543	[INFO]	120	SUCCESS	+2.0	
2020-12-31 13:39:13,543	[DEBUG]	
2020-12-31 13:39:16,800	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:39:16,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:39:17,816	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:39:17,817	[INFO]	123	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:39:17,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:39:18,822	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:39:19,788	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:39:19,790	[INFO]	126	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:39:19,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:39:19,791	[INFO]	127	SUCCESS	+2.0	
2020-12-31 13:39:19,791	[DEBUG]	
2020-12-31 13:39:20,890	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:39:21,904	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:39:25,336	[INFO]	130	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:39:25,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:39:26,253	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:39:26,254	[INFO]	132	SUCCESS	+2.0	
2020-12-31 13:39:26,255	[DEBUG]	
2020-12-31 13:39:27,244	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:39:28,202	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:39:31,576	[INFO]	135	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:39:32,475	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:39:33,827	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:39:34,899	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:39:38,256	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:39:38,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:39:41,553	[INFO]	140	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:39:41,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,19 ****
--- 11,44 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 13:39:41,556	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:39:41,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:39:41,557	[INFO]	142	SUCCESS	+2.0	
2020-12-31 13:39:41,557	[DEBUG]	
2020-12-31 13:39:42,552	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:39:43,485	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:39:46,745	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:39:46,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:39:47,759	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:39:48,775	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:39:48,776	[INFO]	148	SUCCESS	+2.0	
2020-12-31 13:39:48,777	[DEBUG]	
2020-12-31 13:39:49,770	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:39:50,783	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:39:51,792	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:39:52,820	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:39:53,863	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:39:57,226	[INFO]	154	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:39:57,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:39:58,195	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:39:58,196	[INFO]	156	SUCCESS	+2.0	
2020-12-31 13:39:58,196	[DEBUG]	
2020-12-31 13:39:59,202	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:40:00,212	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:40:03,498	[INFO]	159	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:40:04,499	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:40:07,795	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:40:07,796	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:40:08,766	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:40:08,767	[INFO]	163	SUCCESS	+2.0	
2020-12-31 13:40:08,767	[DEBUG]	
2020-12-31 13:40:09,756	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:40:13,058	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:40:13,059	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 13:40:13,059	[INFO]	166	SUCCESS	+2.0	
2020-12-31 13:40:13,060	[DEBUG]	
2020-12-31 13:40:14,052	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:40:15,067	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:40:16,044	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:40:19,280	[INFO]	170	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:40:20,266	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:40:21,242	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:40:24,500	[INFO]	173	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:40:25,573	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:40:28,933	[INFO]	175	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:40:28,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:40:28,935	[INFO]	176	SUCCESS	+2.0	
2020-12-31 13:40:28,935	[DEBUG]	
2020-12-31 13:40:29,930	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:40:30,924	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:40:31,919	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:40:35,305	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:40:35,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 13:40:36,607	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:40:36,609	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 13:40:36,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 13:40:36,611	[INFO]	183	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 13:40:36,611	[DEBUG]	
2020-12-31 13:40:36,612	[INFO]	184	SUCCESS	+2.0	
2020-12-31 13:40:36,612	[DEBUG]	
2020-12-31 13:40:41,038	[INFO]	185	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:40:42,542	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:40:44,384	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:40:48,555	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:40:48,557	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:40:48,557	[INFO]	189	SUCCESS	+2.0	
2020-12-31 13:40:48,558	[DEBUG]	
2020-12-31 13:40:49,922	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:40:53,356	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:40:53,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:40:54,349	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:40:55,424	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:40:55,426	[INFO]	194	SUCCESS	+2.0	
2020-12-31 13:40:55,426	[DEBUG]	
2020-12-31 13:40:56,452	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:40:57,470	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:40:58,471	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:40:59,464	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:41:00,471	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:41:01,555	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:41:02,554	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:41:03,555	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:41:04,565	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:41:07,887	[INFO]	204	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:41:08,863	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:41:09,863	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:41:10,843	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:41:11,819	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:41:12,817	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:41:13,799	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-31 13:41:15,018	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:41:16,148	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:41:17,177	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:41:18,134	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:41:19,147	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:41:20,144	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:41:21,151	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:41:22,138	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:41:23,135	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:41:24,153	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:41:24,156	[INFO]	221	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 13:41:24,156	[DEBUG]	
2020-12-31 13:41:25,195	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:41:28,443	[INFO]	223	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:41:28,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 13:41:29,444	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:41:30,469	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:41:31,525	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:41:31,527	[INFO]	227	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 13:41:31,527	[DEBUG]	
2020-12-31 13:41:31,528	[INFO]	228	SUCCESS	+2.0	
2020-12-31 13:41:31,528	[DEBUG]	
2020-12-31 13:41:32,496	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:41:33,513	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:41:34,502	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:41:35,484	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:41:38,702	[INFO]	233	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-31 13:41:38,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:41:39,704	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:41:40,679	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:41:41,725	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:41:42,719	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:41:43,831	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:41:43,832	[INFO]	239	SUCCESS	+2.0	
2020-12-31 13:41:43,833	[DEBUG]	
2020-12-31 13:41:47,145	[INFO]	240	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:41:50,442	[INFO]	241	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:41:50,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:41:51,419	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:41:54,716	[INFO]	243	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:41:54,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:41:55,691	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:41:56,679	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:41:56,681	[INFO]	246	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:41:56,681	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:41:57,684	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:41:58,688	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:41:59,684	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:42:00,679	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:42:00,680	[INFO]	251	SUCCESS	+2.0	
2020-12-31 13:42:00,681	[DEBUG]	
2020-12-31 13:42:01,687	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:42:02,681	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:42:03,698	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:42:04,702	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:42:07,982	[INFO]	256	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:42:11,266	[INFO]	257	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:42:11,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 13:42:11,268	[INFO]	258	SUCCESS	+2.0	
2020-12-31 13:42:11,268	[DEBUG]	
2020-12-31 13:42:12,243	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:42:13,223	[INFO]	260	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:42:14,204	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:42:15,179	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:42:16,252	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:42:17,297	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:42:20,462	[INFO]	265	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:42:23,678	[INFO]	266	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:42:23,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:24,708	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:42:25,730	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:42:28,999	[INFO]	269	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:42:29,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,53 ****
--- 50,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:29,991	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:42:33,271	[INFO]	271	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:42:33,272	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 49,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:36,628	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:42:36,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,43 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 50,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:39,861	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:42:39,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,41 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:40,775	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:42:44,018	[INFO]	275	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:42:44,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 47,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:45,177	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:42:46,140	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:42:47,065	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:42:47,067	[INFO]	279	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:42:47,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:50,504	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:42:50,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  
***************
*** 48,53 ****
--- 50,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:42:51,501	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:42:54,827	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:42:54,828	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:42:58,120	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:42:58,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 38,43 ****
--- 40,47 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          return Integer.MAX_VALUE;
      }

2020-12-31 13:43:01,429	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:43:01,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:43:02,437	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:43:02,439	[INFO]	286	SUCCESS	+2.0	
2020-12-31 13:43:02,439	[DEBUG]	
2020-12-31 13:43:03,432	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:43:04,431	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:43:05,397	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:43:06,395	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:43:07,408	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:43:08,429	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:43:09,447	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:43:12,708	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:43:12,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:43:13,677	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:43:17,054	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:43:17,055	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 33,40 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:43:17,056	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:43:17,057	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:43:17,057	[INFO]	298	SUCCESS	+2.0	
2020-12-31 13:43:17,057	[DEBUG]	
2020-12-31 13:43:18,031	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:43:19,027	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:43:19,973	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:43:20,949	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:43:21,925	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:43:22,926	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:43:23,908	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:43:24,939	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:43:25,915	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:43:26,923	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:43:27,904	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:43:31,247	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:43:31,248	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:43:32,238	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:43:33,222	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:43:34,231	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:43:35,318	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:43:38,647	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:43:38,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 27,32 ****
--- 30,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 13:43:41,968	[INFO]	316	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:43:41,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 13:43:42,939	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:43:46,252	[INFO]	318	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-31 13:43:46,254	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:43:46,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 13:43:46,255	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:43:46,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 13:43:49,482	[INFO]	321	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:43:49,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 27,38 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:43:49,484	[INFO]	322	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:43:49,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 13:43:52,848	[INFO]	323	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:43:52,849	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,34 ****
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:43:56,189	[INFO]	324	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:43:56,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 13:43:56,191	[INFO]	325	SUCCESS	+2.0	
2020-12-31 13:43:56,192	[DEBUG]	
2020-12-31 13:43:57,196	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:44:00,452	[INFO]	327	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:44:00,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:44:00,454	[INFO]	328	SUCCESS	+2.0	
2020-12-31 13:44:00,455	[DEBUG]	
2020-12-31 13:44:01,495	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:44:16,561	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:44:19,505	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:44:19,506	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:44:19,506	[INFO]	332	SUCCESS	+2.0	
2020-12-31 13:44:19,507	[DEBUG]	
2020-12-31 13:44:20,376	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:44:21,308	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:44:22,231	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:44:25,448	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:44:25,449	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 13:44:25,450	[INFO]	337	SUCCESS	+2.0	
2020-12-31 13:44:25,451	[DEBUG]	
2020-12-31 13:44:26,427	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:44:27,427	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:44:30,714	[INFO]	340	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:44:30,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:44:34,004	[INFO]	341	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:44:34,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 44,49 ****
--- 45,51 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 13:44:34,007	[INFO]	342	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:44:34,007	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:44:34,980	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:44:35,981	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:44:35,982	[INFO]	345	SUCCESS	+2.0	
2020-12-31 13:44:35,982	[DEBUG]	
2020-12-31 13:44:36,951	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:44:40,274	[INFO]	347	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:44:40,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:44:40,276	[INFO]	348	SUCCESS	+2.0	
2020-12-31 13:44:40,276	[DEBUG]	
2020-12-31 13:44:43,582	[INFO]	349	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:44:43,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 13:44:43,584	[INFO]	350	SUCCESS	+2.0	
2020-12-31 13:44:43,584	[DEBUG]	
2020-12-31 13:44:44,548	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:44:45,562	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:44:46,500	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:44:47,472	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:44:48,478	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:44:49,494	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:44:50,494	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:44:51,494	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:44:52,504	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:44:53,535	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 13:44:56,844	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:44:56,845	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 13:44:57,824	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:44:57,825	[INFO]	363	SUCCESS	+2.0	
2020-12-31 13:44:57,825	[DEBUG]	
2020-12-31 13:45:01,072	[INFO]	364	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:45:01,073	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 13:45:02,055	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:45:02,056	[INFO]	366	SUCCESS	+2.0	
2020-12-31 13:45:02,057	[DEBUG]	
2020-12-31 13:45:03,036	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:45:03,977	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:45:04,972	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:45:08,283	[INFO]	370	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:45:09,274	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:45:10,266	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:45:13,522	[INFO]	373	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:45:14,515	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:45:15,506	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:45:18,726	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:45:18,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 13:45:18,728	[INFO]	377	SUCCESS	+2.0	
2020-12-31 13:45:18,728	[DEBUG]	
2020-12-31 13:45:19,713	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:45:20,730	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:45:21,706	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:45:22,695	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:45:26,057	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:45:26,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:45:29,335	[INFO]	383	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:45:29,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 13:45:29,338	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:45:29,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:45:32,650	[INFO]	385	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:45:32,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:45:32,652	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:45:32,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:45:36,013	[INFO]	387	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:45:36,014	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:45:39,298	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:45:39,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:45:42,631	[INFO]	389	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:45:42,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:45:43,620	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:45:43,621	[INFO]	391	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:45:43,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:45:44,615	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:45:47,894	[INFO]	393	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:45:47,895	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:45:51,294	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:45:51,295	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 13:45:54,573	[INFO]	395	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:45:54,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 13:45:58,150	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:45:58,152	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 13:45:58,152	[INFO]	397	SUCCESS	+2.0	
2020-12-31 13:45:58,153	[DEBUG]	
2020-12-31 13:45:59,166	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:46:00,224	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:46:15,307	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:46:16,203	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:46:17,064	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:46:20,040	[INFO]	403	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:46:20,041	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 13:46:20,041	[INFO]	404	SUCCESS	+2.0	
2020-12-31 13:46:20,042	[DEBUG]	
2020-12-31 13:46:21,020	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:46:22,068	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:46:23,029	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:46:26,325	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:46:26,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-31 13:46:27,308	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:46:28,285	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:46:28,287	[INFO]	411	SUCCESS	+2.0	
2020-12-31 13:46:28,287	[DEBUG]	
2020-12-31 13:46:29,310	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:46:30,336	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:46:33,627	[INFO]	414	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:46:33,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:46:33,629	[INFO]	415	SUCCESS	+2.0	
2020-12-31 13:46:33,629	[DEBUG]	
2020-12-31 13:46:33,630	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:46:33,630	[DEBUG]	
2020-12-31 13:46:33,631	[INFO]	417	SUCCESS	+2.0	
2020-12-31 13:46:33,631	[DEBUG]	
2020-12-31 13:46:34,619	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:46:37,944	[INFO]	419	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:46:37,945	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 13:46:37,945	[INFO]	420	SUCCESS	+2.0	
2020-12-31 13:46:37,946	[DEBUG]	
2020-12-31 13:46:38,999	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:46:40,037	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:46:41,035	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:46:44,342	[INFO]	424	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:46:45,330	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:46:46,309	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:46:47,398	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:46:48,409	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:46:49,397	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:46:50,423	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:46:51,430	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:46:52,452	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:46:55,751	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:46:55,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:46:55,753	[INFO]	434	SUCCESS	+2.0	
2020-12-31 13:46:55,754	[DEBUG]	
2020-12-31 13:46:56,742	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:46:57,733	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:46:58,746	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:46:59,807	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:47:00,829	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:47:01,849	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:47:02,864	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:47:03,909	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:47:04,900	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:47:05,903	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:47:06,883	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:47:07,889	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:47:11,250	[INFO]	447	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:47:11,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:47:12,242	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:47:12,244	[INFO]	449	SUCCESS	+2.0	
2020-12-31 13:47:12,244	[DEBUG]	
2020-12-31 13:47:15,495	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:47:15,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:47:15,497	[INFO]	451	SUCCESS	+2.0	
2020-12-31 13:47:15,497	[DEBUG]	
2020-12-31 13:47:16,467	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:47:19,709	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:47:19,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 13:47:20,710	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:47:20,712	[INFO]	455	SUCCESS	+2.0	
2020-12-31 13:47:20,712	[DEBUG]	
2020-12-31 13:47:21,751	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:47:22,721	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:47:23,785	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:47:24,821	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:47:24,822	[INFO]	460	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:47:24,823	[DEBUG]	
2020-12-31 13:47:25,825	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:47:26,747	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:47:26,748	[INFO]	463	SUCCESS	+2.0	
2020-12-31 13:47:26,749	[DEBUG]	
2020-12-31 13:47:30,725	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:47:30,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:47:31,880	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:47:32,914	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:47:32,915	[INFO]	467	SUCCESS	+2.0	
2020-12-31 13:47:32,916	[DEBUG]	
2020-12-31 13:47:34,179	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:47:35,404	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:47:36,719	[INFO]	470	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:47:38,221	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:47:39,487	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:47:40,857	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:47:44,522	[INFO]	474	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:47:44,524	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:45,634	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:47:45,639	[INFO]	476	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:47:45,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:45,644	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 13:47:45,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:46,730	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:47:50,270	[INFO]	479	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 13:47:50,272	[INFO]	480	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:47:50,273	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:51,338	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:47:51,340	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:47:51,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:51,342	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:47:51,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:52,412	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:47:53,487	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:47:53,489	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:47:53,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:47:54,551	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:47:54,552	[INFO]	488	SUCCESS	+2.0	
2020-12-31 13:47:54,553	[DEBUG]	
2020-12-31 13:47:55,548	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:47:56,582	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:47:57,605	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:47:58,641	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:48:02,066	[INFO]	493	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:48:02,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:48:02,067	[INFO]	494	SUCCESS	+2.0	
2020-12-31 13:48:02,068	[DEBUG]	
2020-12-31 13:48:03,056	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:48:04,053	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:48:05,092	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:48:06,120	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:48:07,192	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:48:08,215	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:48:08,216	[INFO]	==== END ====
2020-12-31 13:48:08,216	[INFO]	Reason: step budget
2020-12-31 13:48:08,217	[INFO]	
2020-12-31 13:48:08,217	[INFO]	========== EPOCH 3 ==========
2020-12-31 13:48:08,217	[INFO]	==== WARMUP ====
2020-12-31 13:48:11,992	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:48:11,992	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:48:15,387	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:48:15,387	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:48:18,790	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:48:18,790	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:48:22,187	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 13:48:22,187	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:48:22,187	[INFO]	==== START ====
2020-12-31 13:48:25,609	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:48:25,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 13:48:25,611	[INFO]	2	SUCCESS	+2.0	
2020-12-31 13:48:25,611	[DEBUG]	
2020-12-31 13:48:26,610	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:48:27,644	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:48:28,674	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:48:32,026	[INFO]	6	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:48:33,031	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:48:34,078	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:48:35,117	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:48:36,150	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:48:37,202	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:48:38,244	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:48:39,250	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:48:42,753	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:48:42,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:48:43,768	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:48:47,222	[INFO]	16	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:48:47,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,42 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:48:50,558	[INFO]	17	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:48:50,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:48:50,560	[INFO]	18	SUCCESS	+2.0	
2020-12-31 13:48:50,561	[DEBUG]	
2020-12-31 13:48:53,954	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:48:53,955	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:48:53,956	[INFO]	20	SUCCESS	+2.0	
2020-12-31 13:48:53,956	[DEBUG]	
2020-12-31 13:48:57,337	[INFO]	21	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:48:57,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 13:48:57,339	[INFO]	22	SUCCESS	+2.0	
2020-12-31 13:48:57,339	[DEBUG]	
2020-12-31 13:48:58,406	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:48:59,475	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:49:00,509	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:49:03,925	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:49:03,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:49:04,929	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:49:04,930	[INFO]	28	SUCCESS	+2.0	
2020-12-31 13:49:04,930	[DEBUG]	
2020-12-31 13:49:05,969	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:49:06,985	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:49:08,036	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:49:11,772	[INFO]	32	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:49:11,773	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-31 13:49:11,774	[INFO]	33	SUCCESS	+2.0	
2020-12-31 13:49:11,775	[DEBUG]	
2020-12-31 13:49:12,713	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:49:13,718	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:49:14,732	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:49:15,771	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:49:15,772	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:49:16,811	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:49:17,887	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:49:18,965	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:49:19,980	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:49:21,008	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:49:22,026	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 13:49:23,065	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:49:24,092	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:49:27,526	[INFO]	47	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:49:27,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 13:49:28,548	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:49:28,549	[INFO]	49	SUCCESS	+2.0	
2020-12-31 13:49:28,550	[DEBUG]	
2020-12-31 13:49:31,897	[INFO]	50	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:49:31,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 13:49:31,898	[INFO]	51	SUCCESS	+2.0	
2020-12-31 13:49:31,899	[DEBUG]	
2020-12-31 13:49:35,327	[INFO]	52	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:49:35,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:49:36,343	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:49:37,436	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:49:37,437	[INFO]	55	SUCCESS	+2.0	
2020-12-31 13:49:37,437	[DEBUG]	
2020-12-31 13:49:38,457	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:49:39,486	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:49:40,519	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:49:41,570	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:49:42,602	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:49:43,707	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:49:44,711	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:49:45,730	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:49:46,750	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:49:47,790	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:49:48,789	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:49:49,863	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:49:53,176	[INFO]	68	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:49:53,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 13:49:53,178	[INFO]	69	SUCCESS	+2.0	
2020-12-31 13:49:53,178	[DEBUG]	
2020-12-31 13:49:54,184	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:49:55,187	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:49:56,215	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:49:57,248	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:49:58,275	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:49:59,309	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:50:00,346	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:50:04,150	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:50:04,151	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 13:50:05,175	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:50:05,177	[INFO]	79	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:50:05,178	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 13:50:05,178	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:50:05,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 13:50:06,193	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:50:06,195	[INFO]	82	SUCCESS	+2.0	
2020-12-31 13:50:06,195	[DEBUG]	
2020-12-31 13:50:07,214	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:50:08,235	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:50:09,280	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:50:09,282	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:50:10,316	[INFO]	87	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-31 13:50:11,355	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:50:12,396	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:50:13,432	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:50:16,828	[INFO]	91	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:50:17,788	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:50:18,816	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:50:19,867	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:50:20,892	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:50:24,223	[INFO]	96	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:50:24,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:50:24,224	[INFO]	97	SUCCESS	+2.0	
2020-12-31 13:50:24,225	[DEBUG]	
2020-12-31 13:50:27,589	[INFO]	98	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:50:27,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:50:28,627	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:50:28,628	[INFO]	100	SUCCESS	+2.0	
2020-12-31 13:50:28,629	[DEBUG]	
2020-12-31 13:50:29,686	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:50:33,066	[INFO]	102	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:50:33,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 13:50:34,092	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:50:34,093	[INFO]	104	SUCCESS	+2.0	
2020-12-31 13:50:34,093	[DEBUG]	
2020-12-31 13:50:49,156	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:50:50,091	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:50:51,003	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:50:51,933	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:50:52,951	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:50:53,995	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:50:55,042	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:50:55,044	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:50:55,044	[DEBUG]	
2020-12-31 13:50:55,045	[INFO]	113	SUCCESS	+2.0	
2020-12-31 13:50:55,045	[DEBUG]	
2020-12-31 13:50:56,066	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:50:57,078	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:51:00,468	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:51:00,469	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:51:00,470	[INFO]	117	SUCCESS	+2.0	
2020-12-31 13:51:00,471	[DEBUG]	
2020-12-31 13:51:01,478	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:51:02,516	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:51:03,541	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:51:04,563	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:51:05,602	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:51:08,948	[INFO]	123	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:51:09,997	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:51:11,011	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:51:12,016	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:51:13,168	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:51:14,534	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:51:17,917	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:51:17,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:51:17,920	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:51:17,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:51:21,215	[INFO]	131	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:51:21,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 13:51:22,188	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:51:25,544	[INFO]	133	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:51:25,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 13:51:28,942	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:51:28,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:51:28,944	[INFO]	135	SUCCESS	+2.0	
2020-12-31 13:51:28,944	[DEBUG]	
2020-12-31 13:51:32,292	[INFO]	136	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:51:32,293	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:51:32,294	[INFO]	137	SUCCESS	+2.0	
2020-12-31 13:51:32,294	[DEBUG]	
2020-12-31 13:51:33,328	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:51:34,387	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:51:35,404	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:51:36,433	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:51:37,447	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:51:38,503	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:51:39,530	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:51:40,576	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:51:41,654	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:51:42,749	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:51:46,436	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:51:46,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:51:46,438	[INFO]	149	SUCCESS	+2.0	
2020-12-31 13:51:46,438	[DEBUG]	
2020-12-31 13:51:47,474	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:51:48,450	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:51:49,507	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:51:52,904	[INFO]	153	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:51:53,860	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:51:54,907	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:51:58,258	[INFO]	156	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:51:58,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:51:58,260	[INFO]	157	SUCCESS	+2.0	
2020-12-31 13:51:58,260	[DEBUG]	
2020-12-31 13:51:59,278	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:52:00,318	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:52:01,342	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:52:02,407	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:52:03,432	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:52:04,466	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:52:07,885	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:52:07,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:52:07,887	[INFO]	165	SUCCESS	+2.0	
2020-12-31 13:52:07,887	[DEBUG]	
2020-12-31 13:52:08,913	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:52:09,927	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:52:10,971	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:52:12,005	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:52:13,017	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:52:14,059	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:52:15,099	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:52:16,117	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:52:19,484	[INFO]	174	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:52:19,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:52:34,557	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:52:34,558	[INFO]	176	SUCCESS	+2.0	
2020-12-31 13:52:34,559	[DEBUG]	
2020-12-31 13:52:35,478	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:52:35,479	[INFO]	178	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-31 13:52:35,479	[DEBUG]	
2020-12-31 13:52:35,480	[INFO]	179	SUCCESS	+2.0	
2020-12-31 13:52:35,480	[DEBUG]	
2020-12-31 13:52:36,388	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:52:37,217	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:52:38,148	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:52:38,153	[INFO]	183	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:52:38,154	[DEBUG]	
2020-12-31 13:52:38,156	[INFO]	184	SUCCESS	+2.0	
2020-12-31 13:52:38,157	[DEBUG]	
2020-12-31 13:52:39,125	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:52:42,508	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:52:42,509	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:52:42,510	[INFO]	187	SUCCESS	+2.0	
2020-12-31 13:52:42,511	[DEBUG]	
2020-12-31 13:52:57,566	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:52:58,512	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:52:59,401	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:53:00,320	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:53:03,420	[INFO]	192	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:53:03,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 13:53:03,422	[INFO]	193	SUCCESS	+2.0	
2020-12-31 13:53:03,422	[DEBUG]	
2020-12-31 13:53:04,440	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:53:04,442	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:53:04,442	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 13:53:04,443	[INFO]	196	SUCCESS	+2.0	
2020-12-31 13:53:04,443	[DEBUG]	
2020-12-31 13:53:05,467	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:53:06,518	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:53:07,525	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:53:08,545	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:53:09,579	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:53:09,581	[INFO]	202	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:53:09,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 13:53:09,582	[INFO]	203	SUCCESS	+2.0	
2020-12-31 13:53:09,582	[DEBUG]	
2020-12-31 13:53:09,583	[INFO]	204	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:53:09,584	[DEBUG]	
2020-12-31 13:53:10,618	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:53:11,662	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:53:11,666	[INFO]	207	SUCCESS	+2.0	
2020-12-31 13:53:11,668	[DEBUG]	
2020-12-31 13:53:12,703	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:53:13,748	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:53:14,769	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:53:15,802	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:53:16,842	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:53:17,906	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:53:18,875	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:53:19,911	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:53:20,951	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:53:21,949	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:53:22,989	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:53:24,002	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:53:25,077	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:53:25,078	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:53:25,079	[DEBUG]	
2020-12-31 13:53:26,099	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:53:26,100	[INFO]	223	SUCCESS	+2.0	
2020-12-31 13:53:26,100	[DEBUG]	
2020-12-31 13:53:27,122	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:53:28,164	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:53:29,227	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:53:32,651	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:53:32,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 13:53:32,653	[INFO]	228	SUCCESS	+2.0	
2020-12-31 13:53:32,653	[DEBUG]	
2020-12-31 13:53:33,664	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:53:34,698	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:53:38,043	[INFO]	231	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 13:53:42,144	[INFO]	232	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:53:42,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:53:42,146	[INFO]	233	SUCCESS	+2.0	
2020-12-31 13:53:42,147	[DEBUG]	
2020-12-31 13:53:43,546	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:53:45,093	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:53:49,324	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:53:49,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:53:49,326	[INFO]	237	SUCCESS	+2.0	
2020-12-31 13:53:49,327	[DEBUG]	
2020-12-31 13:53:50,372	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:53:53,781	[INFO]	239	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:53:53,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 13:53:54,810	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:53:58,670	[INFO]	241	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:53:58,674	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:53:58,677	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:53:58,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 13:54:02,453	[INFO]	243	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:54:02,454	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,23 ****
--- 17,25 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 13:54:03,551	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-31 13:54:03,553	[INFO]	245	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:54:03,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 13:54:04,614	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:54:06,095	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:54:07,175	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:54:07,176	[INFO]	249	SUCCESS	+2.0	
2020-12-31 13:54:07,177	[DEBUG]	
2020-12-31 13:54:08,215	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:54:11,814	[INFO]	251	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:54:11,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:54:11,816	[INFO]	252	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:54:11,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:54:11,818	[INFO]	253	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:54:11,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 13:54:12,885	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:54:12,886	[INFO]	255	SUCCESS	+2.0	
2020-12-31 13:54:12,887	[DEBUG]	
2020-12-31 13:54:16,525	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:54:16,526	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 13:54:16,526	[INFO]	257	SUCCESS	+2.0	
2020-12-31 13:54:16,527	[DEBUG]	
2020-12-31 13:54:19,901	[INFO]	258	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:54:19,902	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 13:54:20,938	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:54:20,939	[INFO]	260	SUCCESS	+2.0	
2020-12-31 13:54:20,939	[DEBUG]	
2020-12-31 13:54:22,021	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:54:23,104	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:54:24,162	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:54:25,262	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:54:26,335	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:54:27,355	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:54:28,640	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:54:29,709	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:54:30,738	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:54:34,024	[INFO]	270	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:54:35,008	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:54:36,024	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:54:37,059	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:54:38,102	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:54:39,134	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:54:42,540	[INFO]	276	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:54:46,098	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:54:46,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 13:54:46,100	[INFO]	278	SUCCESS	+2.0	
2020-12-31 13:54:46,100	[DEBUG]	
2020-12-31 13:54:47,066	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:54:50,576	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:54:50,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:54:51,601	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:54:52,748	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:54:53,822	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:54:54,905	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:54:58,392	[INFO]	285	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:54:58,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 13:54:59,348	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:54:59,350	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:54:59,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 13:55:14,407	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 13:55:14,408	[INFO]	289	SUCCESS	+2.0	
2020-12-31 13:55:14,408	[DEBUG]	
2020-12-31 13:55:17,368	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:55:17,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 13:55:17,373	[INFO]	291	SUCCESS	+2.0	
2020-12-31 13:55:17,374	[DEBUG]	
2020-12-31 13:55:18,318	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:55:19,216	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:55:20,238	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:55:23,710	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 13:55:23,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 13:55:23,712	[INFO]	296	SUCCESS	+2.0	
2020-12-31 13:55:23,712	[DEBUG]	
2020-12-31 13:55:24,760	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:55:25,945	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:55:27,015	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:55:28,125	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:55:29,209	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:55:30,277	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:55:30,278	[INFO]	303	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:55:30,278	[DEBUG]	
2020-12-31 13:55:30,279	[INFO]	304	SUCCESS	+2.0	
2020-12-31 13:55:30,279	[DEBUG]	
2020-12-31 13:55:31,329	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:55:32,371	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:55:33,433	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:55:34,509	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:55:36,038	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:55:37,144	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:55:38,190	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:55:39,274	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:55:40,336	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:55:41,369	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:55:44,836	[INFO]	315	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:55:44,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:55:44,838	[INFO]	316	SUCCESS	+2.0	
2020-12-31 13:55:44,838	[DEBUG]	
2020-12-31 13:55:45,845	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:55:46,866	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:55:47,882	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:55:47,883	[INFO]	320	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:55:47,884	[DEBUG]	
2020-12-31 13:55:48,886	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:55:52,442	[INFO]	322	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:55:52,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:55:52,444	[INFO]	323	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:55:52,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 13:55:52,446	[INFO]	324	SUCCESS	+2.0	
2020-12-31 13:55:52,446	[DEBUG]	
2020-12-31 13:55:53,460	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:55:56,967	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:55:56,968	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 13:55:56,968	[INFO]	327	SUCCESS	+2.0	
2020-12-31 13:55:56,969	[DEBUG]	
2020-12-31 13:56:00,354	[INFO]	328	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:56:00,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 13:56:00,356	[INFO]	329	SUCCESS	+2.0	
2020-12-31 13:56:00,356	[DEBUG]	
2020-12-31 13:56:01,382	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:56:02,454	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:56:03,513	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:56:04,555	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:56:05,621	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:56:06,664	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 13:56:06,666	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:56:06,667	[DEBUG]	
2020-12-31 13:56:07,692	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:56:07,694	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:56:07,695	[DEBUG]	
2020-12-31 13:56:07,695	[INFO]	339	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:56:07,696	[DEBUG]	
2020-12-31 13:56:08,839	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:56:09,932	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:56:13,398	[INFO]	342	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:56:13,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:56:13,400	[INFO]	343	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 13:56:13,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 13:56:13,402	[INFO]	344	SUCCESS	+2.0	
2020-12-31 13:56:13,402	[DEBUG]	
2020-12-31 13:56:14,492	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:56:15,545	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:56:16,589	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:56:17,633	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:56:18,694	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:56:19,735	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:56:20,784	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:56:24,172	[INFO]	352	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:56:24,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 13:56:25,217	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:56:28,583	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:56:28,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 49,54 ****
--- 40,46 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 13:56:28,585	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 13:56:28,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 13:56:29,619	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:56:29,620	[INFO]	357	SUCCESS	+2.0	
2020-12-31 13:56:29,621	[DEBUG]	
2020-12-31 13:56:30,639	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:56:31,644	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:56:32,673	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:56:33,677	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:56:37,061	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:56:37,062	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 13:56:37,063	[INFO]	363	SUCCESS	+2.0	
2020-12-31 13:56:37,064	[DEBUG]	
2020-12-31 13:56:38,068	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:56:39,117	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:56:42,427	[INFO]	366	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:56:42,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 13:56:43,381	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:56:44,364	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:56:45,354	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:56:48,716	[INFO]	370	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:56:48,718	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 13:56:52,019	[INFO]	371	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:56:52,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 13:56:53,025	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:56:53,026	[INFO]	373	SUCCESS	+2.0	
2020-12-31 13:56:53,027	[DEBUG]	
2020-12-31 13:56:54,051	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:56:57,625	[INFO]	375	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:56:57,627	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 13:56:57,627	[INFO]	376	SUCCESS	+2.0	
2020-12-31 13:56:57,628	[DEBUG]	
2020-12-31 13:56:58,694	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:56:59,779	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:57:00,860	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:57:01,878	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:57:02,974	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:57:04,056	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:57:05,120	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:57:06,213	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:57:07,255	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:57:08,271	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:57:09,295	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:57:10,347	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:57:11,379	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:57:12,415	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:57:13,444	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:57:14,469	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:57:15,433	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 13:57:16,446	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:57:19,824	[INFO]	395	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:57:19,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:57:19,828	[INFO]	396	SUCCESS	+2.0	
2020-12-31 13:57:19,829	[DEBUG]	
2020-12-31 13:57:20,855	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 13:57:21,826	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 13:57:22,826	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 13:57:23,885	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:57:24,939	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:57:25,954	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:57:26,994	[INFO]	403	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:57:28,000	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:57:29,031	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:57:30,054	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:57:31,075	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:57:32,117	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:57:33,130	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 13:57:34,189	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:57:35,231	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:57:38,559	[INFO]	412	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 13:57:39,575	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:57:42,952	[INFO]	414	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 13:57:42,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:57:43,971	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 13:57:45,016	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:57:46,075	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:57:47,084	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:57:47,085	[INFO]	419	SUCCESS	+2.0	
2020-12-31 13:57:47,086	[DEBUG]	
2020-12-31 13:57:50,380	[INFO]	420	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:57:50,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 13:57:51,333	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:57:52,300	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 13:57:52,301	[INFO]	423	SUCCESS	+2.0	
2020-12-31 13:57:52,301	[DEBUG]	
2020-12-31 13:57:53,323	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:57:54,347	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:57:55,360	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:57:56,347	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:57:57,387	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:58:00,669	[INFO]	429	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:58:00,670	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 13:58:00,671	[INFO]	430	SUCCESS	+2.0	
2020-12-31 13:58:00,671	[DEBUG]	
2020-12-31 13:58:01,701	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:58:05,080	[INFO]	432	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:58:05,080	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:58:06,082	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:58:06,083	[INFO]	434	SUCCESS	+2.0	
2020-12-31 13:58:06,083	[DEBUG]	
2020-12-31 13:58:07,098	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:58:08,101	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:58:09,129	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:58:10,601	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:58:11,770	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:58:12,795	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:58:13,859	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:58:14,868	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:58:15,881	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 13:58:16,906	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:58:17,925	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:58:21,707	[INFO]	446	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:58:21,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 13:58:22,727	[INFO]	447	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 13:58:22,728	[INFO]	448	SUCCESS	+2.0	
2020-12-31 13:58:22,729	[DEBUG]	
2020-12-31 13:58:23,736	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:58:24,782	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:58:28,146	[INFO]	451	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 13:58:28,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 13:58:28,148	[INFO]	452	SUCCESS	+2.0	
2020-12-31 13:58:28,149	[DEBUG]	
2020-12-31 13:58:29,199	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 13:58:30,217	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:58:31,276	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 13:58:32,304	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:58:33,301	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:58:34,321	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:58:35,359	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 13:58:36,419	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:58:37,456	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:58:38,500	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 13:58:39,514	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:58:42,969	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:58:42,970	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 13:58:44,005	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:58:45,052	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:58:45,053	[INFO]	467	SUCCESS	+2.0	
2020-12-31 13:58:45,053	[DEBUG]	
2020-12-31 13:58:46,072	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:58:47,161	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:58:48,381	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 13:58:49,420	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:58:50,517	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 13:58:51,561	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:58:52,581	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:58:53,598	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 13:58:57,004	[INFO]	476	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:58:57,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 13:58:58,005	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:58:58,006	[INFO]	478	SUCCESS	+2.0	
2020-12-31 13:58:58,007	[DEBUG]	
2020-12-31 13:58:58,008	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:58:58,008	[DEBUG]	
2020-12-31 13:58:58,009	[INFO]	480	SUCCESS	+2.0	
2020-12-31 13:58:58,009	[DEBUG]	
2020-12-31 13:58:59,046	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 13:59:00,104	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 13:59:00,105	[INFO]	483	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 13:59:00,106	[DEBUG]	
2020-12-31 13:59:01,141	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 13:59:01,142	[INFO]	485	SUCCESS	+2.0	
2020-12-31 13:59:01,143	[DEBUG]	
2020-12-31 13:59:02,144	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:59:05,516	[INFO]	487	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 13:59:06,565	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 13:59:09,930	[INFO]	489	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 13:59:09,931	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 13:59:10,947	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:59:10,948	[INFO]	491	SUCCESS	+2.0	
2020-12-31 13:59:10,949	[DEBUG]	
2020-12-31 13:59:11,970	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 13:59:13,014	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 13:59:14,035	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 13:59:15,062	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 13:59:16,108	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 13:59:17,111	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 13:59:18,148	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:59:19,112	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 13:59:20,080	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 13:59:20,081	[INFO]	==== END ====
2020-12-31 13:59:20,081	[INFO]	Reason: step budget
2020-12-31 13:59:20,082	[INFO]	
2020-12-31 13:59:20,082	[INFO]	========== EPOCH 4 ==========
2020-12-31 13:59:20,082	[INFO]	==== WARMUP ====
2020-12-31 13:59:23,476	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:59:23,476	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:59:26,875	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:59:26,875	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:59:30,271	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 13:59:30,272	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:59:33,652	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 13:59:33,652	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 13:59:33,652	[INFO]	==== START ====
2020-12-31 13:59:34,695	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 13:59:35,734	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 13:59:36,765	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 13:59:37,802	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 13:59:38,843	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:59:39,858	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 13:59:43,264	[INFO]	7	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 13:59:43,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 13:59:43,265	[INFO]	8	SUCCESS	+2.0	
2020-12-31 13:59:43,266	[DEBUG]	
2020-12-31 13:59:46,574	[INFO]	9	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 13:59:46,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:59:46,577	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 13:59:47,592	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 13:59:48,638	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 13:59:52,008	[INFO]	13	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:59:52,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,56 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 43,54 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:59:55,347	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 13:59:55,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 43,56 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 43,54 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:59:55,349	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:59:55,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,56 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 43,54 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:59:58,830	[INFO]	16	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 13:59:58,831	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 43,56 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 45,56 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 13:59:58,832	[INFO]	17	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 13:59:58,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,56 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 43,54 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 14:00:02,197	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:00:02,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:00:02,199	[INFO]	19	SUCCESS	+2.0	
2020-12-31 14:00:02,199	[DEBUG]	
2020-12-31 14:00:03,215	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:00:04,259	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:00:07,592	[INFO]	22	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:00:07,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:00:11,023	[INFO]	23	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:00:11,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:00:12,066	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:00:13,123	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:00:13,125	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:00:13,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:00:13,126	[INFO]	27	SUCCESS	+2.0	
2020-12-31 14:00:13,126	[DEBUG]	
2020-12-31 14:00:14,208	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:00:15,230	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:00:16,275	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:00:17,312	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:00:20,694	[INFO]	32	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:00:20,696	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:00:21,703	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:00:21,704	[INFO]	34	SUCCESS	+2.0	
2020-12-31 14:00:21,704	[DEBUG]	
2020-12-31 14:00:22,731	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:00:23,765	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:00:24,789	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:00:25,814	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:00:26,820	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:00:27,848	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:00:28,906	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:00:32,296	[INFO]	42	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:00:32,297	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:00:32,298	[INFO]	43	SUCCESS	+2.0	
2020-12-31 14:00:32,298	[DEBUG]	
2020-12-31 14:00:33,327	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:00:34,340	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:00:35,528	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:00:36,896	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:00:38,311	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:00:39,501	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:00:42,936	[INFO]	50	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:00:42,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:00:46,307	[INFO]	51	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:00:46,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:00:46,309	[INFO]	52	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:00:46,310	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:00:47,325	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:00:47,327	[INFO]	54	SUCCESS	+2.0	
2020-12-31 14:00:47,327	[DEBUG]	
2020-12-31 14:00:48,353	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:00:49,323	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:00:50,343	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:00:53,769	[INFO]	58	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:00:53,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 14:00:53,771	[INFO]	59	SUCCESS	+2.0	
2020-12-31 14:00:53,771	[DEBUG]	
2020-12-31 14:00:57,161	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:00:57,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:00:57,163	[INFO]	61	SUCCESS	+2.0	
2020-12-31 14:00:57,164	[DEBUG]	
2020-12-31 14:00:58,185	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:01:01,501	[INFO]	63	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:01:01,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 14:01:01,503	[INFO]	64	SUCCESS	+2.0	
2020-12-31 14:01:01,504	[DEBUG]	
2020-12-31 14:01:02,431	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:01:03,473	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:01:04,536	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:01:05,556	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:01:06,606	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:01:10,008	[INFO]	70	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:01:10,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:01:10,982	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:01:11,978	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:01:11,979	[INFO]	73	SUCCESS	+2.0	
2020-12-31 14:01:11,980	[DEBUG]	
2020-12-31 14:01:12,998	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:01:14,025	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:01:15,041	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:01:16,066	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:01:16,068	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:01:16,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:01:16,069	[INFO]	79	SUCCESS	+2.0	
2020-12-31 14:01:16,069	[DEBUG]	
2020-12-31 14:01:17,107	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:01:18,137	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:01:19,184	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:01:22,557	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:01:22,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:01:22,559	[INFO]	84	SUCCESS	+2.0	
2020-12-31 14:01:22,559	[DEBUG]	
2020-12-31 14:01:23,567	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:01:24,616	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:01:25,601	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:01:28,959	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:01:28,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:01:30,404	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:01:30,407	[INFO]	90	SUCCESS	+2.0	
2020-12-31 14:01:30,408	[DEBUG]	
2020-12-31 14:01:31,466	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:01:34,843	[INFO]	92	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:01:34,844	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 14:01:34,845	[INFO]	93	SUCCESS	+2.0	
2020-12-31 14:01:34,845	[DEBUG]	
2020-12-31 14:01:35,763	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:01:36,744	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:01:37,763	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:01:38,801	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:01:39,818	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:01:40,848	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:01:41,914	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:01:42,948	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:01:43,981	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:01:45,025	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:01:46,038	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:01:47,126	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:01:48,227	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:01:49,317	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:01:52,887	[INFO]	108	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:01:52,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:01:56,375	[INFO]	109	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:01:56,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:01:59,923	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:01:59,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:02:00,973	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:02:00,975	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:02:00,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:02:02,008	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:02:05,475	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:02:05,477	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 14:02:05,477	[INFO]	115	SUCCESS	+2.0	
2020-12-31 14:02:05,478	[DEBUG]	
2020-12-31 14:02:06,524	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:02:07,573	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:02:08,599	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:02:09,625	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:02:10,662	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:02:11,711	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:02:12,722	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:02:13,726	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:02:17,036	[INFO]	124	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:02:20,350	[INFO]	125	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:02:20,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 14:02:23,756	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:02:23,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,40 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 14:02:23,758	[INFO]	127	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:02:23,758	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 14:02:24,722	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:02:24,723	[INFO]	129	SUCCESS	+2.0	
2020-12-31 14:02:24,724	[DEBUG]	
2020-12-31 14:02:25,692	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:02:26,720	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:02:30,072	[INFO]	132	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:02:30,073	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:02:31,013	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:02:34,387	[INFO]	134	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:02:34,389	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:02:35,408	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:02:36,461	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:02:37,468	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:02:40,920	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:02:40,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:02:41,960	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:02:41,961	[INFO]	140	SUCCESS	+2.0	
2020-12-31 14:02:41,962	[DEBUG]	
2020-12-31 14:02:42,995	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:02:44,017	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:02:45,036	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:02:46,048	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:02:49,513	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:02:49,515	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 14:02:49,516	[INFO]	146	SUCCESS	+2.0	
2020-12-31 14:02:49,516	[DEBUG]	
2020-12-31 14:02:52,835	[INFO]	147	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:02:52,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:02:53,913	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:02:53,915	[INFO]	149	SUCCESS	+2.0	
2020-12-31 14:02:53,915	[DEBUG]	
2020-12-31 14:02:54,947	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:02:55,989	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 14:02:57,034	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:02:58,059	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:02:59,084	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:02:59,085	[INFO]	155	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:02:59,086	[DEBUG]	
2020-12-31 14:03:02,464	[INFO]	156	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:03:02,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:03:03,469	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:03:06,833	[INFO]	158	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:03:06,834	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:03:07,870	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:03:08,922	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:03:08,924	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:03:08,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:03:09,915	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:03:09,917	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:09,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:03:10,951	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:14,356	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:14,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:15,390	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:16,410	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:03:16,411	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:03:16,412	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:16,413	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:03:16,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:16,415	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:03:16,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:17,422	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:03:17,424	[INFO]	172	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:03:17,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:18,447	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:03:19,468	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:03:20,474	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:03:20,476	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:03:20,477	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:03:20,477	[INFO]	177	SUCCESS	+2.0	
2020-12-31 14:03:20,478	[DEBUG]	
2020-12-31 14:03:23,872	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:03:23,873	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:03:23,874	[INFO]	179	SUCCESS	+2.0	
2020-12-31 14:03:23,874	[DEBUG]	
2020-12-31 14:03:24,927	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:03:25,995	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:03:27,030	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:28,042	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:03:29,061	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:03:32,493	[INFO]	185	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:03:32,495	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:03:33,527	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:03:33,529	[INFO]	187	SUCCESS	+2.0	
2020-12-31 14:03:33,529	[DEBUG]	
2020-12-31 14:03:34,554	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:03:35,567	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:03:38,965	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:03:38,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:03:38,967	[INFO]	191	SUCCESS	+2.0	
2020-12-31 14:03:38,967	[DEBUG]	
2020-12-31 14:03:39,975	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:03:41,001	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:03:44,443	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:03:44,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:03:47,859	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:03:47,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,37 ****
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 29,40 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:03:48,853	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:03:48,854	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:03:48,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:03:48,856	[INFO]	198	SUCCESS	+2.0	
2020-12-31 14:03:48,856	[DEBUG]	
2020-12-31 14:03:49,906	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:03:51,013	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:03:52,138	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:03:53,130	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:03:54,155	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:03:55,212	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:03:56,261	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:03:57,318	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:03:58,345	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:03:59,361	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:04:02,843	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:04:02,846	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:04:02,848	[INFO]	210	SUCCESS	+2.0	
2020-12-31 14:04:02,848	[DEBUG]	
2020-12-31 14:04:03,809	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:04:04,839	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:04:05,844	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:04:09,288	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:04:09,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:04:09,290	[INFO]	215	SUCCESS	+2.0	
2020-12-31 14:04:09,291	[DEBUG]	
2020-12-31 14:04:10,298	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:04:11,347	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:04:12,295	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:04:13,311	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:04:16,677	[INFO]	220	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:04:17,716	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:04:18,757	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:04:19,796	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:04:23,214	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:04:23,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:04:23,216	[INFO]	225	SUCCESS	+2.0	
2020-12-31 14:04:23,216	[DEBUG]	
2020-12-31 14:04:24,234	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:04:27,604	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:04:27,605	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 14:04:30,963	[INFO]	228	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:04:30,965	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:04:31,975	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:04:31,977	[INFO]	230	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:04:31,978	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:04:47,054	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-31 14:04:47,955	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:04:48,967	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:04:50,013	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:05:05,089	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:05:05,966	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:05:06,902	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:05:06,904	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:05:06,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:05:06,905	[INFO]	239	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:05:06,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:05:10,164	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:05:10,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:05:11,229	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:05:11,230	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:05:11,231	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:05:11,231	[INFO]	243	SUCCESS	+2.0	
2020-12-31 14:05:11,232	[DEBUG]	
2020-12-31 14:05:12,271	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:05:13,349	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:05:14,390	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:05:15,398	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:05:15,399	[INFO]	248	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:05:15,399	[DEBUG]	
2020-12-31 14:05:15,400	[INFO]	249	SUCCESS	+2.0	
2020-12-31 14:05:15,400	[DEBUG]	
2020-12-31 14:05:18,863	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:05:18,864	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:05:18,865	[INFO]	251	SUCCESS	+2.0	
2020-12-31 14:05:18,866	[DEBUG]	
2020-12-31 14:05:19,875	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:05:23,231	[INFO]	253	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:05:24,250	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:05:25,314	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:05:26,327	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:05:27,335	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:05:28,413	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:05:31,841	[INFO]	259	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:05:31,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:05:31,843	[INFO]	260	SUCCESS	+2.0	
2020-12-31 14:05:31,843	[DEBUG]	
2020-12-31 14:05:32,884	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:05:33,902	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:05:34,930	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:05:36,068	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:05:39,450	[INFO]	265	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:05:39,451	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:05:40,463	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:05:41,540	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:05:44,941	[INFO]	268	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:05:44,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:05:45,945	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:05:45,946	[INFO]	270	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:05:45,947	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:05:46,982	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:05:46,983	[INFO]	272	SUCCESS	+2.0	
2020-12-31 14:05:46,983	[DEBUG]	
2020-12-31 14:05:48,017	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:05:49,068	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:05:50,117	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:05:51,176	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:05:52,179	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:05:52,180	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:05:53,224	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:05:54,231	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:05:55,310	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:05:56,362	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:05:57,405	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:05:58,402	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:06:01,901	[INFO]	285	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:06:01,902	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:06:01,903	[INFO]	286	SUCCESS	+2.0	
2020-12-31 14:06:01,903	[DEBUG]	
2020-12-31 14:06:02,979	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:06:04,106	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:06:05,207	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:06:06,317	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:06:06,318	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:06:06,319	[DEBUG]	
2020-12-31 14:06:06,320	[INFO]	292	SUCCESS	+2.0	
2020-12-31 14:06:06,320	[DEBUG]	
2020-12-31 14:06:07,428	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:06:08,517	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:06:09,622	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:06:10,745	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:06:14,339	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:06:14,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 14:06:14,341	[INFO]	298	SUCCESS	+2.0	
2020-12-31 14:06:14,341	[DEBUG]	
2020-12-31 14:06:15,399	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:06:16,432	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-31 14:06:19,877	[INFO]	301	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:06:20,916	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:06:21,986	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:06:22,979	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:06:24,007	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:06:25,078	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:06:26,075	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:06:27,142	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:06:28,171	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:06:31,651	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:06:31,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:06:31,652	[INFO]	311	SUCCESS	+2.0	
2020-12-31 14:06:31,653	[DEBUG]	
2020-12-31 14:06:32,625	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:06:33,653	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:06:34,671	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:06:35,710	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:06:36,755	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:06:37,799	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:06:41,163	[INFO]	318	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:06:41,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:06:41,165	[INFO]	319	SUCCESS	+2.0	
2020-12-31 14:06:41,165	[DEBUG]	
2020-12-31 14:06:42,228	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:06:43,260	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:06:46,721	[INFO]	322	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:06:50,118	[INFO]	323	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:06:50,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:06:50,120	[INFO]	324	SUCCESS	+2.0	
2020-12-31 14:06:50,121	[DEBUG]	
2020-12-31 14:06:51,158	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:06:52,192	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:06:53,241	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:06:54,308	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:06:55,362	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:06:56,400	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:06:57,468	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:07:00,814	[INFO]	332	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:07:00,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:07:00,816	[INFO]	333	SUCCESS	+2.0	
2020-12-31 14:07:00,816	[DEBUG]	
2020-12-31 14:07:01,859	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:07:02,863	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:07:06,278	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:07:06,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:07:06,279	[INFO]	337	SUCCESS	+2.0	
2020-12-31 14:07:06,280	[DEBUG]	
2020-12-31 14:07:09,691	[INFO]	338	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:07:09,692	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:07:10,697	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:07:10,698	[INFO]	340	SUCCESS	+2.0	
2020-12-31 14:07:10,698	[DEBUG]	
2020-12-31 14:07:11,722	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:07:12,844	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:07:14,259	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:07:29,321	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:07:30,221	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:07:31,113	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:07:32,044	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:07:32,958	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:07:33,895	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:07:37,303	[INFO]	350	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:07:37,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:07:38,312	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:07:39,354	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:07:40,395	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:07:40,396	[INFO]	354	SUCCESS	+2.0	
2020-12-31 14:07:40,397	[DEBUG]	
2020-12-31 14:07:41,493	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:07:42,550	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:07:43,611	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:07:43,613	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:07:44,626	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:07:45,635	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:07:46,680	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:07:47,629	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:07:48,662	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:07:49,695	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:07:50,735	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:07:51,735	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:07:52,783	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:07:53,808	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:07:54,803	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:07:55,863	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:07:56,848	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:07:57,897	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:07:58,936	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:08:02,375	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:08:02,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 14:08:02,376	[INFO]	375	SUCCESS	+2.0	
2020-12-31 14:08:02,377	[DEBUG]	
2020-12-31 14:08:03,435	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:08:04,481	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:08:05,495	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:08:06,528	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:08:07,526	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:08:08,574	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:08:11,993	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:08:11,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:08:11,995	[INFO]	383	SUCCESS	+2.0	
2020-12-31 14:08:11,995	[DEBUG]	
2020-12-31 14:08:13,010	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:08:16,338	[INFO]	385	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:08:16,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:08:16,340	[INFO]	386	SUCCESS	+2.0	
2020-12-31 14:08:16,340	[DEBUG]	
2020-12-31 14:08:17,360	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:08:18,372	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:08:19,417	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:08:22,794	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:08:22,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:08:23,821	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:08:24,887	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:08:25,894	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:08:25,896	[INFO]	394	SUCCESS	+2.0	
2020-12-31 14:08:25,896	[DEBUG]	
2020-12-31 14:08:25,897	[INFO]	395	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 14:08:25,897	[DEBUG]	
2020-12-31 14:08:25,898	[INFO]	396	SUCCESS	+2.0	
2020-12-31 14:08:25,898	[DEBUG]	
2020-12-31 14:08:26,957	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:08:27,969	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:08:31,424	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:08:31,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:08:31,427	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:08:31,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:08:32,428	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:08:33,459	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:08:34,543	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:08:35,546	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:08:36,609	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:08:37,654	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:08:38,665	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:08:39,729	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:08:40,755	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:08:40,756	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:08:40,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:08:44,303	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:08:44,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 46,51 ****
--- 48,54 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 14:08:47,737	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:08:47,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 14:08:51,107	[INFO]	413	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:08:51,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 46,51 ****
--- 48,54 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 14:08:52,140	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:08:55,487	[INFO]	415	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:08:55,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:08:55,489	[INFO]	416	SUCCESS	+2.0	
2020-12-31 14:08:55,489	[DEBUG]	
2020-12-31 14:08:58,868	[INFO]	417	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:08:58,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:08:59,884	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:09:00,840	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:09:00,841	[INFO]	420	SUCCESS	+2.0	
2020-12-31 14:09:00,842	[DEBUG]	
2020-12-31 14:09:01,884	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:09:02,899	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:09:04,299	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:09:05,338	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:09:20,410	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:09:21,344	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:09:22,292	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:09:23,186	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:09:24,246	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:09:25,295	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:09:26,327	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:09:27,312	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:09:28,348	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:09:29,436	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:09:30,501	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:09:31,539	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:09:32,560	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:09:36,127	[INFO]	438	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:09:36,127	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:09:36,129	[INFO]	439	SUCCESS	+2.0	
2020-12-31 14:09:36,130	[DEBUG]	
2020-12-31 14:09:37,274	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:09:38,301	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:09:39,375	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:09:40,447	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:09:41,568	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:09:45,054	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:09:45,055	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:09:45,056	[INFO]	446	SUCCESS	+2.0	
2020-12-31 14:09:45,056	[DEBUG]	
2020-12-31 14:09:46,079	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:09:49,534	[INFO]	448	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:09:49,535	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:09:50,581	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:09:50,582	[INFO]	450	SUCCESS	+2.0	
2020-12-31 14:09:50,582	[DEBUG]	
2020-12-31 14:09:51,609	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:09:52,655	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:09:53,735	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:09:54,755	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:09:55,831	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:09:56,862	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:09:57,910	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:10:01,307	[INFO]	458	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:10:01,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:10:02,296	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:10:03,340	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:10:04,384	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:04,386	[INFO]	462	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:10:04,386	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:10:07,809	[INFO]	463	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:07,810	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 14:10:08,871	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:09,887	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:10:10,927	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:10:11,874	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:12,903	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:10:12,905	[INFO]	469	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:12,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 14:10:16,413	[INFO]	470	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:10:16,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,43 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
          return Integer.MAX_VALUE;
      }
--- 30,43 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 14:10:19,902	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:10:19,903	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,43 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
          return Integer.MAX_VALUE;
      }
--- 30,43 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-31 14:10:23,256	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:10:23,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:10:23,258	[INFO]	473	SUCCESS	+2.0	
2020-12-31 14:10:23,259	[DEBUG]	
2020-12-31 14:10:26,666	[INFO]	474	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:10:26,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 14:10:27,722	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:10:28,778	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:10:28,781	[INFO]	477	SUCCESS	+2.0	
2020-12-31 14:10:28,782	[DEBUG]	
2020-12-31 14:10:32,110	[INFO]	478	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:10:32,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 14:10:33,059	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:10:34,040	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:10:35,090	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:10:35,091	[INFO]	482	SUCCESS	+2.0	
2020-12-31 14:10:35,092	[DEBUG]	
2020-12-31 14:10:36,436	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:10:37,852	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:10:39,366	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:10:40,521	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:10:41,584	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:10:42,613	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:10:43,722	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:10:44,802	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:10:46,098	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:10:46,099	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:10:46,099	[DEBUG]	
2020-12-31 14:10:47,281	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:10:47,283	[INFO]	494	SUCCESS	+2.0	
2020-12-31 14:10:47,283	[DEBUG]	
2020-12-31 14:10:48,759	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:10:50,136	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:10:53,767	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:10:53,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:10:53,769	[INFO]	498	SUCCESS	+2.0	
2020-12-31 14:10:53,769	[DEBUG]	
2020-12-31 14:10:54,784	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:10:55,801	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:10:55,802	[INFO]	==== END ====
2020-12-31 14:10:55,802	[INFO]	Reason: step budget
2020-12-31 14:10:55,802	[INFO]	
2020-12-31 14:10:55,802	[INFO]	========== EPOCH 5 ==========
2020-12-31 14:10:55,803	[INFO]	==== WARMUP ====
2020-12-31 14:10:59,194	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:10:59,194	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:11:02,505	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:11:02,505	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:11:05,868	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:11:05,868	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:11:09,217	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 14:11:09,218	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:11:09,218	[INFO]	==== START ====
2020-12-31 14:11:10,267	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:11:11,295	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:11:12,319	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:11:13,369	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:11:14,373	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:11:15,436	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:11:16,465	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:11:19,772	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:11:19,773	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 14:11:19,773	[INFO]	9	SUCCESS	+2.0	
2020-12-31 14:11:19,774	[DEBUG]	
2020-12-31 14:11:20,881	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:11:21,899	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:11:22,926	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:11:23,945	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:11:23,946	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:11:23,947	[DEBUG]	
2020-12-31 14:11:27,392	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:11:27,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:11:28,424	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:11:29,456	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:11:30,426	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:11:30,428	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:11:30,428	[DEBUG]	
2020-12-31 14:11:31,459	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:11:31,461	[INFO]	21	SUCCESS	+2.0	
2020-12-31 14:11:31,462	[DEBUG]	
2020-12-31 14:11:32,473	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:11:33,495	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:11:34,507	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:11:35,484	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:11:36,514	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:11:37,588	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:11:40,943	[INFO]	28	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:11:40,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:11:40,945	[INFO]	29	SUCCESS	+2.0	
2020-12-31 14:11:40,945	[DEBUG]	
2020-12-31 14:11:41,990	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:11:41,991	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:11:41,991	[DEBUG]	
2020-12-31 14:11:43,023	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:11:43,024	[INFO]	33	SUCCESS	+2.0	
2020-12-31 14:11:43,024	[DEBUG]	
2020-12-31 14:11:44,079	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:11:45,114	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 14:11:46,160	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:11:49,506	[INFO]	37	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:11:49,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 14:11:49,508	[INFO]	38	SUCCESS	+2.0	
2020-12-31 14:11:49,508	[DEBUG]	
2020-12-31 14:11:50,527	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:11:51,545	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:11:52,594	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:11:53,693	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:11:55,119	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:11:56,184	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:11:57,212	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:11:58,234	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:11:59,255	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:12:00,224	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:12:03,625	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:12:03,626	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 14:12:03,627	[INFO]	50	SUCCESS	+2.0	
2020-12-31 14:12:03,627	[DEBUG]	
2020-12-31 14:12:04,647	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:12:08,113	[INFO]	52	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:12:08,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:12:08,115	[INFO]	53	SUCCESS	+2.0	
2020-12-31 14:12:08,116	[DEBUG]	
2020-12-31 14:12:09,149	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:12:10,203	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:12:11,195	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:12:12,241	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:12:15,583	[INFO]	58	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:12:15,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:12:18,923	[INFO]	59	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:12:18,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 Node minNode = null;
! 
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:12:19,934	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:12:19,936	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:12:19,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:12:20,949	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:12:20,950	[INFO]	63	SUCCESS	+2.0	
2020-12-31 14:12:20,950	[DEBUG]	
2020-12-31 14:12:21,896	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:12:22,817	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:12:23,831	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:12:24,953	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:12:25,982	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:12:27,008	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:12:30,489	[INFO]	70	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:12:30,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:12:33,946	[INFO]	71	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:12:33,947	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,40 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:12:34,956	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:12:36,013	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:12:37,085	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:12:38,108	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:12:38,110	[INFO]	76	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:12:38,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,40 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:12:41,464	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:12:41,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:12:42,529	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:12:45,904	[INFO]	79	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:12:45,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 50,56 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 14:12:46,932	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:12:48,001	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:12:49,041	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:12:49,044	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:12:49,045	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 50,56 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 14:12:52,420	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:12:52,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,34 ****
--- 27,38 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 14:12:55,797	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:12:55,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 14:12:59,164	[INFO]	86	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:12:59,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 14:12:59,166	[INFO]	87	SUCCESS	+2.0	
2020-12-31 14:12:59,166	[DEBUG]	
2020-12-31 14:13:00,218	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:13:01,251	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:13:02,275	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:13:03,329	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:13:04,343	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:13:05,367	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:13:08,749	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:13:08,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:13:08,751	[INFO]	95	SUCCESS	+2.0	
2020-12-31 14:13:08,751	[DEBUG]	
2020-12-31 14:13:09,742	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:13:13,098	[INFO]	97	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:13:13,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:13:13,100	[INFO]	98	SUCCESS	+2.0	
2020-12-31 14:13:13,100	[DEBUG]	
2020-12-31 14:13:16,616	[INFO]	99	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:13:16,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:13:16,620	[INFO]	100	SUCCESS	+2.0	
2020-12-31 14:13:16,621	[DEBUG]	
2020-12-31 14:13:17,708	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:13:18,743	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:13:19,761	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:13:23,148	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:13:23,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:13:23,150	[INFO]	105	SUCCESS	+2.0	
2020-12-31 14:13:23,150	[DEBUG]	
2020-12-31 14:13:24,173	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:13:27,533	[INFO]	107	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:13:27,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:13:28,575	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:13:28,576	[INFO]	109	SUCCESS	+2.0	
2020-12-31 14:13:28,576	[DEBUG]	
2020-12-31 14:13:29,575	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:13:30,542	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:13:31,562	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:13:32,631	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:13:36,280	[INFO]	114	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:13:36,281	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:13:36,282	[INFO]	115	SUCCESS	+2.0	
2020-12-31 14:13:36,283	[DEBUG]	
2020-12-31 14:13:37,297	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:13:40,737	[INFO]	117	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:13:44,116	[INFO]	118	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:13:44,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 14:13:45,114	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:13:45,116	[INFO]	120	SUCCESS	+2.0	
2020-12-31 14:13:45,116	[DEBUG]	
2020-12-31 14:13:46,127	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:13:47,154	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:13:50,493	[INFO]	123	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:13:50,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 14:13:50,495	[INFO]	124	SUCCESS	+2.0	
2020-12-31 14:13:50,495	[DEBUG]	
2020-12-31 14:13:51,520	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:13:52,554	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:13:52,557	[INFO]	127	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:13:52,558	[DEBUG]	
2020-12-31 14:13:55,926	[INFO]	128	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:13:55,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:13:59,263	[INFO]	129	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:13:59,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:13:59,266	[INFO]	130	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:13:59,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:14:00,263	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:14:00,265	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:14:00,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:14:01,293	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:14:02,333	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:14:05,716	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:14:05,718	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 42,48 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:14:09,200	[INFO]	136	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:14:09,201	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:14:09,202	[INFO]	137	SUCCESS	+2.0	
2020-12-31 14:14:09,202	[DEBUG]	
2020-12-31 14:14:10,282	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:14:13,637	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:14:13,638	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:14:14,668	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:14:18,074	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:14:18,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 26,31 ****
--- 27,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:14:19,092	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:14:20,121	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:14:21,160	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:14:24,643	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:14:24,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:14:25,731	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:14:26,773	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:14:26,775	[INFO]	148	SUCCESS	+2.0	
2020-12-31 14:14:26,775	[DEBUG]	
2020-12-31 14:14:30,169	[INFO]	149	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:14:45,244	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:14:48,215	[INFO]	151	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:14:49,222	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:14:52,576	[INFO]	153	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:14:52,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:14:52,578	[INFO]	154	SUCCESS	+2.0	
2020-12-31 14:14:52,578	[DEBUG]	
2020-12-31 14:14:55,922	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:14:55,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 14:14:55,924	[INFO]	156	SUCCESS	+2.0	
2020-12-31 14:14:55,925	[DEBUG]	
2020-12-31 14:14:59,240	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:14:59,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:14:59,242	[INFO]	158	SUCCESS	+2.0	
2020-12-31 14:14:59,242	[DEBUG]	
2020-12-31 14:15:02,613	[INFO]	159	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:15:02,614	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 14:15:02,615	[INFO]	160	SUCCESS	+2.0	
2020-12-31 14:15:02,615	[DEBUG]	
2020-12-31 14:15:03,615	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:15:04,653	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:15:05,746	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:15:06,837	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:15:07,873	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:15:08,896	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:15:09,902	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:15:10,931	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:15:11,940	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:15:12,967	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:15:14,008	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:15:15,072	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:15:16,099	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:15:17,133	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:15:18,189	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:15:19,223	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:15:20,238	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:15:21,247	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:15:24,592	[INFO]	179	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:15:24,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:15:25,589	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:15:25,590	[INFO]	181	SUCCESS	+2.0	
2020-12-31 14:15:25,591	[DEBUG]	
2020-12-31 14:15:26,610	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:15:27,647	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:15:28,685	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:15:29,710	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:15:30,774	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:15:34,155	[INFO]	187	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:15:34,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:15:34,157	[INFO]	188	SUCCESS	+2.0	
2020-12-31 14:15:34,157	[DEBUG]	
2020-12-31 14:15:35,299	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:15:36,344	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:15:37,440	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:15:38,477	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:15:38,479	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:15:39,516	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:15:42,932	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:15:42,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:15:43,949	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:15:43,950	[INFO]	197	SUCCESS	+2.0	
2020-12-31 14:15:43,950	[DEBUG]	
2020-12-31 14:15:44,976	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:15:45,978	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:15:47,021	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:15:48,051	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:15:49,087	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:15:50,108	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:15:51,154	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:15:52,193	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:15:53,193	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:15:54,272	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:15:57,647	[INFO]	208	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:15:57,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 14:15:58,692	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:15:58,694	[INFO]	210	SUCCESS	+2.0	
2020-12-31 14:15:58,694	[DEBUG]	
2020-12-31 14:15:59,731	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:16:00,755	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:16:04,120	[INFO]	213	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:16:04,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:16:04,122	[INFO]	214	SUCCESS	+2.0	
2020-12-31 14:16:04,122	[DEBUG]	
2020-12-31 14:16:05,102	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:16:06,158	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:16:07,171	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:16:08,190	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:16:09,199	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:16:10,261	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:16:11,302	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:16:12,335	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:16:13,340	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:16:14,390	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:16:17,715	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:16:17,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:16:17,717	[INFO]	226	SUCCESS	+2.0	
2020-12-31 14:16:17,717	[DEBUG]	
2020-12-31 14:16:17,718	[INFO]	227	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:16:17,719	[DEBUG]	
2020-12-31 14:16:21,154	[INFO]	228	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:16:21,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:16:21,156	[INFO]	229	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:16:21,156	[DEBUG]	
2020-12-31 14:16:22,218	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:16:23,262	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:16:26,643	[INFO]	232	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:16:27,668	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:16:27,670	[INFO]	234	SUCCESS	+2.0	
2020-12-31 14:16:27,670	[DEBUG]	
2020-12-31 14:16:31,069	[INFO]	235	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:16:31,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:16:32,072	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:16:32,073	[INFO]	237	SUCCESS	+2.0	
2020-12-31 14:16:32,073	[DEBUG]	
2020-12-31 14:16:33,124	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:16:34,197	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:16:35,230	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:16:35,231	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:16:36,563	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:16:37,591	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:16:40,971	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:16:40,972	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:44,342	[INFO]	245	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:16:44,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:47,646	[INFO]	246	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:16:47,647	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:50,914	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:16:50,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:51,909	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:16:51,911	[INFO]	249	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:16:51,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:52,932	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:16:52,933	[INFO]	251	SUCCESS	+2.0	
2020-12-31 14:16:52,933	[DEBUG]	
2020-12-31 14:16:53,951	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:16:54,977	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:16:58,305	[INFO]	254	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:16:58,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:16:58,307	[INFO]	255	SUCCESS	+2.0	
2020-12-31 14:16:58,308	[DEBUG]	
2020-12-31 14:16:59,349	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:17:00,386	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:17:01,421	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:17:04,814	[INFO]	259	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:17:04,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:17:04,815	[INFO]	260	SUCCESS	+2.0	
2020-12-31 14:17:04,816	[DEBUG]	
2020-12-31 14:17:05,846	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:17:06,871	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:17:07,898	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:17:08,939	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:17:09,952	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:17:10,969	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:17:14,370	[INFO]	267	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:17:14,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:17:15,305	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:17:15,306	[INFO]	269	SUCCESS	+2.0	
2020-12-31 14:17:15,306	[DEBUG]	
2020-12-31 14:17:16,324	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:17:19,619	[INFO]	271	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:17:19,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 14:17:19,621	[INFO]	272	SUCCESS	+2.0	
2020-12-31 14:17:19,622	[DEBUG]	
2020-12-31 14:17:20,703	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:17:21,732	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:17:22,761	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:17:23,780	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:17:24,852	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:17:25,871	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:17:25,872	[INFO]	279	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:17:25,873	[DEBUG]	
2020-12-31 14:17:25,873	[INFO]	280	SUCCESS	+2.0	
2020-12-31 14:17:25,874	[DEBUG]	
2020-12-31 14:17:26,926	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:17:27,969	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:17:28,992	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:17:30,014	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:17:30,016	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:17:31,060	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:17:32,078	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:17:33,105	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:17:34,131	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:17:35,207	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:17:36,233	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:17:37,223	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:17:38,247	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:17:39,324	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:17:40,356	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:17:41,381	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:17:44,999	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:17:45,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:17:45,000	[INFO]	298	SUCCESS	+2.0	
2020-12-31 14:17:45,001	[DEBUG]	
2020-12-31 14:17:46,043	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:17:47,065	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:17:48,099	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:17:49,494	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:17:53,020	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:17:53,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:17:53,997	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:17:53,998	[INFO]	305	SUCCESS	+2.0	
2020-12-31 14:17:53,998	[DEBUG]	
2020-12-31 14:17:55,031	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:17:58,398	[INFO]	307	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:17:58,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:17:58,400	[INFO]	308	SUCCESS	+2.0	
2020-12-31 14:17:58,400	[DEBUG]	
2020-12-31 14:17:59,495	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:18:00,535	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:18:01,553	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:18:02,575	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:18:03,634	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:18:04,668	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:18:05,677	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:18:06,718	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:18:07,734	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:18:08,765	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:18:12,058	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:18:12,059	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 14:18:12,060	[INFO]	320	SUCCESS	+2.0	
2020-12-31 14:18:12,061	[DEBUG]	
2020-12-31 14:18:13,069	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:18:14,103	[INFO]	322	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:18:15,125	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:18:16,146	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:18:17,192	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:18:18,236	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:18:19,250	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:18:20,299	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:18:21,361	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:18:22,380	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:18:25,854	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:18:25,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:18:29,195	[INFO]	332	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:18:30,207	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:18:30,208	[INFO]	334	SUCCESS	+2.0	
2020-12-31 14:18:30,208	[DEBUG]	
2020-12-31 14:18:31,223	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:18:31,225	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:18:31,225	[DEBUG]	
2020-12-31 14:18:31,226	[INFO]	337	SUCCESS	+2.0	
2020-12-31 14:18:31,226	[DEBUG]	
2020-12-31 14:18:32,301	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:18:33,274	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:18:34,291	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:18:35,332	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:18:38,708	[INFO]	342	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:18:38,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:18:42,088	[INFO]	343	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:18:43,129	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:18:43,130	[INFO]	345	SUCCESS	+2.0	
2020-12-31 14:18:43,130	[DEBUG]	
2020-12-31 14:18:46,622	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:18:46,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:18:47,646	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:18:51,009	[INFO]	348	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:18:51,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:18:51,011	[INFO]	349	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:18:51,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:18:51,012	[INFO]	350	SUCCESS	+2.0	
2020-12-31 14:18:51,012	[DEBUG]	
2020-12-31 14:18:52,014	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:18:53,047	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:18:54,113	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:18:55,142	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:18:56,186	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:18:57,220	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:18:58,256	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:18:59,316	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:19:00,360	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:19:01,368	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:19:04,752	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:19:04,753	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:19:04,754	[INFO]	362	SUCCESS	+2.0	
2020-12-31 14:19:04,755	[DEBUG]	
2020-12-31 14:19:05,756	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:19:09,142	[INFO]	364	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:19:09,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:19:09,143	[INFO]	365	SUCCESS	+2.0	
2020-12-31 14:19:09,144	[DEBUG]	
2020-12-31 14:19:12,540	[INFO]	366	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:19:13,537	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:19:14,579	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:19:17,932	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:19:17,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:19:18,989	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:19:18,990	[INFO]	371	SUCCESS	+2.0	
2020-12-31 14:19:18,991	[DEBUG]	
2020-12-31 14:19:22,355	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:19:22,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:19:23,372	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:19:23,373	[INFO]	374	SUCCESS	+2.0	
2020-12-31 14:19:23,373	[DEBUG]	
2020-12-31 14:19:24,379	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:19:25,441	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:19:26,493	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:19:27,522	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:19:28,543	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:19:29,588	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:19:30,627	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:19:30,629	[INFO]	382	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:19:30,629	[DEBUG]	
2020-12-31 14:19:31,670	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:19:31,671	[INFO]	384	SUCCESS	+2.0	
2020-12-31 14:19:31,672	[DEBUG]	
2020-12-31 14:19:32,727	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:19:33,740	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:19:37,107	[INFO]	387	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:19:37,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:19:38,143	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:19:39,191	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:19:42,653	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:19:42,654	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:19:46,093	[INFO]	391	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:19:46,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:19:46,095	[INFO]	392	SUCCESS	+2.0	
2020-12-31 14:19:46,095	[DEBUG]	
2020-12-31 14:19:47,076	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:19:48,092	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:19:51,403	[INFO]	395	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:19:51,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:19:54,895	[INFO]	396	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:19:54,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:19:55,911	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:19:56,971	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:19:57,983	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:19:59,023	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:19:59,024	[INFO]	401	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:19:59,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:20:00,041	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:20:01,077	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:20:01,078	[INFO]	404	SUCCESS	+2.0	
2020-12-31 14:20:01,079	[DEBUG]	
2020-12-31 14:20:02,118	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:20:05,622	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:20:05,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:20:05,624	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:20:05,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:20:06,638	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:20:07,712	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:20:11,144	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:20:11,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,41 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 visitedNodes.add(node);
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:14,555	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:20:14,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,41 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 visitedNodes.add(node);
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 70,76 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:20:17,967	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:20:17,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 72,78 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:20:21,311	[INFO]	413	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:20:21,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 72,78 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:20:24,761	[INFO]	414	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:20:24,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:25,813	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:20:29,185	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:20:29,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,45 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(startnode, 0);
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:29,188	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:20:29,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,45 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(startnode, 0);
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:29,190	[INFO]	418	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:20:29,191	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,45 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(startnode, 0);
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:30,249	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:20:31,291	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:20:32,339	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:20:32,341	[INFO]	422	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:20:32,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:32,343	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:20:32,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:20:33,408	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 14:20:37,373	[INFO]	425	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:20:37,374	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:20:37,376	[INFO]	426	SUCCESS	+2.0	
2020-12-31 14:20:37,377	[DEBUG]	
2020-12-31 14:20:38,708	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:20:39,773	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:20:43,153	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:20:43,154	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:20:44,189	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:20:45,222	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:20:45,224	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:20:45,224	[INFO]	433	SUCCESS	+2.0	
2020-12-31 14:20:45,225	[DEBUG]	
2020-12-31 14:20:46,243	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:20:47,278	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:20:48,356	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:20:48,358	[INFO]	437	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:20:48,358	[DEBUG]	
2020-12-31 14:20:48,359	[INFO]	438	SUCCESS	+2.0	
2020-12-31 14:20:48,359	[DEBUG]	
2020-12-31 14:20:49,395	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:20:50,437	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:20:51,466	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:20:52,491	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:20:55,906	[INFO]	443	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:20:55,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:20:55,908	[INFO]	444	SUCCESS	+2.0	
2020-12-31 14:20:55,909	[DEBUG]	
2020-12-31 14:20:56,923	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:20:57,970	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:20:58,973	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:21:02,312	[INFO]	448	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 14:21:05,670	[INFO]	449	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:21:06,667	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:21:07,675	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:21:08,689	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:21:09,722	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:21:13,098	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:21:13,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:21:13,102	[INFO]	455	SUCCESS	+2.0	
2020-12-31 14:21:13,103	[DEBUG]	
2020-12-31 14:21:14,212	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:21:17,570	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:21:17,574	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:21:17,575	[INFO]	458	SUCCESS	+2.0	
2020-12-31 14:21:17,575	[DEBUG]	
2020-12-31 14:21:18,997	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:21:20,047	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:21:21,071	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:21:22,125	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:21:23,192	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:21:24,234	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:21:27,531	[INFO]	465	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:21:28,517	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:21:29,563	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:21:30,589	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:21:31,637	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:21:32,660	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:21:33,690	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:21:34,727	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:21:38,109	[INFO]	473	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:21:38,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:21:39,124	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:21:39,126	[INFO]	475	SUCCESS	+2.0	
2020-12-31 14:21:39,127	[DEBUG]	
2020-12-31 14:21:40,163	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:21:41,200	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:21:42,266	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:21:43,303	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:21:46,660	[INFO]	480	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:21:46,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 14:21:49,973	[INFO]	481	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:21:49,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 14:21:51,008	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:21:54,417	[INFO]	483	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:21:54,419	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:21:54,419	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 14:21:54,420	[INFO]	485	SUCCESS	+2.0	
2020-12-31 14:21:54,420	[DEBUG]	
2020-12-31 14:21:55,435	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:21:56,453	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:21:57,511	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:21:58,549	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:22:01,991	[INFO]	490	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:22:01,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:22:02,989	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:22:02,990	[INFO]	492	SUCCESS	+2.0	
2020-12-31 14:22:02,990	[DEBUG]	
2020-12-31 14:22:06,337	[INFO]	493	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:22:06,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 14:22:09,656	[INFO]	494	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:22:09,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 14:22:13,068	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:22:13,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:22:14,093	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:22:14,095	[INFO]	497	SUCCESS	+2.0	
2020-12-31 14:22:14,095	[DEBUG]	
2020-12-31 14:22:15,122	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:22:16,172	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:22:17,231	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:22:17,232	[INFO]	==== END ====
2020-12-31 14:22:17,232	[INFO]	Reason: step budget
2020-12-31 14:22:17,232	[INFO]	
2020-12-31 14:22:17,233	[INFO]	========== EPOCH 6 ==========
2020-12-31 14:22:17,233	[INFO]	==== WARMUP ====
2020-12-31 14:22:20,581	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:22:20,582	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:22:23,934	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:22:23,934	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:22:27,337	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:22:27,337	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:22:30,783	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 14:22:30,783	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:22:30,783	[INFO]	==== START ====
2020-12-31 14:22:34,172	[INFO]	1	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:22:37,533	[INFO]	2	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:22:37,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:22:38,523	[INFO]	3	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:22:39,592	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:22:43,032	[INFO]	5	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:22:44,058	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:22:44,059	[INFO]	7	SUCCESS	+2.0	
2020-12-31 14:22:44,060	[DEBUG]	
2020-12-31 14:22:45,093	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:22:46,141	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:22:47,164	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:22:48,180	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:22:49,189	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:22:50,221	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:22:51,225	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:22:52,247	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:22:55,686	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:22:55,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 14:22:55,688	[INFO]	17	SUCCESS	+2.0	
2020-12-31 14:22:55,688	[DEBUG]	
2020-12-31 14:22:59,031	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:22:59,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:22:59,033	[INFO]	19	SUCCESS	+2.0	
2020-12-31 14:22:59,033	[DEBUG]	
2020-12-31 14:22:59,958	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:23:00,982	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:23:04,379	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:23:04,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:23:07,756	[INFO]	23	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:23:08,784	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:23:08,785	[INFO]	25	SUCCESS	+2.0	
2020-12-31 14:23:08,786	[DEBUG]	
2020-12-31 14:23:09,857	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:23:10,918	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:23:11,947	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:23:12,954	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:23:13,991	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:23:17,338	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:23:17,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 14:23:17,340	[INFO]	32	SUCCESS	+2.0	
2020-12-31 14:23:17,340	[DEBUG]	
2020-12-31 14:23:20,696	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:23:20,697	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 14:23:21,716	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:23:21,717	[INFO]	35	SUCCESS	+2.0	
2020-12-31 14:23:21,718	[DEBUG]	
2020-12-31 14:23:22,756	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:23:23,782	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:23:24,876	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:23:25,946	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:23:26,953	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:23:27,992	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:23:31,345	[INFO]	42	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:23:31,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:23:31,347	[INFO]	43	SUCCESS	+2.0	
2020-12-31 14:23:31,347	[DEBUG]	
2020-12-31 14:23:32,353	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:23:33,397	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:23:36,764	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:23:36,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:23:37,807	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:23:39,018	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:23:40,165	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:23:41,227	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:23:41,229	[INFO]	51	SUCCESS	+2.0	
2020-12-31 14:23:41,229	[DEBUG]	
2020-12-31 14:23:42,300	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:23:43,359	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:23:44,416	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:23:45,457	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:23:46,476	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:23:47,500	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:23:48,504	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:23:51,928	[INFO]	59	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:23:51,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:23:51,930	[INFO]	60	SUCCESS	+2.0	
2020-12-31 14:23:51,931	[DEBUG]	
2020-12-31 14:23:52,931	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:23:53,927	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:23:54,974	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:23:55,988	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:23:57,040	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:23:58,053	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:23:59,072	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:24:02,405	[INFO]	68	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:24:02,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:24:02,408	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:24:02,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:24:03,483	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:24:04,537	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:24:05,579	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:24:06,684	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:24:06,686	[INFO]	74	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:24:06,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:24:06,688	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:24:06,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:24:06,690	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:24:06,691	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:24:06,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:24:06,692	[INFO]	78	SUCCESS	+2.0	
2020-12-31 14:24:06,692	[DEBUG]	
2020-12-31 14:24:07,782	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:24:11,242	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:24:11,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 14:24:11,244	[INFO]	81	SUCCESS	+2.0	
2020-12-31 14:24:11,245	[DEBUG]	
2020-12-31 14:24:12,346	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:24:13,395	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:24:14,367	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:24:15,403	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:24:16,406	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:24:19,770	[INFO]	87	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:24:19,772	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 14:24:23,167	[INFO]	88	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:24:23,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:24:23,174	[INFO]	89	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:24:23,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 14:24:23,177	[INFO]	90	SUCCESS	+2.0	
2020-12-31 14:24:23,178	[DEBUG]	
2020-12-31 14:24:24,175	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:24:25,231	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:24:26,261	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:24:29,569	[INFO]	94	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:24:32,955	[INFO]	95	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:24:32,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:24:33,965	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:24:33,966	[INFO]	97	SUCCESS	+2.0	
2020-12-31 14:24:33,966	[DEBUG]	
2020-12-31 14:24:34,988	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:24:38,360	[INFO]	99	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:24:38,362	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:24:39,403	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:24:39,404	[INFO]	101	SUCCESS	+2.0	
2020-12-31 14:24:39,405	[DEBUG]	
2020-12-31 14:24:42,743	[INFO]	102	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:24:42,744	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 14:24:42,745	[INFO]	103	SUCCESS	+2.0	
2020-12-31 14:24:42,745	[DEBUG]	
2020-12-31 14:24:43,774	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:24:44,823	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:24:45,826	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:24:49,199	[INFO]	107	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:24:49,200	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:24:50,207	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:24:50,208	[INFO]	109	SUCCESS	+2.0	
2020-12-31 14:24:50,208	[DEBUG]	
2020-12-31 14:24:51,200	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:24:52,210	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:24:55,561	[INFO]	112	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:24:56,581	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:24:57,610	[INFO]	114	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 14:24:58,650	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:24:59,659	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:25:00,688	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:25:01,729	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:25:02,767	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:25:03,803	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:25:07,135	[INFO]	121	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:25:07,136	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:25:08,146	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:25:08,147	[INFO]	123	SUCCESS	+2.0	
2020-12-31 14:25:08,148	[DEBUG]	
2020-12-31 14:25:09,216	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:25:10,252	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:25:11,258	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:25:12,289	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:25:13,346	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:25:14,403	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:25:15,426	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:25:15,428	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:25:16,460	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:25:19,877	[INFO]	133	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:25:19,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:25:20,891	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:25:24,172	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:25:24,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 14:25:24,174	[INFO]	136	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:25:24,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:25:25,228	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:25:25,229	[INFO]	138	SUCCESS	+2.0	
2020-12-31 14:25:25,229	[DEBUG]	
2020-12-31 14:25:26,264	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:25:27,266	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:25:28,288	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:25:29,364	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:25:30,390	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:25:33,802	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:25:33,803	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:25:34,828	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:25:36,138	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:25:36,139	[INFO]	147	SUCCESS	+2.0	
2020-12-31 14:25:36,139	[DEBUG]	
2020-12-31 14:25:37,198	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:25:38,291	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:25:39,346	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:25:40,417	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:25:41,436	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:25:44,886	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:25:44,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:25:45,889	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:25:49,405	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:25:49,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 43,48 ****
--- 44,50 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:25:50,427	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:25:51,515	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:25:54,886	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:25:54,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:25:55,910	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:25:56,954	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:25:56,956	[INFO]	161	SUCCESS	+2.0	
2020-12-31 14:25:56,956	[DEBUG]	
2020-12-31 14:25:58,000	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:25:58,942	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:25:59,961	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:26:00,985	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:26:04,335	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:26:04,336	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:26:07,698	[INFO]	167	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:26:07,699	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
--- 23,34 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:26:08,727	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:26:09,714	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:26:09,715	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:26:09,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:26:09,717	[INFO]	171	SUCCESS	+2.0	
2020-12-31 14:26:09,717	[DEBUG]	
2020-12-31 14:26:13,094	[INFO]	172	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:26:13,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:26:14,099	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:26:14,100	[INFO]	174	SUCCESS	+2.0	
2020-12-31 14:26:14,101	[DEBUG]	
2020-12-31 14:26:15,122	[INFO]	175	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:26:16,132	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:26:17,128	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:26:18,183	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:26:21,576	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:26:21,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:26:24,968	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:26:24,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,20 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         Node minNode = null;
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 27,32 ****
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 14:26:28,248	[INFO]	181	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:26:28,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 14:26:28,250	[INFO]	182	SUCCESS	+2.0	
2020-12-31 14:26:28,251	[DEBUG]	
2020-12-31 14:26:29,257	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:26:30,308	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:26:31,270	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:26:34,650	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:26:34,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 14:26:34,652	[INFO]	187	SUCCESS	+2.0	
2020-12-31 14:26:34,653	[DEBUG]	
2020-12-31 14:26:34,653	[INFO]	188	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:26:34,654	[DEBUG]	
2020-12-31 14:26:37,991	[INFO]	189	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:26:37,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:26:37,993	[INFO]	190	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:26:37,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:26:39,000	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:26:40,023	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:26:40,025	[INFO]	193	SUCCESS	+2.0	
2020-12-31 14:26:40,025	[DEBUG]	
2020-12-31 14:26:41,050	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:26:42,131	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:26:43,187	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:26:44,289	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:26:45,369	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:26:46,398	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:26:47,441	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:26:47,443	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:27:02,502	[INFO]	202	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:27:03,423	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:27:06,349	[INFO]	204	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:27:06,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 14:27:06,351	[INFO]	205	SUCCESS	+2.0	
2020-12-31 14:27:06,351	[DEBUG]	
2020-12-31 14:27:09,696	[INFO]	206	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-31 14:27:10,765	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:27:11,801	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:27:12,847	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:27:13,927	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:27:14,947	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:27:15,965	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:27:17,015	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:27:18,030	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:27:19,062	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:27:22,728	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:27:22,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:27:22,730	[INFO]	217	SUCCESS	+2.0	
2020-12-31 14:27:22,731	[DEBUG]	
2020-12-31 14:27:23,780	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:27:24,868	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:27:28,282	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:27:28,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:27:28,284	[INFO]	221	SUCCESS	+2.0	
2020-12-31 14:27:28,284	[DEBUG]	
2020-12-31 14:27:29,299	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:27:32,620	[INFO]	223	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:27:33,671	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:27:34,682	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:27:35,653	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:27:39,058	[INFO]	227	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:27:40,071	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:27:41,026	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:27:56,096	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:27:56,989	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:27:57,863	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:27:58,766	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:27:59,667	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:27:59,668	[INFO]	235	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-31 14:27:59,669	[DEBUG]	
2020-12-31 14:28:03,012	[INFO]	236	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:28:03,013	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 14:28:03,014	[INFO]	237	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-31 14:28:03,014	[DEBUG]	
2020-12-31 14:28:03,015	[INFO]	238	SUCCESS	+2.0	
2020-12-31 14:28:03,015	[DEBUG]	
2020-12-31 14:28:06,328	[INFO]	239	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:28:06,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:28:07,326	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:28:07,327	[INFO]	241	SUCCESS	+2.0	
2020-12-31 14:28:07,328	[DEBUG]	
2020-12-31 14:28:08,338	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:28:09,378	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:28:10,408	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:28:11,464	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:28:12,507	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:28:13,527	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:28:14,547	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:28:15,569	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:28:19,350	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:28:19,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:28:19,352	[INFO]	251	SUCCESS	+2.0	
2020-12-31 14:28:19,353	[DEBUG]	
2020-12-31 14:28:20,393	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:28:23,766	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:28:23,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:28:24,796	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:28:25,850	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:28:26,879	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:28:27,885	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:28:27,887	[INFO]	258	SUCCESS	+2.0	
2020-12-31 14:28:27,887	[DEBUG]	
2020-12-31 14:28:28,923	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:28:29,952	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:28:31,005	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:28:31,985	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:28:35,323	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:28:35,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:28:35,325	[INFO]	264	SUCCESS	+2.0	
2020-12-31 14:28:35,326	[DEBUG]	
2020-12-31 14:28:36,352	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:28:37,358	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:28:38,331	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:28:39,380	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:28:40,417	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:28:41,470	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:28:42,594	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:28:46,152	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:28:46,153	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:28:46,154	[INFO]	273	SUCCESS	+2.0	
2020-12-31 14:28:46,154	[DEBUG]	
2020-12-31 14:28:47,185	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:28:48,219	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:28:49,231	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:28:52,590	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:28:52,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:28:52,592	[INFO]	278	SUCCESS	+2.0	
2020-12-31 14:28:52,592	[DEBUG]	
2020-12-31 14:28:53,601	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:28:54,635	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:28:55,674	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-31 14:28:56,714	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:29:11,789	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:29:12,665	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:29:13,557	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:29:14,428	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:29:15,348	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:29:30,419	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:29:31,250	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:29:31,251	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:29:31,251	[DEBUG]	
2020-12-31 14:29:34,297	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:29:34,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 14:29:34,300	[INFO]	292	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:29:34,300	[DEBUG]	
2020-12-31 14:29:34,301	[INFO]	293	SUCCESS	+2.0	
2020-12-31 14:29:34,301	[DEBUG]	
2020-12-31 14:29:37,653	[INFO]	294	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:29:37,654	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:29:37,655	[INFO]	295	SUCCESS	+2.0	
2020-12-31 14:29:37,656	[DEBUG]	
2020-12-31 14:29:38,708	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:29:42,173	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:29:42,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:29:42,175	[INFO]	298	SUCCESS	+2.0	
2020-12-31 14:29:42,175	[DEBUG]	
2020-12-31 14:29:57,238	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:29:58,145	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:30:01,203	[INFO]	301	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:30:01,204	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:30:02,215	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-31 14:30:03,265	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:30:03,267	[INFO]	304	SUCCESS	+2.0	
2020-12-31 14:30:03,267	[DEBUG]	
2020-12-31 14:30:04,318	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:30:07,691	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:30:07,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:30:08,740	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:30:10,009	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:30:10,010	[INFO]	309	SUCCESS	+2.0	
2020-12-31 14:30:10,010	[DEBUG]	
2020-12-31 14:30:11,075	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:30:12,151	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:30:13,185	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:30:14,227	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:30:15,244	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:30:16,278	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:30:17,306	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:30:18,345	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:30:19,413	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:30:22,810	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:30:22,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 14:30:23,824	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:30:24,892	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:30:24,894	[INFO]	322	SUCCESS	+2.0	
2020-12-31 14:30:24,894	[DEBUG]	
2020-12-31 14:30:25,906	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:30:26,919	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:30:27,930	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:30:28,891	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:30:29,909	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:30:30,917	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:30:30,919	[INFO]	329	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:30:30,919	[DEBUG]	
2020-12-31 14:30:30,920	[INFO]	330	SUCCESS	+2.0	
2020-12-31 14:30:30,920	[DEBUG]	
2020-12-31 14:30:31,951	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:30:32,974	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:30:34,027	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:30:35,194	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:30:36,591	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:30:37,996	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:30:39,397	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:30:40,627	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:30:41,959	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:30:46,069	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:30:46,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:30:46,071	[INFO]	341	SUCCESS	+2.0	
2020-12-31 14:30:46,072	[DEBUG]	
2020-12-31 14:30:46,073	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:30:47,068	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:30:48,076	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:30:49,105	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:30:52,574	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:30:52,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:30:53,702	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:30:53,703	[INFO]	348	SUCCESS	+2.0	
2020-12-31 14:30:53,703	[DEBUG]	
2020-12-31 14:30:54,717	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:30:55,712	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:30:56,742	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:30:57,750	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:31:01,147	[INFO]	353	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:31:02,141	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:31:03,114	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:31:06,596	[INFO]	356	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:31:06,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:31:06,598	[INFO]	357	SUCCESS	+2.0	
2020-12-31 14:31:06,598	[DEBUG]	
2020-12-31 14:31:07,626	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:31:07,628	[INFO]	359	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:31:07,628	[DEBUG]	
2020-12-31 14:31:07,629	[INFO]	360	SUCCESS	+2.0	
2020-12-31 14:31:07,629	[DEBUG]	
2020-12-31 14:31:08,635	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:31:09,667	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:31:10,702	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:31:11,716	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:31:12,748	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:31:16,025	[INFO]	366	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:31:16,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 14:31:16,027	[INFO]	367	SUCCESS	+2.0	
2020-12-31 14:31:16,027	[DEBUG]	
2020-12-31 14:31:16,028	[INFO]	368	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:31:16,028	[DEBUG]	
2020-12-31 14:31:17,046	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:31:17,047	[INFO]	370	SUCCESS	+2.0	
2020-12-31 14:31:17,048	[DEBUG]	
2020-12-31 14:31:18,091	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:31:19,120	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:31:22,414	[INFO]	373	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:31:23,425	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:31:24,439	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:31:25,554	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:31:26,585	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:31:27,597	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:31:31,004	[INFO]	379	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:31:31,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:31:32,005	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:31:33,023	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:31:33,024	[INFO]	382	SUCCESS	+2.0	
2020-12-31 14:31:33,025	[DEBUG]	
2020-12-31 14:31:36,344	[INFO]	383	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:31:36,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:31:36,346	[INFO]	384	SUCCESS	+2.0	
2020-12-31 14:31:36,346	[DEBUG]	
2020-12-31 14:31:36,347	[INFO]	385	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:31:36,347	[DEBUG]	
2020-12-31 14:31:36,348	[INFO]	386	SUCCESS	+2.0	
2020-12-31 14:31:36,348	[DEBUG]	
2020-12-31 14:31:37,344	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:31:38,367	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:31:39,405	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:31:40,410	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:31:41,358	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:31:42,415	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:31:43,444	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:31:46,797	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:31:46,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:31:47,836	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:31:47,837	[INFO]	396	SUCCESS	+2.0	
2020-12-31 14:31:47,838	[DEBUG]	
2020-12-31 14:31:48,873	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:31:52,320	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:31:52,321	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:31:53,386	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:31:53,387	[INFO]	400	SUCCESS	+2.0	
2020-12-31 14:31:53,387	[DEBUG]	
2020-12-31 14:31:54,400	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:31:55,402	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:31:58,786	[INFO]	403	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:31:58,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:31:58,788	[INFO]	404	SUCCESS	+2.0	
2020-12-31 14:31:58,789	[DEBUG]	
2020-12-31 14:31:59,806	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:32:00,838	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:32:04,263	[INFO]	407	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:32:04,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 14:32:05,256	[INFO]	408	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:32:05,257	[INFO]	409	SUCCESS	+2.0	
2020-12-31 14:32:05,258	[DEBUG]	
2020-12-31 14:32:06,249	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:32:07,281	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:32:08,282	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:32:09,306	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:32:10,354	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:32:11,394	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:32:12,406	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:32:13,413	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:32:14,449	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:32:15,484	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:32:16,524	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:32:17,593	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:32:18,663	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:32:19,728	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:32:20,832	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:32:21,897	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:32:25,486	[INFO]	426	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:32:26,551	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:32:27,616	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:32:28,715	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:32:29,778	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:32:30,794	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:32:31,749	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:32:35,059	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:32:35,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:32:35,061	[INFO]	434	SUCCESS	+2.0	
2020-12-31 14:32:35,062	[DEBUG]	
2020-12-31 14:32:36,098	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:32:37,090	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:32:38,109	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:32:39,166	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:32:40,174	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:32:41,242	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:32:41,245	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:32:44,541	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:32:44,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 14:32:44,543	[INFO]	443	SUCCESS	+2.0	
2020-12-31 14:32:44,544	[DEBUG]	
2020-12-31 14:32:45,567	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:32:46,585	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:32:47,602	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:32:50,962	[INFO]	447	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:32:51,986	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:32:52,999	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:32:56,420	[INFO]	450	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:32:59,809	[INFO]	451	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:33:00,868	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:33:01,961	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:33:03,075	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:33:04,173	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:33:07,714	[INFO]	456	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:33:07,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:33:11,205	[INFO]	457	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:33:11,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 14:33:11,208	[INFO]	458	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:33:11,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 14:33:11,210	[INFO]	459	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:33:11,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:33:11,211	[INFO]	460	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:33:11,211	[DEBUG]	
2020-12-31 14:33:12,211	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:33:12,212	[INFO]	462	SUCCESS	+2.0	
2020-12-31 14:33:12,212	[DEBUG]	
2020-12-31 14:33:13,259	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:33:14,317	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:33:15,323	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:33:16,283	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:33:17,311	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:33:18,361	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:33:19,393	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:33:20,469	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:33:23,970	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:33:23,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:33:25,259	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:33:26,296	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:33:26,297	[INFO]	474	SUCCESS	+2.0	
2020-12-31 14:33:26,297	[DEBUG]	
2020-12-31 14:33:27,723	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:33:28,776	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:33:29,816	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:33:30,835	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:33:31,873	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:33:32,889	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:33:33,960	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:33:37,261	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:33:37,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 14:33:40,673	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:33:40,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:33:40,676	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:33:40,677	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 14:33:40,677	[INFO]	485	SUCCESS	+2.0	
2020-12-31 14:33:40,678	[DEBUG]	
2020-12-31 14:33:41,716	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:33:42,734	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:33:43,776	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:33:44,785	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:33:45,802	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:33:46,806	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:33:47,839	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:33:48,845	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:33:49,865	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:33:50,898	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:33:51,930	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:33:52,867	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:33:53,909	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:33:54,927	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:33:55,939	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:33:55,940	[INFO]	==== END ====
2020-12-31 14:33:55,940	[INFO]	Reason: step budget
2020-12-31 14:33:55,941	[INFO]	
2020-12-31 14:33:55,941	[INFO]	========== EPOCH 7 ==========
2020-12-31 14:33:55,941	[INFO]	==== WARMUP ====
2020-12-31 14:33:59,361	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:33:59,361	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:34:02,674	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:34:02,674	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:34:06,059	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:34:06,059	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:34:09,344	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 14:34:09,344	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:34:09,344	[INFO]	==== START ====
2020-12-31 14:34:10,358	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:34:13,776	[INFO]	2	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:34:13,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:34:14,774	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:34:14,775	[INFO]	4	SUCCESS	+2.0	
2020-12-31 14:34:14,775	[DEBUG]	
2020-12-31 14:34:15,807	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:34:16,813	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:34:17,834	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:34:21,229	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:34:21,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 14:34:22,246	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:34:22,247	[INFO]	10	SUCCESS	+2.0	
2020-12-31 14:34:22,247	[DEBUG]	
2020-12-31 14:34:25,634	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:34:25,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:34:25,636	[INFO]	12	SUCCESS	+2.0	
2020-12-31 14:34:25,636	[DEBUG]	
2020-12-31 14:34:40,700	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:34:43,799	[INFO]	14	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:34:43,800	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 14:34:43,801	[INFO]	15	SUCCESS	+2.0	
2020-12-31 14:34:43,801	[DEBUG]	
2020-12-31 14:34:43,802	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:34:47,046	[INFO]	17	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:34:47,047	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:34:47,048	[INFO]	18	SUCCESS	+2.0	
2020-12-31 14:34:47,048	[DEBUG]	
2020-12-31 14:34:48,040	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:34:49,124	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:34:50,095	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:34:53,488	[INFO]	22	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:34:53,489	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 14:34:56,907	[INFO]	23	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:34:56,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:35:00,319	[INFO]	24	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:35:00,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:35:00,321	[INFO]	25	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:35:00,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:35:01,360	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:35:02,387	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:35:03,418	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:35:03,420	[INFO]	29	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:35:03,420	[DEBUG]	
2020-12-31 14:35:03,421	[INFO]	30	SUCCESS	+2.0	
2020-12-31 14:35:03,421	[DEBUG]	
2020-12-31 14:35:04,451	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:35:05,498	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:35:08,841	[INFO]	33	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:35:12,204	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:35:12,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:35:13,231	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:35:13,232	[INFO]	36	SUCCESS	+2.0	
2020-12-31 14:35:13,233	[DEBUG]	
2020-12-31 14:35:14,300	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:35:17,688	[INFO]	38	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:35:17,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:35:18,732	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:35:19,759	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:35:19,761	[INFO]	41	SUCCESS	+2.0	
2020-12-31 14:35:19,761	[DEBUG]	
2020-12-31 14:35:20,819	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:35:21,843	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:35:22,859	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:35:23,905	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:35:24,940	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:35:24,943	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:35:25,963	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:35:26,985	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:35:28,010	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:35:29,031	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:35:30,073	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:35:33,591	[INFO]	53	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:35:34,607	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:35:35,808	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:35:36,974	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:35:38,724	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:35:42,209	[INFO]	58	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:35:43,233	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:35:46,696	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:35:46,697	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 14:35:46,698	[INFO]	61	SUCCESS	+2.0	
2020-12-31 14:35:46,698	[DEBUG]	
2020-12-31 14:35:47,748	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:35:48,793	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:35:52,187	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:35:52,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:35:53,169	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:35:53,170	[INFO]	66	SUCCESS	+2.0	
2020-12-31 14:35:53,171	[DEBUG]	
2020-12-31 14:35:54,223	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:35:55,265	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:35:56,305	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:35:57,346	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:35:58,390	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:35:59,658	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:36:01,006	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:36:02,379	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:36:03,442	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:36:04,457	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:36:05,493	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:36:06,514	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:36:07,551	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:36:08,764	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:36:09,824	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:36:24,906	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:36:25,826	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:36:26,722	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:36:27,664	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:36:27,666	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:36:27,668	[INFO]	87	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:36:27,668	[DEBUG]	
2020-12-31 14:36:27,669	[INFO]	88	SUCCESS	+2.0	
2020-12-31 14:36:27,669	[DEBUG]	
2020-12-31 14:36:28,702	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:36:29,743	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:36:30,812	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:36:31,863	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:36:32,870	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:36:33,909	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:36:34,939	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:36:38,330	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:36:38,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:36:39,363	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:36:39,364	[INFO]	98	SUCCESS	+2.0	
2020-12-31 14:36:39,365	[DEBUG]	
2020-12-31 14:36:42,763	[INFO]	99	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:36:42,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:36:43,788	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:36:43,789	[INFO]	101	SUCCESS	+2.0	
2020-12-31 14:36:43,790	[DEBUG]	
2020-12-31 14:36:44,785	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:36:48,165	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:36:48,166	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:36:49,185	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:36:49,186	[INFO]	105	SUCCESS	+2.0	
2020-12-31 14:36:49,186	[DEBUG]	
2020-12-31 14:36:50,242	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:36:53,639	[INFO]	107	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:36:53,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:36:54,632	[INFO]	108	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:36:54,634	[INFO]	109	SUCCESS	+2.0	
2020-12-31 14:36:54,634	[DEBUG]	
2020-12-31 14:36:55,670	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:36:58,959	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:36:58,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 14:36:59,916	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:37:00,889	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:37:00,892	[INFO]	114	SUCCESS	+2.0	
2020-12-31 14:37:00,893	[DEBUG]	
2020-12-31 14:37:01,956	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:37:05,319	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:37:05,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 14:37:05,321	[INFO]	117	SUCCESS	+2.0	
2020-12-31 14:37:05,321	[DEBUG]	
2020-12-31 14:37:06,374	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:37:07,374	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:37:08,399	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:37:09,416	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:37:12,789	[INFO]	122	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:37:12,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:37:13,821	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:37:14,852	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:37:15,859	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:37:16,895	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:37:16,897	[INFO]	127	SUCCESS	+2.0	
2020-12-31 14:37:16,897	[DEBUG]	
2020-12-31 14:37:17,908	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:37:18,961	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:37:20,083	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:37:23,448	[INFO]	131	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:37:23,449	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:37:23,450	[INFO]	132	SUCCESS	+2.0	
2020-12-31 14:37:23,450	[DEBUG]	
2020-12-31 14:37:24,442	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:37:25,501	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:37:26,523	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:37:27,549	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:37:28,617	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:37:31,992	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:37:31,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:37:32,997	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:37:34,055	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:37:34,057	[INFO]	141	SUCCESS	+2.0	
2020-12-31 14:37:34,057	[DEBUG]	
2020-12-31 14:37:37,486	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:37:37,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:37:37,488	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:37:37,489	[DEBUG]	
2020-12-31 14:37:38,506	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:37:38,507	[INFO]	145	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:37:38,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:37:39,537	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:37:39,539	[INFO]	147	SUCCESS	+2.0	
2020-12-31 14:37:39,539	[DEBUG]	
2020-12-31 14:37:40,598	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:37:41,692	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:37:42,712	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:37:43,744	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:37:44,784	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:37:45,785	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:37:46,812	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:37:47,851	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:37:48,861	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:37:49,900	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:37:50,911	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:37:51,937	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:37:52,949	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:37:53,985	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:37:54,990	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:37:54,992	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:37:58,345	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:37:58,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:38:13,414	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:38:13,415	[INFO]	166	SUCCESS	+2.0	
2020-12-31 14:38:13,416	[DEBUG]	
2020-12-31 14:38:14,329	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:38:17,380	[INFO]	168	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:38:17,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:38:18,425	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:38:19,452	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:38:20,506	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:38:20,507	[INFO]	172	SUCCESS	+2.0	
2020-12-31 14:38:20,507	[DEBUG]	
2020-12-31 14:38:21,535	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-31 14:38:22,592	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:38:23,660	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:38:24,668	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:38:25,764	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:38:26,772	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:38:27,823	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:38:28,882	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:38:29,942	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:38:30,965	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:38:31,986	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:38:33,018	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:38:34,043	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:38:35,103	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:38:36,182	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:38:51,244	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:38:52,135	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:38:53,001	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:38:53,002	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:38:54,001	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:38:55,086	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:38:56,179	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:38:59,729	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:38:59,730	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 14:38:59,731	[INFO]	196	SUCCESS	+2.0	
2020-12-31 14:38:59,731	[DEBUG]	
2020-12-31 14:38:59,732	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:39:00,764	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:39:15,835	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:39:16,710	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:39:17,632	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:39:18,543	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:39:19,594	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:39:20,655	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:39:20,660	[INFO]	205	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:39:20,661	[DEBUG]	
2020-12-31 14:39:20,664	[INFO]	206	SUCCESS	+2.0	
2020-12-31 14:39:20,665	[DEBUG]	
2020-12-31 14:39:21,758	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:39:23,124	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:39:24,181	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:39:25,219	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:39:26,247	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:39:26,249	[INFO]	212	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 14:39:26,249	[DEBUG]	
2020-12-31 14:39:26,250	[INFO]	213	SUCCESS	+2.0	
2020-12-31 14:39:26,250	[DEBUG]	
2020-12-31 14:39:27,324	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 14:39:30,726	[INFO]	215	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:39:31,774	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:39:32,801	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:39:32,803	[INFO]	218	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:39:33,843	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:39:37,174	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:39:37,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:39:37,176	[INFO]	221	SUCCESS	+2.0	
2020-12-31 14:39:37,176	[DEBUG]	
2020-12-31 14:39:38,133	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:39:39,162	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:39:40,185	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:39:43,550	[INFO]	225	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 14:39:43,551	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:39:44,561	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:39:45,632	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:39:46,653	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:39:47,678	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:39:51,142	[INFO]	231	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:39:51,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:39:52,151	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:39:53,169	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:39:54,204	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:39:54,205	[INFO]	235	SUCCESS	+2.0	
2020-12-31 14:39:54,205	[DEBUG]	
2020-12-31 14:39:55,250	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:39:56,308	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:39:57,376	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:39:58,420	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:40:01,841	[INFO]	240	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:40:01,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:40:01,843	[INFO]	241	SUCCESS	+2.0	
2020-12-31 14:40:01,843	[DEBUG]	
2020-12-31 14:40:02,863	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:40:06,309	[INFO]	243	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:40:06,310	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:40:06,311	[INFO]	244	SUCCESS	+2.0	
2020-12-31 14:40:06,311	[DEBUG]	
2020-12-31 14:40:09,764	[INFO]	245	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:40:09,766	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:40:10,840	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:40:11,911	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:40:12,963	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:40:14,104	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:40:14,106	[INFO]	250	SUCCESS	+2.0	
2020-12-31 14:40:14,106	[DEBUG]	
2020-12-31 14:40:15,167	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:40:16,197	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:40:17,246	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:40:18,324	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:40:19,322	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:40:22,721	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:40:22,722	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:40:23,735	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:40:23,736	[INFO]	258	SUCCESS	+2.0	
2020-12-31 14:40:23,737	[DEBUG]	
2020-12-31 14:40:24,796	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:40:25,838	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:40:26,834	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:40:27,892	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:40:28,928	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:40:32,354	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:40:32,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:40:33,379	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:40:33,382	[INFO]	266	SUCCESS	+2.0	
2020-12-31 14:40:33,382	[DEBUG]	
2020-12-31 14:40:34,396	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:40:35,588	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:40:36,635	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:40:37,666	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:40:38,700	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:40:39,742	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:40:40,782	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:40:41,856	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:40:42,904	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:40:43,944	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:40:45,010	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:40:46,037	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:40:47,049	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:40:50,478	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:40:50,480	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 14:40:50,481	[INFO]	281	SUCCESS	+2.0	
2020-12-31 14:40:50,482	[DEBUG]	
2020-12-31 14:40:51,522	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:40:52,577	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:40:53,586	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:40:54,605	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:40:55,630	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:40:56,657	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:40:57,681	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:40:58,721	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:40:59,682	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:41:00,685	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:41:01,713	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:41:02,754	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:41:03,798	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:41:07,169	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:41:07,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:41:07,171	[INFO]	296	SUCCESS	+2.0	
2020-12-31 14:41:07,172	[DEBUG]	
2020-12-31 14:41:08,204	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:41:09,251	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:41:10,269	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:41:11,351	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:41:12,388	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:41:15,859	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:41:15,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:41:19,484	[INFO]	303	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:41:19,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:41:20,583	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:41:21,727	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:41:21,728	[INFO]	306	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:41:21,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:41:25,333	[INFO]	307	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:41:25,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,52 ****
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:41:26,413	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:41:29,825	[INFO]	309	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:41:29,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:41:30,864	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:41:34,372	[INFO]	311	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:41:34,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:41:35,365	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:41:36,410	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:41:37,532	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:41:40,890	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:41:40,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 14:41:40,892	[INFO]	316	SUCCESS	+2.0	
2020-12-31 14:41:40,892	[DEBUG]	
2020-12-31 14:41:41,987	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:41:43,003	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:41:46,298	[INFO]	319	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:41:46,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 14:41:46,300	[INFO]	320	SUCCESS	+2.0	
2020-12-31 14:41:46,300	[DEBUG]	
2020-12-31 14:41:47,318	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:41:50,684	[INFO]	322	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:41:51,708	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:41:52,677	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:41:53,687	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:41:54,713	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:41:55,765	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:41:56,777	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:41:57,794	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:41:58,834	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-31 14:41:59,848	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:42:00,872	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:42:01,933	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:42:05,266	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:05,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:42:05,268	[INFO]	335	SUCCESS	+2.0	
2020-12-31 14:42:05,269	[DEBUG]	
2020-12-31 14:42:05,270	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:42:05,271	[DEBUG]	
2020-12-31 14:42:06,280	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:42:07,299	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:42:08,384	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:42:09,422	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:42:10,422	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:42:10,424	[INFO]	342	SUCCESS	+2.0	
2020-12-31 14:42:10,424	[DEBUG]	
2020-12-31 14:42:11,463	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:42:12,497	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:42:15,927	[INFO]	345	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:42:16,930	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:42:20,251	[INFO]	347	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:42:20,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 14:42:20,253	[INFO]	348	SUCCESS	+2.0	
2020-12-31 14:42:20,253	[DEBUG]	
2020-12-31 14:42:21,267	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:42:22,298	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:42:23,330	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:24,332	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:42:25,387	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:42:25,389	[INFO]	354	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:42:25,389	[DEBUG]	
2020-12-31 14:42:25,390	[INFO]	355	SUCCESS	+2.0	
2020-12-31 14:42:25,390	[DEBUG]	
2020-12-31 14:42:28,766	[INFO]	356	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:42:29,755	[INFO]	357	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 14:42:31,000	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:42:32,074	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:42:33,117	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:42:34,139	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:42:35,215	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:42:36,274	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:42:37,318	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:42:41,184	[INFO]	365	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:42:42,217	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:42:43,226	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:44,285	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:42:44,287	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:42:44,287	[DEBUG]	
2020-12-31 14:42:44,288	[INFO]	370	SUCCESS	+2.0	
2020-12-31 14:42:44,288	[DEBUG]	
2020-12-31 14:42:47,644	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:47,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:48,663	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:42:48,665	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:42:48,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:48,666	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:42:48,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:48,668	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:42:48,669	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:49,724	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:42:50,740	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:42:51,768	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:42:52,782	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:42:52,783	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:52,784	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:53,807	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:42:54,846	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:42:55,871	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:42:55,872	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:42:55,873	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:56,918	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:42:56,920	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:42:56,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:57,926	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:42:58,939	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:42:58,941	[INFO]	389	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:42:58,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:59,956	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:42:59,958	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:42:59,959	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:59,960	[INFO]	392	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:42:59,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:42:59,962	[INFO]	393	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:42:59,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:43:01,038	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:43:02,088	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:43:02,089	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:43:02,090	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:43:03,117	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:43:04,124	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:43:04,127	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:43:04,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:43:05,156	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:43:05,158	[INFO]	401	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:43:05,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:43:06,231	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:43:07,269	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:43:07,270	[INFO]	404	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:43:07,271	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:43:07,272	[INFO]	405	SUCCESS	+2.0	
2020-12-31 14:43:07,272	[DEBUG]	
2020-12-31 14:43:10,687	[INFO]	406	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:43:10,688	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:43:14,026	[INFO]	407	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:43:14,027	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 14:43:14,028	[INFO]	408	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:43:14,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:43:15,068	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:43:18,497	[INFO]	410	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:43:18,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,40 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:43:18,499	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:43:18,499	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:43:18,500	[INFO]	412	SUCCESS	+2.0	
2020-12-31 14:43:18,500	[DEBUG]	
2020-12-31 14:43:19,533	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:43:20,505	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:43:21,512	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:43:22,448	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:43:23,481	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:43:24,528	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:43:27,895	[INFO]	419	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:43:27,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 14:43:27,897	[INFO]	420	SUCCESS	+2.0	
2020-12-31 14:43:27,898	[DEBUG]	
2020-12-31 14:43:28,940	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:43:29,960	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:43:33,661	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:43:33,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:43:33,666	[INFO]	424	SUCCESS	+2.0	
2020-12-31 14:43:33,667	[DEBUG]	
2020-12-31 14:43:37,362	[INFO]	425	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-31 14:43:38,398	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:43:41,810	[INFO]	427	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:43:41,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 14:43:41,812	[INFO]	428	SUCCESS	+2.0	
2020-12-31 14:43:41,812	[DEBUG]	
2020-12-31 14:43:42,829	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:43:46,267	[INFO]	430	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:43:47,302	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:43:48,326	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:43:51,715	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:43:51,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:43:51,717	[INFO]	434	SUCCESS	+2.0	
2020-12-31 14:43:51,718	[DEBUG]	
2020-12-31 14:43:52,712	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:43:53,721	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:43:54,739	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:43:55,770	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:43:56,777	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:43:57,793	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:43:58,869	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:43:59,902	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:44:03,377	[INFO]	443	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:44:04,323	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:44:05,363	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:44:06,389	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:44:07,396	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:44:08,422	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:44:09,444	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:44:10,474	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:44:11,535	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:44:14,923	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:44:14,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:14,926	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:44:14,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:14,928	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:44:14,928	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:14,929	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:44:14,930	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:14,931	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:44:14,932	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:14,933	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:44:14,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 14:44:18,376	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:44:18,377	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 14:44:19,415	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:44:20,488	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:44:21,610	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:44:22,775	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:44:23,874	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:44:25,050	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:44:25,052	[INFO]	465	SUCCESS	+2.0	
2020-12-31 14:44:25,052	[DEBUG]	
2020-12-31 14:44:26,087	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:44:27,113	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:44:27,115	[INFO]	468	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:44:27,115	[DEBUG]	
2020-12-31 14:44:30,527	[INFO]	469	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:44:30,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:44:30,529	[INFO]	470	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:44:30,529	[DEBUG]	
2020-12-31 14:44:31,530	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:44:31,531	[INFO]	472	SUCCESS	+2.0	
2020-12-31 14:44:31,532	[DEBUG]	
2020-12-31 14:44:32,612	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:44:35,938	[INFO]	474	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:44:35,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:44:36,947	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:44:36,950	[INFO]	476	SUCCESS	+2.0	
2020-12-31 14:44:36,951	[DEBUG]	
2020-12-31 14:44:37,997	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:44:39,077	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:44:40,092	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:44:41,120	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:44:42,186	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:44:45,642	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:44:45,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:44:49,058	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:44:49,059	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 43,48 ****
--- 45,51 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:44:52,369	[INFO]	484	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:44:52,370	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:44:53,392	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:44:53,393	[INFO]	486	SUCCESS	+2.0	
2020-12-31 14:44:53,393	[DEBUG]	
2020-12-31 14:44:56,758	[INFO]	487	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:44:56,759	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:44:56,759	[INFO]	488	SUCCESS	+2.0	
2020-12-31 14:44:56,760	[DEBUG]	
2020-12-31 14:45:00,167	[INFO]	489	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:45:01,178	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:45:02,180	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:45:03,199	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:45:04,221	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:45:05,248	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:45:06,299	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:45:09,657	[INFO]	496	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:45:09,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:45:09,659	[INFO]	497	SUCCESS	+2.0	
2020-12-31 14:45:09,659	[DEBUG]	
2020-12-31 14:45:10,680	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:45:11,725	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:45:12,748	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:45:12,749	[INFO]	==== END ====
2020-12-31 14:45:12,749	[INFO]	Reason: step budget
2020-12-31 14:45:12,749	[INFO]	
2020-12-31 14:45:12,750	[INFO]	========== EPOCH 8 ==========
2020-12-31 14:45:12,750	[INFO]	==== WARMUP ====
2020-12-31 14:45:16,106	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:45:16,107	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:45:19,518	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:45:19,518	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:45:22,883	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:45:22,883	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:45:26,363	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 14:45:26,363	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:45:26,363	[INFO]	==== START ====
2020-12-31 14:45:29,964	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:45:29,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 14:45:31,100	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:45:31,103	[INFO]	3	SUCCESS	+2.0	
2020-12-31 14:45:31,104	[DEBUG]	
2020-12-31 14:45:32,175	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:45:36,025	[INFO]	5	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:45:36,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:36,027	[INFO]	6	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:45:36,028	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:40,336	[INFO]	7	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:45:41,414	[INFO]	8	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:45:42,535	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:45:43,622	[INFO]	10	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:45:44,777	[INFO]	11	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:45:45,874	[INFO]	12	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:45:49,282	[INFO]	13	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:45:49,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:49,284	[INFO]	14	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:45:49,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:49,286	[INFO]	15	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:45:49,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:49,288	[INFO]	16	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:45:49,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:49,289	[INFO]	17	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:45:49,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:52,671	[INFO]	18	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:45:52,672	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 49,54 ****
--- 47,53 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:45:53,750	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:45:54,763	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:45:55,750	[INFO]	21	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:45:55,751	[INFO]	22	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:45:55,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:45:55,753	[INFO]	23	SUCCESS	+2.0	
2020-12-31 14:45:55,753	[DEBUG]	
2020-12-31 14:45:59,130	[INFO]	24	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:46:00,173	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:46:01,202	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:46:02,242	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:46:05,659	[INFO]	28	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:46:05,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:46:05,661	[INFO]	29	SUCCESS	+2.0	
2020-12-31 14:46:05,662	[DEBUG]	
2020-12-31 14:46:06,733	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:46:07,810	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:46:08,913	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:46:10,012	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:46:13,567	[INFO]	34	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:46:14,632	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:46:15,620	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:46:16,710	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:46:17,715	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:46:18,748	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:46:22,147	[INFO]	40	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:46:22,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:46:23,184	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:46:23,185	[INFO]	42	SUCCESS	+2.0	
2020-12-31 14:46:23,186	[DEBUG]	
2020-12-31 14:46:24,200	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:46:25,268	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:46:26,306	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:46:29,704	[INFO]	46	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:46:30,755	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:46:31,815	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:46:35,254	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:46:35,255	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:46:35,255	[INFO]	50	SUCCESS	+2.0	
2020-12-31 14:46:35,256	[DEBUG]	
2020-12-31 14:46:36,250	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:46:37,266	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:46:38,275	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:46:39,312	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:46:40,358	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:46:41,395	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:46:42,470	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:46:43,499	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:46:46,990	[INFO]	59	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:46:47,951	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:46:51,349	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:46:51,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:46:51,351	[INFO]	62	SUCCESS	+2.0	
2020-12-31 14:46:51,351	[DEBUG]	
2020-12-31 14:46:52,410	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:46:53,494	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:46:54,625	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:46:55,721	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:46:56,820	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:47:00,357	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:47:00,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 14:47:01,342	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:47:01,343	[INFO]	70	SUCCESS	+2.0	
2020-12-31 14:47:01,343	[DEBUG]	
2020-12-31 14:47:04,705	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:47:04,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:47:05,644	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:47:05,645	[INFO]	73	SUCCESS	+2.0	
2020-12-31 14:47:05,645	[DEBUG]	
2020-12-31 14:47:06,689	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:47:07,705	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:47:11,213	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:47:11,214	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:47:12,162	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:47:13,177	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:47:13,178	[INFO]	79	SUCCESS	+2.0	
2020-12-31 14:47:13,179	[DEBUG]	
2020-12-31 14:47:14,203	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:47:15,221	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:47:16,249	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:47:17,285	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:47:18,338	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:47:18,340	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:47:18,340	[DEBUG]	
2020-12-31 14:47:21,723	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:47:21,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 14:47:21,725	[INFO]	87	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:47:21,726	[DEBUG]	
2020-12-31 14:47:21,727	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:47:21,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 14:47:21,728	[INFO]	89	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:47:21,728	[DEBUG]	
2020-12-31 14:47:22,735	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:47:23,761	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:47:24,825	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:47:24,826	[INFO]	93	SUCCESS	+2.0	
2020-12-31 14:47:24,827	[DEBUG]	
2020-12-31 14:47:28,255	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:47:28,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:47:28,257	[INFO]	95	SUCCESS	+2.0	
2020-12-31 14:47:28,257	[DEBUG]	
2020-12-31 14:47:29,260	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:47:30,290	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:47:31,314	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:47:32,326	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:47:35,753	[INFO]	100	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:47:35,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 14:47:35,755	[INFO]	101	SUCCESS	+2.0	
2020-12-31 14:47:35,755	[DEBUG]	
2020-12-31 14:47:36,777	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:47:37,841	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:47:38,875	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:47:39,929	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:47:39,930	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:47:40,950	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:47:42,012	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:47:45,396	[INFO]	109	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:47:46,420	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:47:47,451	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:47:47,453	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:47:48,456	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:47:51,824	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:47:51,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:47:52,813	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:47:52,815	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:47:52,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:47:56,671	[INFO]	117	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:47:56,672	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 14:47:57,687	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:47:57,688	[INFO]	119	SUCCESS	+2.0	
2020-12-31 14:47:57,689	[DEBUG]	
2020-12-31 14:47:58,704	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:48:02,591	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:48:02,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 14:48:02,593	[INFO]	122	SUCCESS	+2.0	
2020-12-31 14:48:02,594	[DEBUG]	
2020-12-31 14:48:03,612	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:48:04,620	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:48:05,656	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:48:06,679	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:48:07,716	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:48:11,122	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:48:11,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:48:14,522	[INFO]	129	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:48:17,909	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:48:17,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 49,54 ****
--- 52,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:48:17,911	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:48:17,912	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 14:48:18,931	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:48:18,932	[INFO]	133	SUCCESS	+2.0	
2020-12-31 14:48:18,933	[DEBUG]	
2020-12-31 14:48:19,997	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:48:21,028	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:48:24,343	[INFO]	136	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:48:24,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:48:24,345	[INFO]	137	SUCCESS	+2.0	
2020-12-31 14:48:24,345	[DEBUG]	
2020-12-31 14:48:25,403	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:48:26,411	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:48:27,441	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:48:30,909	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:48:30,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:48:31,922	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:48:31,924	[INFO]	143	SUCCESS	+2.0	
2020-12-31 14:48:31,924	[DEBUG]	
2020-12-31 14:48:32,947	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:48:36,343	[INFO]	145	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:48:37,300	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:48:40,716	[INFO]	147	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:48:40,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:48:40,718	[INFO]	148	SUCCESS	+2.0	
2020-12-31 14:48:40,718	[DEBUG]	
2020-12-31 14:48:41,789	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:48:42,752	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:48:43,810	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:48:44,831	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:48:45,853	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:48:46,821	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:48:46,823	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:48:50,395	[INFO]	156	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:48:50,396	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:48:50,397	[INFO]	157	SUCCESS	+2.0	
2020-12-31 14:48:50,397	[DEBUG]	
2020-12-31 14:48:51,452	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:48:52,492	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:48:55,856	[INFO]	160	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:48:55,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 14:48:56,877	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:48:57,878	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:48:58,881	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:48:59,922	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:48:59,923	[INFO]	165	SUCCESS	+2.0	
2020-12-31 14:48:59,923	[DEBUG]	
2020-12-31 14:49:00,984	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:49:16,045	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:49:16,969	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:49:17,888	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:49:18,811	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:49:19,711	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:49:20,686	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:49:21,766	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:49:21,767	[INFO]	174	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:49:21,768	[DEBUG]	
2020-12-31 14:49:21,768	[INFO]	175	SUCCESS	+2.0	
2020-12-31 14:49:21,769	[DEBUG]	
2020-12-31 14:49:22,814	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:49:23,835	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:49:24,913	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:49:25,930	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:49:26,961	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:49:28,024	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:49:43,122	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:49:44,012	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:49:44,963	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:49:45,859	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:49:46,741	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:49:47,629	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:49:48,668	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:49:49,690	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:49:50,731	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:49:51,769	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:49:52,821	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:49:53,826	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:49:54,869	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:49:55,948	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:49:59,370	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:49:59,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:50:02,726	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:50:02,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:50:06,113	[INFO]	198	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:50:06,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-31 14:50:07,079	[INFO]	199	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:50:08,045	[INFO]	200	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:50:08,046	[INFO]	201	SUCCESS	+2.0	
2020-12-31 14:50:08,047	[DEBUG]	
2020-12-31 14:50:11,380	[INFO]	202	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:50:11,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:50:11,382	[INFO]	203	SUCCESS	+2.0	
2020-12-31 14:50:11,383	[DEBUG]	
2020-12-31 14:50:12,378	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:50:13,499	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:50:14,559	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:50:15,564	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:50:16,622	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:50:17,662	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:50:21,172	[INFO]	210	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:50:22,454	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:50:23,480	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:50:24,536	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:50:25,596	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:50:26,656	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:50:27,665	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:50:31,114	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:50:31,115	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:50:31,116	[INFO]	218	SUCCESS	+2.0	
2020-12-31 14:50:31,116	[DEBUG]	
2020-12-31 14:50:32,172	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:50:33,194	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:50:34,235	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:50:35,419	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:50:36,707	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:50:37,772	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:50:38,763	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:50:39,809	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:50:40,832	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:50:41,886	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:50:42,904	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:50:43,974	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:50:45,012	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:50:48,414	[INFO]	232	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:50:49,411	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:50:50,422	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:51:05,497	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:51:06,376	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:51:07,289	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:51:08,266	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:51:08,267	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:51:09,289	[INFO]	240	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:51:10,337	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:51:13,773	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:51:13,774	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:51:13,775	[INFO]	243	SUCCESS	+2.0	
2020-12-31 14:51:13,775	[DEBUG]	
2020-12-31 14:51:14,801	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:51:15,831	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:51:16,873	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:51:17,898	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:51:18,906	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:51:19,955	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:51:23,375	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:51:23,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 14:51:23,377	[INFO]	251	SUCCESS	+2.0	
2020-12-31 14:51:23,378	[DEBUG]	
2020-12-31 14:51:24,372	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:51:27,851	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:51:27,852	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:51:28,930	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:51:32,354	[INFO]	255	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:51:32,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:51:33,395	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:51:34,396	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:51:37,762	[INFO]	258	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:51:37,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 51,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:51:38,765	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:51:38,766	[INFO]	260	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:51:38,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:51:38,768	[INFO]	261	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:51:38,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 14:51:39,722	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:51:40,755	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:51:40,756	[INFO]	264	SUCCESS	+2.0	
2020-12-31 14:51:40,756	[DEBUG]	
2020-12-31 14:51:41,829	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:51:42,869	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:51:43,895	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:51:44,944	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:51:45,977	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:51:47,009	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:51:47,012	[INFO]	271	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:51:47,013	[DEBUG]	
2020-12-31 14:51:47,015	[INFO]	272	SUCCESS	+2.0	
2020-12-31 14:51:47,016	[DEBUG]	
2020-12-31 14:51:47,974	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:51:49,000	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:51:49,994	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:51:51,021	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:51:54,403	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:51:54,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:51:55,429	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:51:56,439	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:51:56,441	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:51:56,442	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:51:59,841	[INFO]	281	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:51:59,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-31 14:51:59,843	[INFO]	282	SUCCESS	+2.0	
2020-12-31 14:51:59,844	[DEBUG]	
2020-12-31 14:52:00,865	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:52:01,897	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:52:02,950	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:52:06,279	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:52:06,280	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:52:07,276	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:52:10,735	[INFO]	288	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 14:52:11,706	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:52:11,707	[INFO]	290	SUCCESS	+2.0	
2020-12-31 14:52:11,708	[DEBUG]	
2020-12-31 14:52:12,773	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:52:13,836	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:52:14,889	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:52:15,925	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:52:16,961	[INFO]	295	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:52:17,978	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:52:19,025	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:52:20,097	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:52:23,512	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:52:23,513	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:52:24,530	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:52:25,624	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:52:25,626	[INFO]	302	SUCCESS	+2.0	
2020-12-31 14:52:25,626	[DEBUG]	
2020-12-31 14:52:26,674	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:52:27,696	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:52:28,722	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:52:29,753	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:52:44,839	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:52:47,798	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:52:47,799	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 14:52:47,800	[INFO]	309	SUCCESS	+2.0	
2020-12-31 14:52:47,800	[DEBUG]	
2020-12-31 14:52:48,801	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 14:52:52,164	[INFO]	311	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:52:52,166	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:52:52,167	[INFO]	312	SUCCESS	+2.0	
2020-12-31 14:52:52,167	[DEBUG]	
2020-12-31 14:52:53,184	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:52:54,215	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:52:55,242	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:52:58,663	[INFO]	316	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:52:58,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 14:53:02,128	[INFO]	317	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:53:02,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 39,45 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:53:05,447	[INFO]	318	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:53:05,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:53:08,836	[INFO]	319	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:53:08,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 27,39 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:53:12,152	[INFO]	320	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:53:12,153	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:53:13,157	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:53:14,427	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:53:15,523	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:53:18,940	[INFO]	324	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:53:18,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:53:18,943	[INFO]	325	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:53:18,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 14:53:18,944	[INFO]	326	SUCCESS	+2.0	
2020-12-31 14:53:18,944	[DEBUG]	
2020-12-31 14:53:19,987	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:53:23,422	[INFO]	328	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:53:23,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:53:24,443	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:53:24,444	[INFO]	330	SUCCESS	+2.0	
2020-12-31 14:53:24,444	[DEBUG]	
2020-12-31 14:53:25,500	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:53:25,502	[INFO]	332	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:53:25,503	[DEBUG]	
2020-12-31 14:53:25,504	[INFO]	333	SUCCESS	+2.0	
2020-12-31 14:53:25,505	[DEBUG]	
2020-12-31 14:53:26,451	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:53:27,475	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:53:28,540	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:53:29,644	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:53:30,689	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:53:30,690	[INFO]	339	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:53:30,691	[DEBUG]	
2020-12-31 14:53:30,691	[INFO]	340	SUCCESS	+2.0	
2020-12-31 14:53:30,692	[DEBUG]	
2020-12-31 14:53:31,729	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:53:32,759	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:53:33,786	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:53:34,809	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:53:35,836	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:53:39,233	[INFO]	346	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:53:39,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 14:53:39,235	[INFO]	347	SUCCESS	+2.0	
2020-12-31 14:53:39,236	[DEBUG]	
2020-12-31 14:53:40,228	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:53:41,401	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:53:42,822	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:53:44,350	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:53:45,811	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:53:47,210	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:53:48,537	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:53:49,625	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:53:50,696	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:53:51,789	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:53:55,366	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:53:55,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 14:53:56,511	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:53:56,512	[INFO]	360	SUCCESS	+2.0	
2020-12-31 14:53:56,512	[DEBUG]	
2020-12-31 14:53:57,680	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:54:01,114	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:54:01,115	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:54:02,149	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:54:02,150	[INFO]	364	SUCCESS	+2.0	
2020-12-31 14:54:02,150	[DEBUG]	
2020-12-31 14:54:03,154	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:54:04,199	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:54:05,207	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:54:06,264	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:54:07,295	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:54:08,363	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:54:11,876	[INFO]	371	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:54:11,877	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 14:54:11,877	[INFO]	372	SUCCESS	+2.0	
2020-12-31 14:54:11,878	[DEBUG]	
2020-12-31 14:54:12,876	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:54:16,470	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:54:16,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:54:16,471	[INFO]	375	SUCCESS	+2.0	
2020-12-31 14:54:16,472	[DEBUG]	
2020-12-31 14:54:17,432	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:54:18,472	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:54:21,807	[INFO]	378	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:54:25,227	[INFO]	379	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:54:25,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:54:26,183	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:54:26,184	[INFO]	381	SUCCESS	+2.0	
2020-12-31 14:54:26,184	[DEBUG]	
2020-12-31 14:54:27,344	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:54:28,470	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:54:29,508	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:54:32,866	[INFO]	385	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:54:33,868	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:54:34,938	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:54:35,933	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:54:36,985	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:54:38,025	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:54:41,493	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:54:41,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-31 14:54:41,495	[INFO]	392	SUCCESS	+2.0	
2020-12-31 14:54:41,495	[DEBUG]	
2020-12-31 14:54:42,553	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:54:43,573	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:54:44,587	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:54:45,614	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:54:45,616	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:54:46,648	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:54:49,971	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:54:49,972	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:54:53,292	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 14:54:53,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:54:54,348	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:54:54,349	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:54:54,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:54:55,385	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:54:55,386	[INFO]	404	SUCCESS	+2.0	
2020-12-31 14:54:55,387	[DEBUG]	
2020-12-31 14:54:56,409	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:54:57,430	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:54:58,504	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:55:01,982	[INFO]	408	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:55:01,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:55:02,968	[INFO]	409	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:55:04,042	[INFO]	410	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:55:04,043	[INFO]	411	SUCCESS	+2.0	
2020-12-31 14:55:04,044	[DEBUG]	
2020-12-31 14:55:07,486	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:55:07,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 14:55:07,489	[INFO]	413	SUCCESS	+2.0	
2020-12-31 14:55:07,489	[DEBUG]	
2020-12-31 14:55:10,893	[INFO]	414	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:55:11,911	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:55:12,918	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:55:13,996	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:55:15,002	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:55:16,054	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:55:17,130	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:55:18,157	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:55:33,217	[INFO]	422	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:55:36,249	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:55:36,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 14:55:39,509	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:55:39,511	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,32 ****
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 14:55:43,020	[INFO]	425	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:55:43,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 14:55:44,045	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:55:45,077	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:55:45,078	[INFO]	428	SUCCESS	+2.0	
2020-12-31 14:55:45,078	[DEBUG]	
2020-12-31 14:55:45,079	[INFO]	429	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:55:46,110	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:55:47,147	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:55:48,171	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:55:49,219	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:55:50,279	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:55:51,319	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:55:54,741	[INFO]	436	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:55:54,742	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 14:55:54,742	[INFO]	437	SUCCESS	+2.0	
2020-12-31 14:55:54,743	[DEBUG]	
2020-12-31 14:55:55,792	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:55:56,819	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:55:57,854	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:56:01,246	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:56:01,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 14:56:02,279	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:56:02,280	[INFO]	443	SUCCESS	+2.0	
2020-12-31 14:56:02,281	[DEBUG]	
2020-12-31 14:56:03,308	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:56:04,296	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:56:05,353	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:56:06,385	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:56:06,387	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:56:07,388	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:56:08,410	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:56:09,436	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:56:10,456	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:56:11,500	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:56:12,537	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:56:13,563	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:56:14,603	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:56:15,638	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:56:19,038	[INFO]	458	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 14:56:19,039	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:56:19,040	[INFO]	459	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:56:19,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:56:20,075	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:56:20,076	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:56:20,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:56:23,473	[INFO]	462	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:56:23,474	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,38 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 14:56:23,475	[INFO]	463	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:56:23,476	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 14:56:24,458	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:56:24,459	[INFO]	465	SUCCESS	+2.0	
2020-12-31 14:56:24,460	[DEBUG]	
2020-12-31 14:56:25,511	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:56:26,548	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:56:27,547	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:56:28,556	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:56:29,590	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:56:30,668	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 14:56:31,704	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:56:35,040	[INFO]	473	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:56:36,087	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 14:56:39,528	[INFO]	475	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:56:40,538	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:56:41,577	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:56:42,659	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 14:56:43,704	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:56:43,705	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:56:43,706	[DEBUG]	
2020-12-31 14:56:44,732	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:56:45,749	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:56:45,750	[INFO]	483	SUCCESS	+2.0	
2020-12-31 14:56:45,750	[DEBUG]	
2020-12-31 14:56:46,768	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:56:47,797	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:56:48,787	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:56:52,152	[INFO]	487	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:56:53,174	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:56:54,204	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:56:55,226	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:56:58,639	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:56:58,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:56:58,641	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:56:58,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:56:59,664	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:56:59,666	[INFO]	494	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:56:59,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:56:59,668	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:56:59,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:57:03,033	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:57:03,034	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 39,44 ****
--- 41,48 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:57:03,035	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:57:03,036	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 39,44 ****
--- 41,48 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:57:03,038	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:57:03,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 39,44 ****
--- 41,48 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:57:03,039	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:57:03,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:57:03,041	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:57:03,042	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:57:03,042	[INFO]	==== END ====
2020-12-31 14:57:03,042	[INFO]	Reason: step budget
2020-12-31 14:57:03,042	[INFO]	
2020-12-31 14:57:03,043	[INFO]	========== EPOCH 9 ==========
2020-12-31 14:57:03,043	[INFO]	==== WARMUP ====
2020-12-31 14:57:06,426	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:57:06,427	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:57:09,789	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:57:09,790	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:57:13,162	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 14:57:13,162	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:57:17,023	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 14:57:17,023	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 14:57:17,023	[INFO]	==== START ====
2020-12-31 14:57:18,033	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:57:19,051	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:57:20,093	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:57:21,177	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:57:22,190	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:57:23,230	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:57:24,269	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:57:25,299	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:57:28,642	[INFO]	9	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 14:57:28,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 14:57:29,651	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 14:57:29,652	[INFO]	11	SUCCESS	+2.0	
2020-12-31 14:57:29,652	[DEBUG]	
2020-12-31 14:57:30,696	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:57:31,726	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 14:57:32,747	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 14:57:36,064	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:57:36,066	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 14:57:37,026	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:57:37,027	[INFO]	17	SUCCESS	+2.0	
2020-12-31 14:57:37,027	[DEBUG]	
2020-12-31 14:57:38,061	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:57:39,084	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:57:40,134	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:57:41,220	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:57:44,586	[INFO]	22	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:57:44,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 14:57:45,612	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:57:45,614	[INFO]	24	SUCCESS	+2.0	
2020-12-31 14:57:45,614	[DEBUG]	
2020-12-31 14:57:46,631	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 14:57:46,633	[INFO]	26	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 14:57:46,633	[DEBUG]	
2020-12-31 14:57:46,634	[INFO]	27	SUCCESS	+2.0	
2020-12-31 14:57:46,634	[DEBUG]	
2020-12-31 14:57:47,666	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:57:48,688	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:57:49,765	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:57:50,773	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 14:57:51,804	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 14:57:52,838	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 14:57:53,879	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:57:54,909	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:57:58,303	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 14:57:58,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 14:57:58,305	[INFO]	37	SUCCESS	+2.0	
2020-12-31 14:57:58,305	[DEBUG]	
2020-12-31 14:57:59,297	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:58:00,354	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:58:01,437	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:58:02,466	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:58:05,810	[INFO]	42	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:58:05,810	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 14:58:05,811	[INFO]	43	SUCCESS	+2.0	
2020-12-31 14:58:05,812	[DEBUG]	
2020-12-31 14:58:06,806	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 14:58:07,847	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 14:58:07,848	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:58:07,849	[DEBUG]	
2020-12-31 14:58:07,849	[INFO]	47	SUCCESS	+2.0	
2020-12-31 14:58:07,850	[DEBUG]	
2020-12-31 14:58:08,873	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:58:12,394	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:58:12,395	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:58:12,396	[INFO]	50	SUCCESS	+2.0	
2020-12-31 14:58:12,396	[DEBUG]	
2020-12-31 14:58:13,469	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:58:14,537	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:58:15,595	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:58:16,710	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 14:58:17,869	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:58:19,260	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:58:20,369	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:58:23,812	[INFO]	58	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:58:23,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 14:58:23,814	[INFO]	59	SUCCESS	+2.0	
2020-12-31 14:58:23,814	[DEBUG]	
2020-12-31 14:58:24,921	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 14:58:28,301	[INFO]	61	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 14:58:29,298	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:58:30,327	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 14:58:30,328	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:58:30,328	[DEBUG]	
2020-12-31 14:58:30,329	[INFO]	65	SUCCESS	+2.0	
2020-12-31 14:58:30,329	[DEBUG]	
2020-12-31 14:58:31,363	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:58:32,423	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 14:58:35,834	[INFO]	68	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:58:35,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:58:39,264	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 14:58:39,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 48,53 ****
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:58:40,271	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:58:41,273	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:58:42,392	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 14:58:42,393	[INFO]	73	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 14:58:42,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 14:58:42,394	[INFO]	74	SUCCESS	+2.0	
2020-12-31 14:58:42,395	[DEBUG]	
2020-12-31 14:58:43,425	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 14:58:44,397	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 14:58:45,520	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:58:46,553	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 14:58:49,902	[INFO]	79	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:58:49,903	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 14:58:49,903	[INFO]	80	SUCCESS	+2.0	
2020-12-31 14:58:49,904	[DEBUG]	
2020-12-31 14:58:53,255	[INFO]	81	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 14:58:53,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:58:53,257	[INFO]	82	SUCCESS	+2.0	
2020-12-31 14:58:53,258	[DEBUG]	
2020-12-31 14:58:54,269	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:58:57,705	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:58:57,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 14:59:01,047	[INFO]	85	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 14:59:01,048	[INFO]	86	SUCCESS	+2.0	
2020-12-31 14:59:01,048	[DEBUG]	
2020-12-31 14:59:04,438	[INFO]	87	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 14:59:04,439	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 14:59:05,462	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:59:05,464	[INFO]	89	SUCCESS	+2.0	
2020-12-31 14:59:05,464	[DEBUG]	
2020-12-31 14:59:06,500	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:59:07,509	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 14:59:08,532	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 14:59:09,591	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:59:24,653	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 14:59:25,594	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:59:26,517	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 14:59:27,559	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 14:59:31,106	[INFO]	98	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 14:59:32,135	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 14:59:35,476	[INFO]	100	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 14:59:35,477	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 14:59:35,478	[INFO]	101	SUCCESS	+2.0	
2020-12-31 14:59:35,478	[DEBUG]	
2020-12-31 14:59:36,455	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 14:59:37,465	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:59:38,505	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:59:38,506	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:59:38,506	[DEBUG]	
2020-12-31 14:59:39,564	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 14:59:40,617	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 14:59:41,630	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 14:59:41,631	[INFO]	109	SUCCESS	+2.0	
2020-12-31 14:59:41,632	[DEBUG]	
2020-12-31 14:59:42,697	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 14:59:43,729	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:59:44,727	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:59:45,767	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 14:59:46,786	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 14:59:47,843	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 14:59:48,860	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 14:59:49,892	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 14:59:53,226	[INFO]	118	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 14:59:53,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 14:59:53,228	[INFO]	119	SUCCESS	+2.0	
2020-12-31 14:59:53,229	[DEBUG]	
2020-12-31 14:59:56,628	[INFO]	120	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 14:59:56,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 14:59:57,639	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:00:01,009	[INFO]	122	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:00:01,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             visitedNodes.add(node);
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:00:01,012	[INFO]	123	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:00:01,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:00:01,013	[INFO]	124	SUCCESS	+2.0	
2020-12-31 15:00:01,013	[DEBUG]	
2020-12-31 15:00:02,004	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:00:03,079	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:00:04,149	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:00:05,144	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:00:06,167	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:00:07,191	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:00:10,519	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:00:10,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:00:11,548	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:00:11,549	[INFO]	133	SUCCESS	+2.0	
2020-12-31 15:00:11,549	[DEBUG]	
2020-12-31 15:00:12,573	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:00:16,018	[INFO]	135	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:00:16,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:00:16,020	[INFO]	136	SUCCESS	+2.0	
2020-12-31 15:00:16,020	[DEBUG]	
2020-12-31 15:00:17,046	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:00:18,105	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:00:19,147	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:00:20,163	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:00:21,243	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:00:36,331	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:00:37,554	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:00:38,708	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:00:42,188	[INFO]	145	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:00:42,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-31 15:00:43,207	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:00:43,208	[INFO]	147	SUCCESS	+2.0	
2020-12-31 15:00:43,208	[DEBUG]	
2020-12-31 15:00:44,276	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:00:45,320	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:00:46,356	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:00:47,378	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:00:48,387	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:00:51,836	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:00:51,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 15:00:52,886	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:00:53,995	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:00:53,996	[INFO]	156	SUCCESS	+2.0	
2020-12-31 15:00:53,997	[DEBUG]	
2020-12-31 15:00:55,087	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:00:56,158	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:00:57,228	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:00:58,322	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:00:59,397	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:01:02,909	[INFO]	162	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:01:02,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:01:03,883	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:01:03,884	[INFO]	164	SUCCESS	+2.0	
2020-12-31 15:01:03,885	[DEBUG]	
2020-12-31 15:01:04,948	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 15:01:06,019	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:01:07,104	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:01:08,161	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:01:09,240	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:01:10,306	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:01:11,390	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:01:12,391	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:01:13,459	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:01:14,559	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:01:17,922	[INFO]	175	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:01:17,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:01:18,925	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:01:18,927	[INFO]	177	SUCCESS	+2.0	
2020-12-31 15:01:18,927	[DEBUG]	
2020-12-31 15:01:19,936	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:01:23,315	[INFO]	179	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:01:23,317	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:01:23,319	[INFO]	180	SUCCESS	+2.0	
2020-12-31 15:01:23,320	[DEBUG]	
2020-12-31 15:01:26,755	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:01:26,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-31 15:01:30,167	[INFO]	182	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:01:30,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,45 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:01:30,179	[INFO]	183	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:01:30,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-31 15:01:31,193	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:01:31,194	[INFO]	185	SUCCESS	+2.0	
2020-12-31 15:01:31,194	[DEBUG]	
2020-12-31 15:01:34,649	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:01:34,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:01:34,653	[INFO]	187	SUCCESS	+2.0	
2020-12-31 15:01:34,654	[DEBUG]	
2020-12-31 15:01:38,047	[INFO]	188	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:01:38,048	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:01:39,063	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:01:39,064	[INFO]	190	SUCCESS	+2.0	
2020-12-31 15:01:39,064	[DEBUG]	
2020-12-31 15:01:42,518	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:01:42,519	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:01:42,520	[INFO]	192	SUCCESS	+2.0	
2020-12-31 15:01:42,520	[DEBUG]	
2020-12-31 15:01:43,544	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:01:44,578	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:01:45,597	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:01:46,602	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:01:47,630	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:01:51,024	[INFO]	198	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:01:52,031	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:01:53,049	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:01:54,143	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:01:55,186	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:01:55,190	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:01:55,191	[DEBUG]	
2020-12-31 15:01:55,193	[INFO]	204	SUCCESS	+2.0	
2020-12-31 15:01:55,194	[DEBUG]	
2020-12-31 15:01:56,228	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:01:57,246	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:01:58,287	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:01:59,319	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:02:00,355	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:02:01,367	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:02:02,423	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:02:03,469	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:02:03,470	[INFO]	213	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:02:03,471	[DEBUG]	
2020-12-31 15:02:03,471	[INFO]	214	SUCCESS	+2.0	
2020-12-31 15:02:03,472	[DEBUG]	
2020-12-31 15:02:06,834	[INFO]	215	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:02:06,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:02:06,836	[INFO]	216	SUCCESS	+2.0	
2020-12-31 15:02:06,836	[DEBUG]	
2020-12-31 15:02:10,202	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:02:10,204	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:02:11,224	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:02:14,605	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:02:14,606	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 43,48 ****
--- 41,47 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:02:15,608	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:02:19,075	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:02:19,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:02:20,079	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:02:21,149	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:02:22,175	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:02:22,177	[INFO]	225	SUCCESS	+2.0	
2020-12-31 15:02:22,177	[DEBUG]	
2020-12-31 15:02:23,204	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:02:24,266	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:02:25,288	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:02:26,317	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:02:27,397	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:02:28,426	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:02:29,477	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:02:32,894	[INFO]	233	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:02:32,895	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 15:02:32,896	[INFO]	234	SUCCESS	+2.0	
2020-12-31 15:02:32,896	[DEBUG]	
2020-12-31 15:02:33,907	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:02:34,917	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:02:38,305	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:02:38,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:02:39,358	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:02:39,359	[INFO]	239	SUCCESS	+2.0	
2020-12-31 15:02:39,359	[DEBUG]	
2020-12-31 15:02:40,369	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:02:40,371	[INFO]	241	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:02:40,371	[DEBUG]	
2020-12-31 15:02:40,372	[INFO]	242	SUCCESS	+2.0	
2020-12-31 15:02:40,372	[DEBUG]	
2020-12-31 15:02:41,397	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:02:44,741	[INFO]	244	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:02:44,742	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 15:02:44,743	[INFO]	245	SUCCESS	+2.0	
2020-12-31 15:02:44,743	[DEBUG]	
2020-12-31 15:02:45,772	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:02:49,111	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:02:49,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 15:02:49,116	[INFO]	248	SUCCESS	+2.0	
2020-12-31 15:02:49,117	[DEBUG]	
2020-12-31 15:02:50,156	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:02:51,190	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:02:54,575	[INFO]	251	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:02:55,600	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:02:56,617	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:02:57,666	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:03:01,026	[INFO]	255	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:03:01,961	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:03:02,972	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:03:03,993	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:03:05,016	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:03:06,035	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:03:07,065	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:03:10,510	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:03:10,511	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:03:14,118	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:03:14,120	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  return distance;
              }
              visitedNodes.add(node);
+             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 33,38 ****
--- 34,41 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:03:17,514	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:03:17,517	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:03:18,546	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:03:18,547	[INFO]	266	SUCCESS	+2.0	
2020-12-31 15:03:18,548	[DEBUG]	
2020-12-31 15:03:21,973	[INFO]	267	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:03:21,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:03:22,998	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:03:24,042	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:03:24,045	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:03:24,046	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:03:25,141	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:03:28,655	[INFO]	272	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:03:28,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:03:28,657	[INFO]	273	SUCCESS	+2.0	
2020-12-31 15:03:28,657	[DEBUG]	
2020-12-31 15:03:29,603	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:03:32,995	[INFO]	275	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:03:32,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:03:32,997	[INFO]	276	SUCCESS	+2.0	
2020-12-31 15:03:32,997	[DEBUG]	
2020-12-31 15:03:34,048	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:03:35,108	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:03:36,148	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:03:39,547	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:03:39,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:03:39,549	[INFO]	281	SUCCESS	+2.0	
2020-12-31 15:03:39,549	[DEBUG]	
2020-12-31 15:03:40,575	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:03:44,007	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:03:44,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:03:45,050	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:03:48,419	[INFO]	285	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:03:48,420	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:03:51,756	[INFO]	286	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:03:51,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:03:55,485	[INFO]	287	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:03:55,486	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:03:56,581	[INFO]	288	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:03:57,625	[INFO]	289	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:04:00,993	[INFO]	290	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:04:00,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:04:02,044	[INFO]	291	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:04:02,045	[INFO]	292	SUCCESS	+2.0	
2020-12-31 15:04:02,046	[DEBUG]	
2020-12-31 15:04:03,098	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:04:18,169	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:04:19,058	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:04:22,120	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:04:22,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:04:23,132	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:04:23,133	[INFO]	298	SUCCESS	+2.0	
2020-12-31 15:04:23,133	[DEBUG]	
2020-12-31 15:04:24,161	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:04:25,250	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:04:26,295	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:04:29,685	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:04:29,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:04:29,686	[INFO]	303	SUCCESS	+2.0	
2020-12-31 15:04:29,687	[DEBUG]	
2020-12-31 15:04:33,053	[INFO]	304	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:04:34,116	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:04:35,125	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:04:36,170	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:04:39,543	[INFO]	308	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:04:39,544	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:04:39,545	[INFO]	309	SUCCESS	+2.0	
2020-12-31 15:04:39,546	[DEBUG]	
2020-12-31 15:04:40,589	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:04:41,680	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:04:45,065	[INFO]	312	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:04:45,066	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:04:45,066	[INFO]	313	SUCCESS	+2.0	
2020-12-31 15:04:45,067	[DEBUG]	
2020-12-31 15:04:46,073	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:04:47,088	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:04:50,520	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:04:50,521	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:04:50,522	[INFO]	317	SUCCESS	+2.0	
2020-12-31 15:04:50,522	[DEBUG]	
2020-12-31 15:04:51,515	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:04:52,537	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:04:55,918	[INFO]	320	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:04:55,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:04:55,921	[INFO]	321	SUCCESS	+2.0	
2020-12-31 15:04:55,921	[DEBUG]	
2020-12-31 15:04:56,939	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:04:57,936	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:04:58,964	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:04:59,993	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:05:03,414	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:05:03,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:05:04,390	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:05:04,391	[INFO]	328	SUCCESS	+2.0	
2020-12-31 15:05:04,391	[DEBUG]	
2020-12-31 15:05:05,405	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:05:05,407	[INFO]	330	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:05:05,407	[DEBUG]	
2020-12-31 15:05:06,436	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:05:06,437	[INFO]	332	SUCCESS	+2.0	
2020-12-31 15:05:06,437	[DEBUG]	
2020-12-31 15:05:06,438	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:05:07,474	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:05:08,509	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:05:09,595	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:05:10,546	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:05:11,599	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:05:12,659	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:05:13,666	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:05:14,686	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:05:15,717	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:05:16,719	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:05:17,736	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:05:18,789	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:05:22,185	[INFO]	346	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:05:23,169	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:05:24,191	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:05:25,275	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:05:26,289	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:05:29,698	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:05:29,699	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 15:05:30,723	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:05:34,016	[INFO]	353	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:05:34,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 15:05:37,558	[INFO]	354	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:05:37,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 15:05:40,913	[INFO]	355	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:05:40,915	[INFO]	356	SUCCESS	+2.0	
2020-12-31 15:05:40,915	[DEBUG]	
2020-12-31 15:05:41,935	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:05:42,952	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:05:46,330	[INFO]	359	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:05:46,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 15:05:49,644	[INFO]	360	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:05:49,645	[INFO]	361	SUCCESS	+2.0	
2020-12-31 15:05:49,645	[DEBUG]	
2020-12-31 15:05:49,646	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:05:49,646	[DEBUG]	
2020-12-31 15:05:49,647	[INFO]	363	SUCCESS	+2.0	
2020-12-31 15:05:49,647	[DEBUG]	
2020-12-31 15:05:50,669	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:05:51,706	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:05:52,768	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:05:53,779	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:05:54,815	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:05:55,837	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:05:59,235	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:05:59,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:06:00,236	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:06:01,249	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:06:04,597	[INFO]	373	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 15:06:05,605	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:06:05,606	[INFO]	375	SUCCESS	+2.0	
2020-12-31 15:06:05,607	[DEBUG]	
2020-12-31 15:06:05,607	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:06:05,608	[DEBUG]	
2020-12-31 15:06:06,622	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:06:07,655	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:06:08,700	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:06:09,722	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:06:10,757	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:06:11,805	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:06:11,806	[INFO]	383	SUCCESS	+2.0	
2020-12-31 15:06:11,806	[DEBUG]	
2020-12-31 15:06:12,809	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:06:13,878	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:06:14,919	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:06:18,301	[INFO]	387	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:06:18,301	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 15:06:18,302	[INFO]	388	SUCCESS	+2.0	
2020-12-31 15:06:18,303	[DEBUG]	
2020-12-31 15:06:19,310	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:06:20,357	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:06:21,388	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:06:22,452	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:06:23,515	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:06:23,516	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:06:23,517	[DEBUG]	
2020-12-31 15:06:23,518	[INFO]	395	SUCCESS	+2.0	
2020-12-31 15:06:23,518	[DEBUG]	
2020-12-31 15:06:24,519	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:06:27,909	[INFO]	397	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:06:27,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 15:06:28,941	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:06:28,942	[INFO]	399	SUCCESS	+2.0	
2020-12-31 15:06:28,943	[DEBUG]	
2020-12-31 15:06:28,943	[INFO]	400	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:06:28,944	[DEBUG]	
2020-12-31 15:06:28,944	[INFO]	401	SUCCESS	+2.0	
2020-12-31 15:06:28,945	[DEBUG]	
2020-12-31 15:06:29,958	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:06:30,965	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:06:32,024	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:06:35,390	[INFO]	405	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:06:35,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 15:06:35,392	[INFO]	406	SUCCESS	+2.0	
2020-12-31 15:06:35,392	[DEBUG]	
2020-12-31 15:06:36,349	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:06:39,739	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:06:39,740	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:06:40,771	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:06:41,830	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:06:42,851	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:06:43,890	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:06:44,913	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:06:45,969	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:06:45,972	[INFO]	415	SUCCESS	+2.0	
2020-12-31 15:06:45,973	[DEBUG]	
2020-12-31 15:06:47,308	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:06:48,424	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:06:49,455	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:06:50,468	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:06:51,499	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:06:52,513	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:06:53,526	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:06:54,550	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:06:55,592	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:06:56,567	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:06:57,617	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:06:57,619	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:07:00,887	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:07:00,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:07:01,872	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:07:01,874	[INFO]	430	SUCCESS	+2.0	
2020-12-31 15:07:01,874	[DEBUG]	
2020-12-31 15:07:02,876	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:07:03,858	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:07:07,267	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:07:07,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:07:07,269	[INFO]	434	SUCCESS	+2.0	
2020-12-31 15:07:07,270	[DEBUG]	
2020-12-31 15:07:08,299	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:07:09,366	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:07:10,385	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:07:13,858	[INFO]	438	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:07:13,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:14,858	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:07:15,888	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:07:19,199	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:07:19,200	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:22,587	[INFO]	442	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:07:22,589	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:23,608	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:07:27,050	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:07:27,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,31 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 54,60 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:28,100	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:07:31,512	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:07:31,513	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,31 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 54,60 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:31,515	[INFO]	447	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:07:31,515	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,31 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 54,60 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:32,538	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:07:36,216	[INFO]	449	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:07:36,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,31 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 43,48 ****
--- 45,51 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
***************
*** 52,57 ****
--- 55,61 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:39,692	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:07:39,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 43,48 ****
--- 45,51 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
***************
*** 52,57 ****
--- 55,61 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 15:07:40,675	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:07:41,660	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:07:42,691	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:07:43,742	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:07:47,121	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:07:47,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 43,48 ****
--- 45,51 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:07:50,501	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:07:50,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 15:07:51,507	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:07:52,516	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:07:52,518	[INFO]	459	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:07:52,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 15:07:53,585	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:07:53,587	[INFO]	461	SUCCESS	+2.0	
2020-12-31 15:07:53,587	[DEBUG]	
2020-12-31 15:07:54,621	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:07:55,711	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:07:59,019	[INFO]	464	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:07:59,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:07:59,020	[INFO]	465	SUCCESS	+2.0	
2020-12-31 15:07:59,021	[DEBUG]	
2020-12-31 15:08:00,038	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:08:01,073	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:08:04,452	[INFO]	468	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:08:05,498	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:08:08,865	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:08:08,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 15:08:08,867	[INFO]	471	SUCCESS	+2.0	
2020-12-31 15:08:08,867	[DEBUG]	
2020-12-31 15:08:09,873	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 15:08:10,866	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:08:11,910	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:08:15,283	[INFO]	475	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:08:15,284	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 15:08:15,285	[INFO]	476	SUCCESS	+2.0	
2020-12-31 15:08:15,285	[DEBUG]	
2020-12-31 15:08:18,688	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:08:18,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 15:08:18,689	[INFO]	478	SUCCESS	+2.0	
2020-12-31 15:08:18,690	[DEBUG]	
2020-12-31 15:08:22,113	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:08:22,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:08:23,139	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:08:23,141	[INFO]	481	SUCCESS	+2.0	
2020-12-31 15:08:23,141	[DEBUG]	
2020-12-31 15:08:24,148	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:08:27,509	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:08:27,510	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:08:27,510	[INFO]	484	SUCCESS	+2.0	
2020-12-31 15:08:27,511	[DEBUG]	
2020-12-31 15:08:28,523	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:08:31,854	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:08:31,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:08:31,855	[INFO]	487	SUCCESS	+2.0	
2020-12-31 15:08:31,856	[DEBUG]	
2020-12-31 15:08:31,856	[INFO]	488	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:08:31,857	[DEBUG]	
2020-12-31 15:08:32,870	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:08:32,871	[INFO]	490	SUCCESS	+2.0	
2020-12-31 15:08:32,872	[DEBUG]	
2020-12-31 15:08:33,924	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:08:33,926	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:08:33,926	[DEBUG]	
2020-12-31 15:08:33,927	[INFO]	493	SUCCESS	+2.0	
2020-12-31 15:08:33,927	[DEBUG]	
2020-12-31 15:08:34,954	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:08:35,980	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:08:37,014	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:08:38,026	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:08:39,091	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:08:40,093	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:08:41,130	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:08:41,130	[INFO]	==== END ====
2020-12-31 15:08:41,130	[INFO]	Reason: step budget
2020-12-31 15:08:41,131	[INFO]	
2020-12-31 15:08:41,131	[INFO]	========== EPOCH 10 ==========
2020-12-31 15:08:41,131	[INFO]	==== WARMUP ====
2020-12-31 15:08:44,552	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:08:44,552	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:08:48,003	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:08:48,003	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:08:51,467	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:08:51,468	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:08:54,874	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 15:08:54,874	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:08:54,874	[INFO]	==== START ====
2020-12-31 15:08:55,903	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:08:56,958	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:08:57,994	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:08:58,964	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:08:59,985	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:09:03,385	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:09:03,386	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:09:04,402	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:09:04,405	[INFO]	8	SUCCESS	+2.0	
2020-12-31 15:09:04,406	[DEBUG]	
2020-12-31 15:09:05,415	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:09:08,784	[INFO]	10	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 15:09:09,777	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:09:13,171	[INFO]	12	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:09:13,172	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:09:14,187	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:09:14,190	[INFO]	14	SUCCESS	+2.0	
2020-12-31 15:09:14,191	[DEBUG]	
2020-12-31 15:09:15,224	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:09:18,620	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:09:18,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:09:18,621	[INFO]	17	SUCCESS	+2.0	
2020-12-31 15:09:18,622	[DEBUG]	
2020-12-31 15:09:19,641	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:09:19,643	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:09:19,643	[DEBUG]	
2020-12-31 15:09:19,644	[INFO]	20	SUCCESS	+2.0	
2020-12-31 15:09:19,644	[DEBUG]	
2020-12-31 15:09:20,698	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:09:21,671	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:09:22,693	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:09:23,715	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:09:24,704	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:09:28,115	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:09:28,116	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:09:28,117	[INFO]	27	SUCCESS	+2.0	
2020-12-31 15:09:28,117	[DEBUG]	
2020-12-31 15:09:29,147	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:09:30,199	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:09:31,214	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:09:32,252	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:09:33,262	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:09:34,271	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:09:35,305	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:09:36,319	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:09:37,436	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:09:38,466	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:09:39,524	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:09:42,973	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:09:42,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:09:42,974	[INFO]	40	SUCCESS	+2.0	
2020-12-31 15:09:42,975	[DEBUG]	
2020-12-31 15:09:43,992	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:09:45,060	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:09:48,460	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:09:48,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 15:09:48,463	[INFO]	44	SUCCESS	+2.0	
2020-12-31 15:09:48,463	[DEBUG]	
2020-12-31 15:09:49,469	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:09:50,459	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:09:53,799	[INFO]	47	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:09:53,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:09:57,187	[INFO]	48	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:09:57,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 15:09:58,129	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:09:59,100	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:09:59,102	[INFO]	51	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:09:59,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:09:59,103	[INFO]	52	SUCCESS	+2.0	
2020-12-31 15:09:59,103	[DEBUG]	
2020-12-31 15:10:02,499	[INFO]	53	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:10:03,531	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:10:04,565	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:10:05,577	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:10:06,604	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:10:07,623	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:10:08,637	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:10:09,673	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:10:13,067	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:10:13,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 15:10:13,069	[INFO]	62	SUCCESS	+2.0	
2020-12-31 15:10:13,069	[DEBUG]	
2020-12-31 15:10:14,074	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:10:14,076	[INFO]	64	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 15:10:14,077	[DEBUG]	
2020-12-31 15:10:14,077	[INFO]	65	SUCCESS	+2.0	
2020-12-31 15:10:14,078	[DEBUG]	
2020-12-31 15:10:15,075	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:10:16,109	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:10:19,590	[INFO]	68	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:10:20,622	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:10:21,620	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:10:22,619	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:10:23,634	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:10:24,671	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:10:25,753	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:10:25,754	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:10:26,781	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:10:27,801	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:10:31,190	[INFO]	78	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:10:32,245	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:10:33,287	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:10:34,345	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:10:35,502	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:10:36,930	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:10:38,388	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:10:39,827	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:10:40,968	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:10:45,425	[INFO]	87	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:10:45,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:10:46,522	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:10:47,548	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:10:47,549	[INFO]	90	SUCCESS	+2.0	
2020-12-31 15:10:47,550	[DEBUG]	
2020-12-31 15:10:48,557	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:10:49,588	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:10:50,603	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:10:51,637	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:10:55,016	[INFO]	95	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:10:55,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 15:10:56,044	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:10:56,046	[INFO]	97	SUCCESS	+2.0	
2020-12-31 15:10:56,046	[DEBUG]	
2020-12-31 15:10:57,058	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:10:58,103	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:10:59,046	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:11:00,074	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:11:01,093	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:11:04,506	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:11:04,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:11:05,520	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:11:05,521	[INFO]	105	SUCCESS	+2.0	
2020-12-31 15:11:05,521	[DEBUG]	
2020-12-31 15:11:06,541	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:11:07,562	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:11:07,564	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:11:08,568	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:11:09,588	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:11:10,617	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:11:11,643	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:11:12,706	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:11:13,742	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:11:14,840	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:11:15,867	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:11:16,944	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:11:17,985	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:11:19,038	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:11:20,071	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:11:21,112	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:11:22,117	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:11:22,119	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:11:23,166	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:11:24,166	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:11:25,194	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:11:26,219	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:11:27,263	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:11:28,282	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:11:29,300	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:11:30,348	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:11:31,382	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:11:32,408	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:11:33,455	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:11:34,470	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:11:35,425	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:11:36,466	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:11:37,473	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:11:38,505	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:11:39,535	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:11:40,547	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:11:43,926	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:11:43,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:11:43,928	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:11:43,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:11:47,190	[INFO]	144	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:11:47,192	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:11:50,539	[INFO]	145	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:11:50,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,23 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 38,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:11:53,890	[INFO]	146	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:11:53,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,23 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:11:57,202	[INFO]	147	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:11:57,203	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:11:57,204	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:11:57,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:11:58,166	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:11:58,168	[INFO]	150	SUCCESS	+2.0	
2020-12-31 15:11:58,168	[DEBUG]	
2020-12-31 15:11:59,168	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:12:00,205	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:12:01,228	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:12:02,262	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:12:03,300	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:12:04,349	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:12:04,350	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:12:05,294	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:12:08,623	[INFO]	159	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:12:08,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-31 15:12:08,625	[INFO]	160	SUCCESS	+2.0	
2020-12-31 15:12:08,625	[DEBUG]	
2020-12-31 15:12:09,648	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:12:10,681	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:12:14,035	[INFO]	163	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:12:14,974	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:12:15,989	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:12:17,031	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:12:18,066	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:12:19,117	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:12:22,427	[INFO]	169	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:12:23,447	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:12:24,466	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:12:25,529	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:12:26,565	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:12:27,591	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:12:28,603	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:12:29,636	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:12:30,695	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:12:31,722	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:12:32,763	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:12:36,220	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:12:36,221	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 15:12:36,222	[INFO]	181	SUCCESS	+2.0	
2020-12-31 15:12:36,222	[DEBUG]	
2020-12-31 15:12:37,230	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:12:38,245	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:12:39,252	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:12:40,299	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:12:41,253	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:12:42,298	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:12:43,341	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:12:44,378	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:12:45,412	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:12:49,337	[INFO]	191	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:12:52,670	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:12:52,671	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:12:53,712	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:12:54,721	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:12:55,722	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:12:56,826	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:12:56,828	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:12:56,830	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:13:11,917	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:13:11,918	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:13:11,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:13:11,919	[INFO]	200	SUCCESS	+2.0	
2020-12-31 15:13:11,920	[DEBUG]	
2020-12-31 15:13:12,825	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:13:13,761	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:13:13,763	[INFO]	203	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-31 15:13:13,763	[DEBUG]	
2020-12-31 15:13:14,645	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:13:14,646	[INFO]	205	SUCCESS	+2.0	
2020-12-31 15:13:14,646	[DEBUG]	
2020-12-31 15:13:17,750	[INFO]	206	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:13:17,751	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 15:13:17,752	[INFO]	207	SUCCESS	+2.0	
2020-12-31 15:13:17,752	[DEBUG]	
2020-12-31 15:13:18,755	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:13:19,776	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:13:20,839	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:13:21,807	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:13:22,815	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:13:23,833	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:13:24,886	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:13:25,935	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:13:26,982	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:13:28,033	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:13:29,043	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:13:30,053	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:13:31,101	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:13:32,107	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:13:35,428	[INFO]	222	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:13:35,429	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
              }
          }
  

2020-12-31 15:13:35,430	[INFO]	223	SUCCESS	+2.0	
2020-12-31 15:13:35,430	[DEBUG]	
2020-12-31 15:13:36,442	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:13:37,517	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:13:38,534	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:13:39,616	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:13:40,667	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:13:41,748	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:13:45,416	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:13:45,419	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:13:45,422	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:13:45,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:13:45,425	[INFO]	232	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:13:45,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:13:45,429	[INFO]	233	SUCCESS	+2.0	
2020-12-31 15:13:45,430	[DEBUG]	
2020-12-31 15:13:48,678	[INFO]	234	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:13:49,698	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:13:50,695	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:13:54,197	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:13:54,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:13:55,180	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:13:55,182	[INFO]	239	SUCCESS	+2.0	
2020-12-31 15:13:55,182	[DEBUG]	
2020-12-31 15:13:56,243	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:13:57,285	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:13:58,322	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:13:59,373	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:14:02,759	[INFO]	244	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:14:02,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:14:02,762	[INFO]	245	SUCCESS	+2.0	
2020-12-31 15:14:02,763	[DEBUG]	
2020-12-31 15:14:03,787	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 15:14:03,788	[INFO]	247	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:14:03,789	[DEBUG]	
2020-12-31 15:14:03,789	[INFO]	248	SUCCESS	+2.0	
2020-12-31 15:14:03,790	[DEBUG]	
2020-12-31 15:14:04,801	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:14:05,902	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:14:06,941	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:14:07,950	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:14:08,971	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:14:24,046	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:14:24,946	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:14:28,146	[INFO]	256	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:14:28,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:14:28,148	[INFO]	257	SUCCESS	+2.0	
2020-12-31 15:14:28,148	[DEBUG]	
2020-12-31 15:14:29,179	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:14:30,216	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:14:31,239	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:14:34,657	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:14:34,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 15:14:34,659	[INFO]	262	SUCCESS	+2.0	
2020-12-31 15:14:34,659	[DEBUG]	
2020-12-31 15:14:37,982	[INFO]	263	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:14:41,329	[INFO]	264	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:14:44,800	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:14:44,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:14:45,823	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:14:45,824	[INFO]	267	SUCCESS	+2.0	
2020-12-31 15:14:45,825	[DEBUG]	
2020-12-31 15:14:46,958	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:14:47,985	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:14:49,038	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:14:50,044	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:14:53,395	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:14:53,396	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:14:53,397	[INFO]	273	SUCCESS	+2.0	
2020-12-31 15:14:53,398	[DEBUG]	
2020-12-31 15:14:56,718	[INFO]	274	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:14:56,719	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 15:14:56,720	[INFO]	275	SUCCESS	+2.0	
2020-12-31 15:14:56,720	[DEBUG]	
2020-12-31 15:14:57,739	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:14:58,783	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:15:02,263	[INFO]	278	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 15:15:03,250	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:15:04,282	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:15:05,325	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:15:06,355	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:15:07,409	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:15:08,426	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:15:09,472	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:15:09,474	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:15:09,474	[DEBUG]	
2020-12-31 15:15:10,522	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:15:10,523	[INFO]	288	SUCCESS	+2.0	
2020-12-31 15:15:10,524	[DEBUG]	
2020-12-31 15:15:13,893	[INFO]	289	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:15:13,894	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:15:14,927	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:15:15,972	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:15:16,991	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:15:18,011	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:15:21,404	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:15:21,405	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,41 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:15:22,394	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:15:25,761	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:15:25,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:15:26,738	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:15:27,732	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:15:28,797	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:15:28,798	[INFO]	300	SUCCESS	+2.0	
2020-12-31 15:15:28,798	[DEBUG]	
2020-12-31 15:15:29,843	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:15:30,872	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:15:31,906	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:15:32,922	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:15:33,943	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:15:37,433	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:15:37,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:15:38,461	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:15:39,553	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:15:39,554	[INFO]	309	SUCCESS	+2.0	
2020-12-31 15:15:39,554	[DEBUG]	
2020-12-31 15:15:42,934	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:15:42,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 15:15:42,936	[INFO]	311	SUCCESS	+2.0	
2020-12-31 15:15:42,936	[DEBUG]	
2020-12-31 15:15:46,302	[INFO]	312	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:15:46,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:15:47,254	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:15:48,196	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:15:49,178	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:15:50,119	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:15:51,104	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:15:51,105	[INFO]	318	SUCCESS	+2.0	
2020-12-31 15:15:51,106	[DEBUG]	
2020-12-31 15:15:52,156	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:15:53,167	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:15:54,188	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:15:55,223	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:15:56,274	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:15:59,672	[INFO]	324	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:15:59,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:16:00,695	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:16:00,698	[INFO]	326	SUCCESS	+2.0	
2020-12-31 15:16:00,699	[DEBUG]	
2020-12-31 15:16:04,081	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:16:04,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:16:04,083	[INFO]	328	SUCCESS	+2.0	
2020-12-31 15:16:04,083	[DEBUG]	
2020-12-31 15:16:19,151	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:16:20,036	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:16:23,109	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:16:23,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:16:23,115	[INFO]	332	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:16:23,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:16:26,429	[INFO]	333	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:16:26,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:16:27,487	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:16:28,507	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:16:28,509	[INFO]	336	SUCCESS	+2.0	
2020-12-31 15:16:28,509	[DEBUG]	
2020-12-31 15:16:31,911	[INFO]	337	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:16:31,912	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 15:16:31,913	[INFO]	338	SUCCESS	+2.0	
2020-12-31 15:16:31,913	[DEBUG]	
2020-12-31 15:16:32,940	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:16:34,015	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:16:34,016	[INFO]	341	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:16:34,017	[DEBUG]	
2020-12-31 15:16:34,017	[INFO]	342	SUCCESS	+2.0	
2020-12-31 15:16:34,018	[DEBUG]	
2020-12-31 15:16:35,046	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:16:36,072	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:16:36,074	[INFO]	345	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:16:36,074	[DEBUG]	
2020-12-31 15:16:36,075	[INFO]	346	SUCCESS	+2.0	
2020-12-31 15:16:36,075	[DEBUG]	
2020-12-31 15:16:37,108	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:16:37,109	[INFO]	348	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:16:37,110	[DEBUG]	
2020-12-31 15:16:37,110	[INFO]	349	SUCCESS	+2.0	
2020-12-31 15:16:37,111	[DEBUG]	
2020-12-31 15:16:38,130	[INFO]	350	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:16:39,153	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:16:40,191	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:16:41,201	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:16:42,289	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:16:43,340	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:16:44,382	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:16:45,420	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:16:46,463	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:16:47,487	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:16:48,531	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:16:51,866	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:16:51,867	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:16:51,868	[INFO]	362	SUCCESS	+2.0	
2020-12-31 15:16:51,868	[DEBUG]	
2020-12-31 15:16:55,218	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:16:55,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 15:16:56,219	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:16:56,220	[INFO]	365	SUCCESS	+2.0	
2020-12-31 15:16:56,220	[DEBUG]	
2020-12-31 15:16:59,580	[INFO]	366	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:16:59,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:16:59,582	[INFO]	367	SUCCESS	+2.0	
2020-12-31 15:16:59,582	[DEBUG]	
2020-12-31 15:17:02,937	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:17:02,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:17:03,993	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:17:03,994	[INFO]	370	SUCCESS	+2.0	
2020-12-31 15:17:03,994	[DEBUG]	
2020-12-31 15:17:07,418	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:17:07,419	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:17:07,420	[INFO]	372	SUCCESS	+2.0	
2020-12-31 15:17:07,420	[DEBUG]	
2020-12-31 15:17:10,785	[INFO]	373	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:17:10,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:17:10,787	[INFO]	374	SUCCESS	+2.0	
2020-12-31 15:17:10,788	[DEBUG]	
2020-12-31 15:17:11,793	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:17:12,825	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:17:13,854	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:17:14,876	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:17:15,921	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:17:16,930	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:17:17,970	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:17:21,342	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:17:21,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:17:21,344	[INFO]	383	SUCCESS	+2.0	
2020-12-31 15:17:21,344	[DEBUG]	
2020-12-31 15:17:22,357	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:17:22,359	[INFO]	385	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:17:22,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 15:17:23,386	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:17:23,388	[INFO]	387	SUCCESS	+2.0	
2020-12-31 15:17:23,389	[DEBUG]	
2020-12-31 15:17:23,390	[INFO]	388	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:17:23,391	[DEBUG]	
2020-12-31 15:17:23,392	[INFO]	389	SUCCESS	+2.0	
2020-12-31 15:17:23,392	[DEBUG]	
2020-12-31 15:17:24,416	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:17:27,878	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:17:27,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:17:27,880	[INFO]	392	SUCCESS	+2.0	
2020-12-31 15:17:27,880	[DEBUG]	
2020-12-31 15:17:28,906	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:17:32,304	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:17:32,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:17:33,347	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:17:33,350	[INFO]	396	SUCCESS	+2.0	
2020-12-31 15:17:33,350	[DEBUG]	
2020-12-31 15:17:34,377	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:17:35,393	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:17:36,425	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:17:37,452	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:17:38,476	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:17:39,492	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:17:40,536	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:17:43,975	[INFO]	404	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:17:43,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:17:43,977	[INFO]	405	SUCCESS	+2.0	
2020-12-31 15:17:43,978	[DEBUG]	
2020-12-31 15:17:45,274	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:17:46,402	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:17:49,837	[INFO]	408	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:17:53,139	[INFO]	409	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:17:53,140	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:17:53,141	[INFO]	410	SUCCESS	+2.0	
2020-12-31 15:17:53,141	[DEBUG]	
2020-12-31 15:17:54,129	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:17:55,102	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:17:56,121	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:17:57,133	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:17:58,152	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:18:01,500	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:18:01,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 15:18:01,502	[INFO]	417	SUCCESS	+2.0	
2020-12-31 15:18:01,502	[DEBUG]	
2020-12-31 15:18:02,515	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:18:03,524	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:18:04,537	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:18:05,562	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:18:06,575	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:18:07,590	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:18:08,606	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:18:09,658	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:18:10,698	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:18:11,703	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:18:12,710	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:18:13,732	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:18:17,123	[INFO]	430	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:18:17,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:18:18,143	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:18:19,168	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:18:19,169	[INFO]	433	SUCCESS	+2.0	
2020-12-31 15:18:19,170	[DEBUG]	
2020-12-31 15:18:20,214	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:18:21,259	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:18:24,666	[INFO]	436	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:18:25,731	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:18:26,792	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:18:30,187	[INFO]	439	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:18:30,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:18:31,199	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:18:31,201	[INFO]	441	SUCCESS	+2.0	
2020-12-31 15:18:31,201	[DEBUG]	
2020-12-31 15:18:32,204	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:18:33,224	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:18:33,226	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:18:34,265	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:18:37,673	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:18:37,674	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:18:37,675	[INFO]	447	SUCCESS	+2.0	
2020-12-31 15:18:37,675	[DEBUG]	
2020-12-31 15:18:38,677	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:18:39,711	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:18:43,087	[INFO]	450	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:18:44,104	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:18:44,106	[INFO]	452	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:18:44,106	[DEBUG]	
2020-12-31 15:18:45,137	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:18:48,560	[INFO]	454	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:18:48,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 15:18:48,562	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:18:48,562	[DEBUG]	
2020-12-31 15:18:52,030	[INFO]	456	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:18:52,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:18:52,032	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:18:52,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:18:53,055	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:18:54,078	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:18:54,079	[INFO]	460	SUCCESS	+2.0	
2020-12-31 15:18:54,079	[DEBUG]	
2020-12-31 15:18:55,088	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:18:56,110	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:18:59,474	[INFO]	463	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:18:59,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 15:19:00,509	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:19:01,589	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:19:01,594	[INFO]	466	SUCCESS	+2.0	
2020-12-31 15:19:01,595	[DEBUG]	
2020-12-31 15:19:04,941	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:19:04,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:19:05,971	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:19:05,973	[INFO]	469	SUCCESS	+2.0	
2020-12-31 15:19:05,973	[DEBUG]	
2020-12-31 15:19:21,031	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:19:24,092	[INFO]	471	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:19:25,090	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:19:26,103	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:19:27,119	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:19:28,147	[INFO]	475	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:19:29,178	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:19:32,522	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:19:32,523	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:19:35,871	[INFO]	478	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:19:35,872	[INFO]	479	SUCCESS	+2.0	
2020-12-31 15:19:35,872	[DEBUG]	
2020-12-31 15:19:36,894	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:19:37,875	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:19:41,265	[INFO]	482	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:19:41,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:19:41,267	[INFO]	483	SUCCESS	+2.0	
2020-12-31 15:19:41,268	[DEBUG]	
2020-12-31 15:19:42,347	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:19:43,359	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:19:44,363	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:19:45,420	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:19:48,867	[INFO]	488	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:19:48,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:19:49,889	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:19:49,890	[INFO]	490	SUCCESS	+2.0	
2020-12-31 15:19:49,890	[DEBUG]	
2020-12-31 15:19:50,918	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:19:51,959	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:19:52,999	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:19:54,015	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:19:55,031	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:19:56,073	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:19:57,108	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:20:00,767	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:20:00,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:20:00,769	[INFO]	499	SUCCESS	+2.0	
2020-12-31 15:20:00,769	[DEBUG]	
2020-12-31 15:20:01,791	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:20:01,791	[INFO]	==== END ====
2020-12-31 15:20:01,791	[INFO]	Reason: step budget
2020-12-31 15:20:01,792	[INFO]	
2020-12-31 15:20:01,792	[INFO]	========== EPOCH 11 ==========
2020-12-31 15:20:01,793	[INFO]	==== WARMUP ====
2020-12-31 15:20:05,291	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:20:05,291	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:20:08,605	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:20:08,605	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:20:12,074	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:20:12,074	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:20:15,483	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 15:20:15,483	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:20:15,483	[INFO]	==== START ====
2020-12-31 15:20:16,465	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:20:19,711	[INFO]	2	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:20:19,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:20:19,713	[INFO]	3	SUCCESS	+2.0	
2020-12-31 15:20:19,713	[DEBUG]	
2020-12-31 15:20:20,765	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:20:21,767	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:20:22,789	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:20:26,143	[INFO]	7	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:20:27,152	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:20:28,111	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:20:29,111	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:20:32,500	[INFO]	11	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:20:33,508	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:20:34,581	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:20:35,706	[INFO]	14	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 15:20:37,044	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:20:37,046	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:20:38,419	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:20:39,817	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:20:40,877	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:20:41,983	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:20:43,018	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:20:44,074	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:20:45,098	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:20:46,112	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:20:46,114	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:20:49,509	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:20:49,510	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 15:20:50,531	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 15:20:50,532	[INFO]	28	SUCCESS	+2.0	
2020-12-31 15:20:50,532	[DEBUG]	
2020-12-31 15:20:53,897	[INFO]	29	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:20:53,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:20:53,899	[INFO]	30	SUCCESS	+2.0	
2020-12-31 15:20:53,900	[DEBUG]	
2020-12-31 15:20:54,933	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:20:55,917	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:20:56,932	[INFO]	33	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 15:20:57,959	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:20:58,978	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:21:00,026	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:21:01,041	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:21:02,065	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:21:05,960	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:21:05,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:21:06,986	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:21:07,975	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:21:07,976	[INFO]	42	SUCCESS	+2.0	
2020-12-31 15:21:07,977	[DEBUG]	
2020-12-31 15:21:09,021	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:21:12,517	[INFO]	44	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:21:15,779	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:21:15,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:21:16,884	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:21:20,338	[INFO]	47	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:21:20,339	[INFO]	48	SUCCESS	+2.0	
2020-12-31 15:21:20,339	[DEBUG]	
2020-12-31 15:21:23,688	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:21:23,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:21:23,690	[INFO]	50	SUCCESS	+2.0	
2020-12-31 15:21:23,690	[DEBUG]	
2020-12-31 15:21:27,051	[INFO]	51	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:21:27,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 15:21:27,053	[INFO]	52	SUCCESS	+2.0	
2020-12-31 15:21:27,053	[DEBUG]	
2020-12-31 15:21:28,163	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:21:29,205	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:21:30,272	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:21:31,328	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:21:34,676	[INFO]	57	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:21:34,677	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:21:34,678	[INFO]	58	SUCCESS	+2.0	
2020-12-31 15:21:34,678	[DEBUG]	
2020-12-31 15:21:35,686	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:21:36,666	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:21:37,688	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:21:38,771	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:21:39,810	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:21:40,839	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:21:41,912	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:21:43,005	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:21:44,045	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:21:44,046	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:21:44,046	[DEBUG]	
2020-12-31 15:21:45,059	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:21:45,061	[INFO]	70	SUCCESS	+2.0	
2020-12-31 15:21:45,061	[DEBUG]	
2020-12-31 15:21:46,093	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:21:47,110	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:21:48,134	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:21:49,167	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:21:52,545	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:21:52,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:21:52,546	[INFO]	76	SUCCESS	+2.0	
2020-12-31 15:21:52,547	[DEBUG]	
2020-12-31 15:21:53,585	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:21:54,618	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:21:55,638	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:21:56,683	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:21:57,695	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:21:58,721	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:21:59,751	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:22:03,162	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:22:03,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:22:03,164	[INFO]	85	SUCCESS	+2.0	
2020-12-31 15:22:03,164	[DEBUG]	
2020-12-31 15:22:04,169	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:22:05,159	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:22:06,207	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:22:07,222	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:22:08,260	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:22:09,298	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:22:12,683	[INFO]	92	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:22:13,721	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:22:17,204	[INFO]	94	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:22:18,197	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:22:19,201	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:22:20,256	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:22:21,271	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:22:22,339	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:22:23,386	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:22:24,409	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:22:25,443	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:22:26,478	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:22:27,510	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:22:28,569	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:22:28,571	[INFO]	106	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:22:28,572	[DEBUG]	
2020-12-31 15:22:28,573	[INFO]	107	SUCCESS	+2.0	
2020-12-31 15:22:28,573	[DEBUG]	
2020-12-31 15:22:29,592	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:22:33,006	[INFO]	109	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:22:33,007	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-31 15:22:34,066	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:22:35,085	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:22:35,086	[INFO]	112	SUCCESS	+2.0	
2020-12-31 15:22:35,086	[DEBUG]	
2020-12-31 15:22:36,118	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 15:22:37,177	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:22:38,188	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:22:39,210	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:22:40,257	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:22:41,286	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:22:42,353	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:22:42,354	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:22:43,404	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:22:46,730	[INFO]	122	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:22:46,731	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:22:47,753	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:22:47,754	[INFO]	124	SUCCESS	+2.0	
2020-12-31 15:22:47,755	[DEBUG]	
2020-12-31 15:22:48,793	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:22:49,855	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:22:50,879	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:22:51,918	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:22:55,246	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:22:55,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:22:55,248	[INFO]	130	SUCCESS	+2.0	
2020-12-31 15:22:55,248	[DEBUG]	
2020-12-31 15:22:56,276	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:22:57,290	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:22:58,301	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:22:59,545	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:23:03,236	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:23:03,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 15:23:06,505	[INFO]	136	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:23:06,506	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 15:23:06,507	[INFO]	137	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:23:06,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 15:23:09,765	[INFO]	138	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-31 15:23:10,827	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:23:10,829	[INFO]	140	SUCCESS	+2.0	
2020-12-31 15:23:10,829	[DEBUG]	
2020-12-31 15:23:11,881	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:23:15,265	[INFO]	142	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:23:15,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:23:15,267	[INFO]	143	SUCCESS	+2.0	
2020-12-31 15:23:15,268	[DEBUG]	
2020-12-31 15:23:16,289	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:23:17,321	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:23:18,341	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:23:18,343	[INFO]	147	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:23:18,343	[DEBUG]	
2020-12-31 15:23:18,344	[INFO]	148	SUCCESS	+2.0	
2020-12-31 15:23:18,344	[DEBUG]	
2020-12-31 15:23:19,413	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:23:19,415	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:23:20,471	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:23:23,871	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:23:23,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 15:23:38,932	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:23:38,933	[INFO]	154	SUCCESS	+2.0	
2020-12-31 15:23:38,933	[DEBUG]	
2020-12-31 15:23:39,836	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:23:40,729	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:23:41,634	[INFO]	157	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:23:42,528	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:23:43,463	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:23:46,878	[INFO]	160	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:23:46,879	[INFO]	161	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:23:47,909	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:23:48,968	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:23:50,016	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:23:51,027	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:23:52,074	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:23:52,075	[INFO]	167	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:23:52,076	[DEBUG]	
2020-12-31 15:23:53,111	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:23:53,112	[INFO]	169	SUCCESS	+2.0	
2020-12-31 15:23:53,112	[DEBUG]	
2020-12-31 15:23:54,134	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:23:55,160	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:24:10,231	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:24:13,604	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:24:13,605	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:24:14,668	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:24:14,669	[INFO]	175	SUCCESS	+2.0	
2020-12-31 15:24:14,670	[DEBUG]	
2020-12-31 15:24:15,685	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:24:16,728	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:24:17,782	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:24:18,819	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:24:19,878	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:24:20,984	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:24:22,038	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:24:23,025	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:24:23,027	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:24:24,087	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:24:27,543	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:24:27,544	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:24:28,557	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:24:28,558	[INFO]	188	SUCCESS	+2.0	
2020-12-31 15:24:28,559	[DEBUG]	
2020-12-31 15:24:29,596	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:24:30,664	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:24:31,751	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:24:31,753	[INFO]	192	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:24:31,753	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:24:31,754	[INFO]	193	SUCCESS	+2.0	
2020-12-31 15:24:31,754	[DEBUG]	
2020-12-31 15:24:32,803	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:24:33,853	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:24:34,901	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:24:35,912	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:24:36,942	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:24:36,943	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:24:37,959	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:24:39,022	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:24:40,071	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:24:41,127	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:24:42,445	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:24:45,883	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:24:45,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:45,885	[INFO]	206	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:24:45,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:45,887	[INFO]	207	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:24:45,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:45,889	[INFO]	208	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:24:45,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:45,891	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:24:45,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:46,902	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:24:46,904	[INFO]	211	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:24:46,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:46,906	[INFO]	212	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:24:46,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:24:46,908	[INFO]	213	SUCCESS	+2.0	
2020-12-31 15:24:46,908	[DEBUG]	
2020-12-31 15:24:47,935	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:24:48,981	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:24:52,314	[INFO]	216	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:24:52,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:24:53,345	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:24:56,730	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:24:56,731	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 43,49 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:24:57,784	[INFO]	219	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:24:57,785	[INFO]	220	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:24:57,785	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:24:58,805	[INFO]	221	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:24:58,806	[INFO]	222	SUCCESS	+2.0	
2020-12-31 15:24:58,807	[DEBUG]	
2020-12-31 15:24:59,843	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:25:00,913	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:25:01,963	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:25:02,973	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:25:04,010	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:25:05,053	[INFO]	228	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:25:06,110	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:25:07,137	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:25:10,559	[INFO]	231	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:25:10,560	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:25:10,561	[INFO]	232	SUCCESS	+2.0	
2020-12-31 15:25:10,561	[DEBUG]	
2020-12-31 15:25:13,873	[INFO]	233	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:25:13,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 15:25:14,938	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:25:15,991	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:25:15,993	[INFO]	236	SUCCESS	+2.0	
2020-12-31 15:25:15,993	[DEBUG]	
2020-12-31 15:25:19,486	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:25:19,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 15:25:20,491	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:25:20,492	[INFO]	239	SUCCESS	+2.0	
2020-12-31 15:25:20,492	[DEBUG]	
2020-12-31 15:25:21,527	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:25:22,764	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-31 15:25:23,756	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:25:24,790	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:25:25,832	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:25:26,859	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:25:30,390	[INFO]	246	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:25:30,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:25:45,463	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:25:45,464	[INFO]	248	SUCCESS	+2.0	
2020-12-31 15:25:45,465	[DEBUG]	
2020-12-31 15:25:46,358	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:25:47,254	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:25:50,527	[INFO]	251	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:25:50,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 15:25:51,557	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:25:51,558	[INFO]	253	SUCCESS	+2.0	
2020-12-31 15:25:51,559	[DEBUG]	
2020-12-31 15:25:51,560	[INFO]	254	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:25:51,560	[DEBUG]	
2020-12-31 15:25:51,561	[INFO]	255	SUCCESS	+2.0	
2020-12-31 15:25:51,561	[DEBUG]	
2020-12-31 15:25:52,647	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:25:53,680	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:25:54,749	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:25:55,803	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:25:56,853	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:26:00,223	[INFO]	261	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:26:00,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:26:00,225	[INFO]	262	SUCCESS	+2.0	
2020-12-31 15:26:00,225	[DEBUG]	
2020-12-31 15:26:01,246	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:26:02,755	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:26:03,800	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:26:04,837	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:26:05,874	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:26:09,338	[INFO]	268	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:26:10,386	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:26:11,427	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:26:12,474	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:26:15,838	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:26:15,840	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:26:16,850	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:26:16,851	[INFO]	274	SUCCESS	+2.0	
2020-12-31 15:26:16,851	[DEBUG]	
2020-12-31 15:26:20,223	[INFO]	275	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:26:20,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:26:23,592	[INFO]	276	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:26:23,594	[INFO]	277	SUCCESS	+2.0	
2020-12-31 15:26:23,594	[DEBUG]	
2020-12-31 15:26:27,018	[INFO]	278	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:26:27,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:26:27,019	[INFO]	279	SUCCESS	+2.0	
2020-12-31 15:26:27,020	[DEBUG]	
2020-12-31 15:26:28,024	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:26:29,071	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:26:30,145	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:26:45,225	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:26:46,115	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:26:47,302	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:26:48,341	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:26:49,363	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:26:50,403	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:26:51,449	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:26:52,517	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:26:55,918	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:26:55,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:26:59,288	[INFO]	292	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:26:59,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,35 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:27:02,659	[INFO]	293	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:27:02,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:27:03,692	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:27:03,693	[INFO]	295	SUCCESS	+2.0	
2020-12-31 15:27:03,694	[DEBUG]	
2020-12-31 15:27:07,082	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:27:07,083	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:27:10,484	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:27:10,486	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:27:11,497	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:27:12,580	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:27:12,581	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:27:12,582	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:27:13,622	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:27:14,637	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-31 15:27:14,639	[INFO]	303	SUCCESS	+2.0	
2020-12-31 15:27:14,639	[DEBUG]	
2020-12-31 15:27:15,648	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:27:16,677	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:27:17,652	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:27:18,667	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:27:19,692	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:27:20,753	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:27:21,781	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:27:22,812	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:27:23,856	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:27:27,216	[INFO]	313	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:27:28,224	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:27:31,588	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:27:31,589	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:27:31,590	[INFO]	316	SUCCESS	+2.0	
2020-12-31 15:27:31,590	[DEBUG]	
2020-12-31 15:27:32,596	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:27:33,659	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:27:34,701	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:27:35,705	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:27:35,706	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:27:39,107	[INFO]	322	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:27:39,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 15:27:40,111	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:27:40,112	[INFO]	324	SUCCESS	+2.0	
2020-12-31 15:27:40,113	[DEBUG]	
2020-12-31 15:27:41,155	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:27:42,203	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:27:43,231	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:27:44,282	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:27:45,310	[INFO]	329	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:27:46,346	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:27:47,366	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:27:48,359	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:27:49,365	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:27:50,396	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:27:51,463	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:27:52,521	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:27:53,587	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:27:54,613	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:27:55,643	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:27:56,598	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:27:57,615	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:27:58,635	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:27:59,646	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:28:00,650	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:28:00,652	[INFO]	345	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:28:00,652	[DEBUG]	
2020-12-31 15:28:04,009	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:28:04,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:28:05,003	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:28:06,038	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:28:07,137	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:28:10,564	[INFO]	350	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:28:10,565	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 52,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 15:28:10,567	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:28:10,567	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 52,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 15:28:14,124	[INFO]	352	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:28:14,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 15:28:14,126	[INFO]	353	SUCCESS	+2.0	
2020-12-31 15:28:14,127	[DEBUG]	
2020-12-31 15:28:15,174	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:28:16,256	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:28:19,779	[INFO]	356	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:28:20,848	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:28:20,850	[INFO]	358	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:28:20,850	[DEBUG]	
2020-12-31 15:28:20,851	[INFO]	359	SUCCESS	+2.0	
2020-12-31 15:28:20,851	[DEBUG]	
2020-12-31 15:28:24,295	[INFO]	360	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:28:24,296	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:28:24,297	[INFO]	361	SUCCESS	+2.0	
2020-12-31 15:28:24,297	[DEBUG]	
2020-12-31 15:28:25,332	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:28:28,619	[INFO]	363	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:28:29,617	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:28:30,677	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:28:31,714	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:28:32,732	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:28:33,761	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:28:34,768	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:28:49,842	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:28:52,878	[INFO]	371	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:28:53,927	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:28:54,950	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:28:55,994	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:28:57,044	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:28:58,088	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:28:59,102	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:29:00,056	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:29:01,117	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:29:01,119	[INFO]	380	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:29:02,164	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:29:05,531	[INFO]	382	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:29:05,532	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:29:05,533	[INFO]	383	SUCCESS	+2.0	
2020-12-31 15:29:05,533	[DEBUG]	
2020-12-31 15:29:05,534	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:29:05,534	[DEBUG]	
2020-12-31 15:29:06,534	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:29:06,535	[INFO]	386	SUCCESS	+2.0	
2020-12-31 15:29:06,535	[DEBUG]	
2020-12-31 15:29:07,560	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:29:08,585	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:29:09,627	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:29:10,672	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:29:11,684	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:29:12,703	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:29:13,737	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:29:14,775	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:29:15,827	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:29:19,222	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:29:19,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:29:19,224	[INFO]	397	SUCCESS	+2.0	
2020-12-31 15:29:19,225	[DEBUG]	
2020-12-31 15:29:20,220	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:29:21,254	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:29:22,316	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:29:23,347	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:29:24,368	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:29:25,412	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:29:26,438	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:29:27,483	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:29:28,482	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:29:29,522	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:29:30,567	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:29:31,601	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:29:32,629	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:29:33,663	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:29:34,684	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:29:34,685	[INFO]	413	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:29:34,686	[DEBUG]	
2020-12-31 15:29:34,687	[INFO]	414	SUCCESS	+2.0	
2020-12-31 15:29:34,687	[DEBUG]	
2020-12-31 15:29:35,663	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:29:36,674	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:29:37,707	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:29:38,746	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:29:39,796	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:29:40,831	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:29:41,853	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:29:42,869	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:29:43,881	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:29:43,882	[INFO]	424	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:29:43,883	[DEBUG]	
2020-12-31 15:29:47,235	[INFO]	425	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:29:47,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:29:48,283	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:29:49,363	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:29:50,370	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:29:50,372	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:29:50,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:29:50,373	[INFO]	430	SUCCESS	+2.0	
2020-12-31 15:29:50,374	[DEBUG]	
2020-12-31 15:29:51,411	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:29:52,478	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:29:53,497	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:29:57,289	[INFO]	434	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:29:57,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:29:57,291	[INFO]	435	SUCCESS	+2.0	
2020-12-31 15:29:57,291	[DEBUG]	
2020-12-31 15:29:58,294	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:29:58,296	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:29:59,353	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:30:00,383	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:30:01,475	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:30:02,528	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:30:03,593	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:30:05,038	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:30:06,097	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:30:07,175	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:30:08,207	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:30:11,588	[INFO]	447	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:30:11,589	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:30:11,590	[INFO]	448	SUCCESS	+2.0	
2020-12-31 15:30:11,591	[DEBUG]	
2020-12-31 15:30:12,594	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:30:15,927	[INFO]	450	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:30:16,941	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:30:17,967	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:30:19,012	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:30:20,000	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:30:23,388	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:30:23,389	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 15:30:24,392	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:30:25,452	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:30:25,453	[INFO]	458	SUCCESS	+2.0	
2020-12-31 15:30:25,454	[DEBUG]	
2020-12-31 15:30:26,455	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:30:27,475	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:30:28,525	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:30:31,937	[INFO]	462	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:30:31,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 15:30:35,390	[INFO]	463	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:30:35,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 15:30:35,392	[INFO]	464	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:30:35,393	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 15:30:36,707	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:30:36,708	[INFO]	466	SUCCESS	+2.0	
2020-12-31 15:30:36,709	[DEBUG]	
2020-12-31 15:30:38,109	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:30:39,548	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:30:40,708	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:30:41,993	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:30:46,451	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:30:46,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-31 15:30:46,453	[INFO]	472	SUCCESS	+2.0	
2020-12-31 15:30:46,453	[DEBUG]	
2020-12-31 15:30:46,454	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:30:47,504	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:30:48,544	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:30:49,605	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:30:50,662	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:30:51,695	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:30:52,733	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:30:53,767	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:30:54,820	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:30:55,860	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:30:56,912	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:30:57,946	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:30:58,985	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:31:02,399	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:31:02,400	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:31:17,459	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:31:17,460	[INFO]	488	SUCCESS	+2.0	
2020-12-31 15:31:17,461	[DEBUG]	
2020-12-31 15:31:18,350	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:31:19,252	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:31:20,167	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:31:23,337	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:31:23,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:31:23,339	[INFO]	493	SUCCESS	+2.0	
2020-12-31 15:31:23,340	[DEBUG]	
2020-12-31 15:31:24,270	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:31:27,580	[INFO]	495	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:31:28,604	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:31:31,977	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:31:31,979	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 15:31:33,032	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:31:33,033	[INFO]	499	SUCCESS	+2.0	
2020-12-31 15:31:33,033	[DEBUG]	
2020-12-31 15:31:34,078	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:31:34,079	[INFO]	==== END ====
2020-12-31 15:31:34,079	[INFO]	Reason: step budget
2020-12-31 15:31:34,080	[INFO]	
2020-12-31 15:31:34,080	[INFO]	========== EPOCH 12 ==========
2020-12-31 15:31:34,080	[INFO]	==== WARMUP ====
2020-12-31 15:31:37,419	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:31:37,419	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:31:40,745	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:31:40,745	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:31:44,465	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:31:44,465	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:31:47,801	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 15:31:47,801	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:31:47,801	[INFO]	==== START ====
2020-12-31 15:31:48,840	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:31:49,859	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:31:50,876	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:31:51,919	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:31:52,944	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:31:53,989	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:31:57,403	[INFO]	7	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:31:57,405	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-31 15:31:57,406	[INFO]	8	SUCCESS	+2.0	
2020-12-31 15:31:57,407	[DEBUG]	
2020-12-31 15:31:58,425	[INFO]	9	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:31:59,443	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:32:00,443	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:32:01,524	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:32:01,525	[INFO]	13	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:32:01,526	[DEBUG]	
2020-12-31 15:32:01,526	[INFO]	14	SUCCESS	+2.0	
2020-12-31 15:32:01,527	[DEBUG]	
2020-12-31 15:32:02,565	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:32:03,626	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:32:04,657	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:32:05,630	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:32:09,084	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:32:09,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:32:10,123	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:32:10,124	[INFO]	21	SUCCESS	+2.0	
2020-12-31 15:32:10,124	[DEBUG]	
2020-12-31 15:32:11,135	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:32:12,175	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:32:13,214	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:32:14,247	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:32:15,279	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:32:16,286	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:32:19,697	[INFO]	28	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:32:23,083	[INFO]	29	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:32:23,084	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:32:26,447	[INFO]	30	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:32:26,449	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 29,34 ****
--- 31,40 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:32:26,450	[INFO]	31	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:32:26,451	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:32:27,486	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:32:27,488	[INFO]	33	SUCCESS	+2.0	
2020-12-31 15:32:27,488	[DEBUG]	
2020-12-31 15:32:28,517	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:32:29,564	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:32:32,939	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:32:32,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:32:32,941	[INFO]	37	SUCCESS	+2.0	
2020-12-31 15:32:32,941	[DEBUG]	
2020-12-31 15:32:33,974	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:32:37,322	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:32:37,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:32:38,350	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:32:39,386	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:32:39,387	[INFO]	42	SUCCESS	+2.0	
2020-12-31 15:32:39,387	[DEBUG]	
2020-12-31 15:32:42,808	[INFO]	43	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:32:42,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:32:42,811	[INFO]	44	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:32:42,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:32:43,858	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:32:44,890	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:32:44,891	[INFO]	47	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:32:44,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:32:44,893	[INFO]	48	SUCCESS	+2.0	
2020-12-31 15:32:44,893	[DEBUG]	
2020-12-31 15:32:45,904	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:32:46,975	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:32:48,024	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:32:49,038	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:33:04,095	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:33:05,000	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:33:07,867	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:33:07,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:33:07,869	[INFO]	56	SUCCESS	+2.0	
2020-12-31 15:33:07,869	[DEBUG]	
2020-12-31 15:33:08,779	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:33:09,771	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:33:10,770	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:33:11,738	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:33:12,802	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:33:13,848	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:33:14,859	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:33:15,912	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:33:16,964	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:33:17,973	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:33:18,995	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:33:20,003	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:33:20,971	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:33:24,363	[INFO]	70	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:33:24,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:33:24,365	[INFO]	71	SUCCESS	+2.0	
2020-12-31 15:33:24,366	[DEBUG]	
2020-12-31 15:33:25,398	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:33:26,423	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:33:27,427	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:33:42,487	[INFO]	75	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:33:43,389	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:33:44,298	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:33:45,231	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:33:46,124	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:33:47,017	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:33:48,032	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:33:51,386	[INFO]	82	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:33:51,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 15:33:51,388	[INFO]	83	SUCCESS	+2.0	
2020-12-31 15:33:51,388	[DEBUG]	
2020-12-31 15:33:52,379	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:33:55,700	[INFO]	85	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-31 15:33:56,715	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:33:57,768	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:33:58,779	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:33:59,818	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:34:00,911	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:34:01,917	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:34:02,967	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:34:03,986	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:34:05,002	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:34:06,008	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:34:07,045	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:34:08,074	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:34:09,102	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:34:10,143	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:34:11,160	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:34:12,205	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:34:13,235	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:34:14,267	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:34:15,306	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:34:18,734	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:34:18,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:34:18,735	[INFO]	106	SUCCESS	+2.0	
2020-12-31 15:34:18,736	[DEBUG]	
2020-12-31 15:34:19,759	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:34:23,215	[INFO]	108	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:34:23,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 15:34:24,268	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 15:34:25,340	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:34:26,372	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:34:27,437	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:34:27,439	[INFO]	113	SUCCESS	+2.0	
2020-12-31 15:34:27,439	[DEBUG]	
2020-12-31 15:34:30,832	[INFO]	114	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:34:30,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:34:30,834	[INFO]	115	SUCCESS	+2.0	
2020-12-31 15:34:30,835	[DEBUG]	
2020-12-31 15:34:34,242	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:34:34,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:34,244	[INFO]	117	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:34:34,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:35,298	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:34:35,305	[INFO]	119	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:34:35,307	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:35,311	[INFO]	120	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:34:35,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:36,324	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:34:36,325	[INFO]	122	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:34:36,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:37,355	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:34:38,377	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:34:41,850	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:34:41,851	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:34:42,866	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:34:46,208	[INFO]	127	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:34:46,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:34:47,514	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:34:48,588	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:34:48,590	[INFO]	130	SUCCESS	+2.0	
2020-12-31 15:34:48,590	[DEBUG]	
2020-12-31 15:34:49,591	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:34:50,614	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:34:51,630	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:34:52,688	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:34:53,764	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:34:53,766	[INFO]	136	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:34:53,766	[DEBUG]	
2020-12-31 15:34:54,777	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:34:54,778	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:34:54,779	[DEBUG]	
2020-12-31 15:34:58,153	[INFO]	139	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:34:58,154	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:34:58,155	[INFO]	140	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:34:58,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:34:58,156	[INFO]	141	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:34:58,156	[DEBUG]	
2020-12-31 15:34:58,157	[INFO]	142	SUCCESS	+2.0	
2020-12-31 15:34:58,157	[DEBUG]	
2020-12-31 15:35:01,501	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:35:01,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:35:01,503	[INFO]	144	SUCCESS	+2.0	
2020-12-31 15:35:01,503	[DEBUG]	
2020-12-31 15:35:02,539	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:35:03,568	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:35:04,624	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:35:05,626	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:35:09,458	[INFO]	149	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:35:09,460	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 15:35:10,495	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:35:10,498	[INFO]	151	SUCCESS	+2.0	
2020-12-31 15:35:10,499	[DEBUG]	
2020-12-31 15:35:11,515	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:35:12,572	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:35:12,577	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:35:13,575	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:35:14,587	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:35:15,621	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:35:16,658	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:35:17,692	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:35:18,730	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:35:19,766	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:35:20,810	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:35:21,847	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:35:22,938	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:35:23,947	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:35:25,006	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:35:26,043	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:35:27,080	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:35:28,092	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:35:29,135	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:35:32,478	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:35:32,479	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:35:32,480	[INFO]	172	SUCCESS	+2.0	
2020-12-31 15:35:32,480	[DEBUG]	
2020-12-31 15:35:33,502	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:35:34,539	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:35:35,677	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:35:39,002	[INFO]	176	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:35:39,003	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 15:35:39,980	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:35:40,944	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:35:41,985	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:35:45,285	[INFO]	180	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:35:45,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 15:35:45,287	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:35:45,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 15:35:46,240	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:35:46,242	[INFO]	183	SUCCESS	+2.0	
2020-12-31 15:35:46,242	[DEBUG]	
2020-12-31 15:35:47,258	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:35:47,260	[INFO]	185	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:35:47,261	[DEBUG]	
2020-12-31 15:35:47,261	[INFO]	186	SUCCESS	+2.0	
2020-12-31 15:35:47,262	[DEBUG]	
2020-12-31 15:35:48,312	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:35:49,257	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:35:50,273	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:35:51,316	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:35:54,716	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:35:54,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:35:55,744	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:35:56,764	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:35:57,790	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:35:58,838	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:36:02,347	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:36:02,349	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:36:02,350	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:36:02,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:36:02,351	[INFO]	198	SUCCESS	+2.0	
2020-12-31 15:36:02,351	[DEBUG]	
2020-12-31 15:36:03,404	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:36:04,428	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:36:05,394	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:36:06,409	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:36:06,411	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:36:06,411	[DEBUG]	
2020-12-31 15:36:06,412	[INFO]	204	SUCCESS	+2.0	
2020-12-31 15:36:06,412	[DEBUG]	
2020-12-31 15:36:09,829	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:36:09,830	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:36:09,831	[INFO]	206	SUCCESS	+2.0	
2020-12-31 15:36:09,832	[DEBUG]	
2020-12-31 15:36:10,891	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:36:11,905	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:36:15,262	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:36:15,263	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 15:36:15,265	[INFO]	210	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:36:15,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 15:36:15,266	[INFO]	211	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:36:15,267	[DEBUG]	
2020-12-31 15:36:15,267	[INFO]	212	SUCCESS	+2.0	
2020-12-31 15:36:15,267	[DEBUG]	
2020-12-31 15:36:16,276	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:36:19,667	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:36:19,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:36:23,040	[INFO]	215	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:36:23,041	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:36:24,074	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-31 15:36:27,491	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:36:27,492	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:36:27,493	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:36:27,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:36:28,520	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:36:28,522	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:36:28,522	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:36:28,523	[INFO]	221	SUCCESS	+2.0	
2020-12-31 15:36:28,523	[DEBUG]	
2020-12-31 15:36:29,545	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:36:30,592	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:36:31,651	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:36:32,734	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:36:33,767	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:36:34,795	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:36:38,240	[INFO]	228	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:36:38,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 15:36:41,615	[INFO]	229	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:36:41,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:36:42,590	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:36:45,906	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:36:45,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:36:46,871	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:36:50,222	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:36:50,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,42 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:36:51,176	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:36:51,177	[INFO]	235	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:36:51,178	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:36:51,179	[INFO]	236	SUCCESS	+2.0	
2020-12-31 15:36:51,179	[DEBUG]	
2020-12-31 15:36:52,212	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:36:55,590	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:36:55,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 15:36:56,691	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:36:56,692	[INFO]	240	SUCCESS	+2.0	
2020-12-31 15:36:56,693	[DEBUG]	
2020-12-31 15:36:57,721	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:36:58,713	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:36:59,751	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:37:00,811	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:37:01,857	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:37:02,874	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:37:03,898	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:37:04,953	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:37:08,214	[INFO]	249	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:37:08,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 15:37:11,489	[INFO]	250	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:37:11,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  
***************
*** 48,53 ****
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:37:12,460	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:37:15,847	[INFO]	252	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:37:15,848	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,43 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  
***************
*** 48,53 ****
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:37:16,809	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:37:17,821	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:37:21,264	[INFO]	255	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:37:21,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,53 ****
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:37:24,656	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:37:24,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:37:25,729	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:37:26,719	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:37:26,721	[INFO]	259	SUCCESS	+2.0	
2020-12-31 15:37:26,721	[DEBUG]	
2020-12-31 15:37:30,123	[INFO]	260	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:37:31,147	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:37:32,179	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:37:35,912	[INFO]	263	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:37:35,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 15:37:35,914	[INFO]	264	SUCCESS	+2.0	
2020-12-31 15:37:35,914	[DEBUG]	
2020-12-31 15:37:36,931	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:37:37,955	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:37:39,012	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:37:40,052	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:37:41,062	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:37:42,099	[INFO]	270	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:37:45,527	[INFO]	271	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:37:45,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:37:45,529	[INFO]	272	SUCCESS	+2.0	
2020-12-31 15:37:45,529	[DEBUG]	
2020-12-31 15:37:46,577	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:37:47,652	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:37:48,757	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:37:49,838	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:37:50,922	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:37:54,412	[INFO]	278	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:37:54,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:37:54,414	[INFO]	279	SUCCESS	+2.0	
2020-12-31 15:37:54,414	[DEBUG]	
2020-12-31 15:37:55,476	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:37:56,552	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:37:57,631	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:37:58,680	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:37:59,801	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:38:00,866	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:38:01,882	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:38:02,961	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:38:06,442	[INFO]	288	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:38:06,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:38:07,529	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:38:11,019	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:38:11,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 15:38:11,021	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:38:11,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:38:11,022	[INFO]	292	SUCCESS	+2.0	
2020-12-31 15:38:11,022	[DEBUG]	
2020-12-31 15:38:12,025	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:38:13,015	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:38:14,047	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:38:14,049	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:38:14,049	[DEBUG]	
2020-12-31 15:38:15,055	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:38:16,066	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:38:17,038	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:38:18,047	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:38:19,099	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:38:20,137	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:38:20,138	[INFO]	303	SUCCESS	+2.0	
2020-12-31 15:38:20,138	[DEBUG]	
2020-12-31 15:38:21,153	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:38:21,155	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:38:22,171	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:38:23,195	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:38:24,224	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:38:27,657	[INFO]	309	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:38:28,622	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:38:29,632	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:38:30,654	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:38:31,653	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:38:32,691	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:38:33,716	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:38:34,736	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:38:35,721	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:38:36,749	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:38:37,788	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:38:41,199	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:38:41,200	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:38:41,201	[INFO]	321	SUCCESS	+2.0	
2020-12-31 15:38:41,201	[DEBUG]	
2020-12-31 15:38:45,039	[INFO]	322	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:38:45,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 15:38:45,041	[INFO]	323	SUCCESS	+2.0	
2020-12-31 15:38:45,041	[DEBUG]	
2020-12-31 15:38:46,031	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:38:47,078	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:38:47,079	[INFO]	326	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:38:47,079	[DEBUG]	
2020-12-31 15:38:48,148	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:38:48,149	[INFO]	328	SUCCESS	+2.0	
2020-12-31 15:38:48,149	[DEBUG]	
2020-12-31 15:38:49,163	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:38:52,528	[INFO]	330	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:38:52,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 15:38:55,953	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:38:55,954	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 15:38:56,925	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:38:56,926	[INFO]	333	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:38:56,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-31 15:38:56,928	[INFO]	334	SUCCESS	+2.0	
2020-12-31 15:38:56,928	[DEBUG]	
2020-12-31 15:39:00,342	[INFO]	335	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:39:00,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 15:39:00,344	[INFO]	336	SUCCESS	+2.0	
2020-12-31 15:39:00,344	[DEBUG]	
2020-12-31 15:39:01,338	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:39:04,688	[INFO]	338	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:39:05,696	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:39:09,018	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:39:09,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:39:09,991	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:39:09,994	[INFO]	342	SUCCESS	+2.0	
2020-12-31 15:39:09,995	[DEBUG]	
2020-12-31 15:39:11,293	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:39:12,574	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:39:13,617	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:39:14,640	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:39:15,651	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:39:15,652	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:39:16,670	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:39:17,696	[INFO]	350	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:39:21,116	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:39:21,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 15:39:22,178	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:39:22,179	[INFO]	353	SUCCESS	+2.0	
2020-12-31 15:39:22,180	[DEBUG]	
2020-12-31 15:39:23,229	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:39:26,701	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:39:26,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:39:26,705	[INFO]	356	SUCCESS	+2.0	
2020-12-31 15:39:26,706	[DEBUG]	
2020-12-31 15:39:27,756	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:39:31,164	[INFO]	358	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:39:31,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:39:32,164	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:39:33,197	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:39:33,198	[INFO]	361	SUCCESS	+2.0	
2020-12-31 15:39:33,198	[DEBUG]	
2020-12-31 15:39:34,229	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:39:35,274	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:39:36,332	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:39:39,756	[INFO]	365	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:39:39,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:39:39,758	[INFO]	366	SUCCESS	+2.0	
2020-12-31 15:39:39,759	[DEBUG]	
2020-12-31 15:39:40,765	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:39:41,830	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:39:42,877	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:39:43,923	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:39:47,290	[INFO]	371	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:39:47,291	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:39:47,292	[INFO]	372	SUCCESS	+2.0	
2020-12-31 15:39:47,292	[DEBUG]	
2020-12-31 15:39:48,286	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:39:49,297	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:39:50,316	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:39:51,345	[INFO]	376	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:39:54,707	[INFO]	377	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:39:54,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:39:54,709	[INFO]	378	SUCCESS	+2.0	
2020-12-31 15:39:54,710	[DEBUG]	
2020-12-31 15:39:55,730	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:39:56,765	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:39:57,761	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:40:01,166	[INFO]	382	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 15:40:02,150	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:40:05,544	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:40:05,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 15:40:06,554	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:40:06,555	[INFO]	386	SUCCESS	+2.0	
2020-12-31 15:40:06,555	[DEBUG]	
2020-12-31 15:40:09,966	[INFO]	387	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:40:09,967	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:40:09,968	[INFO]	388	SUCCESS	+2.0	
2020-12-31 15:40:09,968	[DEBUG]	
2020-12-31 15:40:10,946	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:40:12,001	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:40:13,023	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:40:14,067	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:40:15,107	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:40:16,137	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:40:17,133	[INFO]	395	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:40:18,166	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:40:19,159	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:40:20,223	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:40:21,282	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:40:22,300	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:40:25,686	[INFO]	401	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:40:25,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:40:26,710	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:40:27,741	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:40:27,742	[INFO]	404	SUCCESS	+2.0	
2020-12-31 15:40:27,742	[DEBUG]	
2020-12-31 15:40:28,787	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:40:29,819	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:40:30,850	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:40:31,892	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:40:32,967	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:40:34,003	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:40:35,003	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:40:36,126	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:40:37,159	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:40:38,166	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:40:39,198	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:40:40,219	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:40:44,529	[INFO]	417	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:40:47,877	[INFO]	418	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:40:47,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-31 15:40:47,879	[INFO]	419	SUCCESS	+2.0	
2020-12-31 15:40:47,879	[DEBUG]	
2020-12-31 15:41:02,948	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:41:03,893	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:41:04,783	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:41:05,709	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:41:06,637	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:41:07,640	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:41:08,668	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:41:09,709	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:41:10,742	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:41:11,781	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:41:12,787	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:41:13,828	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:41:14,817	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:41:18,148	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:41:18,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:41:18,150	[INFO]	434	SUCCESS	+2.0	
2020-12-31 15:41:18,150	[DEBUG]	
2020-12-31 15:41:21,444	[INFO]	435	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:41:21,446	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:41:21,446	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:41:24,782	[INFO]	437	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:41:24,784	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 48,53 ****
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:41:24,785	[INFO]	438	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:41:24,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:41:24,787	[INFO]	439	SUCCESS	+2.0	
2020-12-31 15:41:24,787	[DEBUG]	
2020-12-31 15:41:25,809	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:41:26,824	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:41:30,204	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:41:30,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:41:33,588	[INFO]	443	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:41:33,590	[INFO]	444	SUCCESS	+2.0	
2020-12-31 15:41:33,590	[DEBUG]	
2020-12-31 15:41:34,601	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:41:37,981	[INFO]	446	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:41:39,024	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:41:40,037	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:41:41,065	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:41:42,129	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:41:43,178	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:41:44,195	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:41:45,234	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:41:46,246	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:41:47,307	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:41:48,319	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:41:49,332	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:41:50,364	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:41:51,398	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:41:52,403	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:41:55,737	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:41:55,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 15:41:55,738	[INFO]	462	SUCCESS	+2.0	
2020-12-31 15:41:55,739	[DEBUG]	
2020-12-31 15:41:59,132	[INFO]	463	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:41:59,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:42:00,207	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:42:01,268	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:42:02,324	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:42:02,325	[INFO]	467	SUCCESS	+2.0	
2020-12-31 15:42:02,325	[DEBUG]	
2020-12-31 15:42:05,657	[INFO]	468	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:42:05,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:42:05,660	[INFO]	469	SUCCESS	+2.0	
2020-12-31 15:42:05,660	[DEBUG]	
2020-12-31 15:42:06,631	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:42:07,660	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:42:08,639	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:42:11,986	[INFO]	473	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:42:15,326	[INFO]	474	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:42:15,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:42:15,328	[INFO]	475	SUCCESS	+2.0	
2020-12-31 15:42:15,328	[DEBUG]	
2020-12-31 15:42:16,343	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:42:17,387	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:42:18,475	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:42:19,479	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:42:22,846	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:42:22,847	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:42:22,848	[INFO]	481	SUCCESS	+2.0	
2020-12-31 15:42:22,848	[DEBUG]	
2020-12-31 15:42:23,853	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:42:24,903	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:42:28,298	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:42:28,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:42:29,584	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:42:29,586	[INFO]	486	SUCCESS	+2.0	
2020-12-31 15:42:29,586	[DEBUG]	
2020-12-31 15:42:30,630	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:42:31,646	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:42:32,651	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:42:33,671	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:42:34,736	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:42:38,172	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:42:38,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 15:42:39,455	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:42:42,824	[INFO]	494	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-31 15:42:43,826	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:42:43,827	[INFO]	496	SUCCESS	+2.0	
2020-12-31 15:42:43,827	[DEBUG]	
2020-12-31 15:42:44,835	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:42:45,835	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:42:46,866	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:42:47,895	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:42:47,895	[INFO]	==== END ====
2020-12-31 15:42:47,895	[INFO]	Reason: step budget
2020-12-31 15:42:47,896	[INFO]	
2020-12-31 15:42:47,896	[INFO]	========== EPOCH 13 ==========
2020-12-31 15:42:47,897	[INFO]	==== WARMUP ====
2020-12-31 15:42:51,278	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:42:51,278	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:42:54,670	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:42:54,670	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:42:57,985	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:42:57,985	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:43:01,335	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 15:43:01,335	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:43:01,335	[INFO]	==== START ====
2020-12-31 15:43:04,656	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:43:04,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:43:05,703	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:43:06,686	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:43:07,718	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:43:07,719	[INFO]	5	SUCCESS	+2.0	
2020-12-31 15:43:07,719	[DEBUG]	
2020-12-31 15:43:08,748	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:43:09,778	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:43:10,815	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:43:11,852	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:43:12,880	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:43:16,307	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:43:16,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 15:43:16,309	[INFO]	12	SUCCESS	+2.0	
2020-12-31 15:43:16,309	[DEBUG]	
2020-12-31 15:43:19,680	[INFO]	13	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:43:19,681	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 15:43:19,682	[INFO]	14	SUCCESS	+2.0	
2020-12-31 15:43:19,683	[DEBUG]	
2020-12-31 15:43:20,691	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:43:24,051	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:43:24,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-31 15:43:25,104	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:43:26,096	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:43:27,102	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:43:27,103	[INFO]	20	SUCCESS	+2.0	
2020-12-31 15:43:27,104	[DEBUG]	
2020-12-31 15:43:30,443	[INFO]	21	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:43:33,760	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:43:33,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 15:43:33,762	[INFO]	23	SUCCESS	+2.0	
2020-12-31 15:43:33,762	[DEBUG]	
2020-12-31 15:43:37,125	[INFO]	24	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:43:37,126	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:43:38,124	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:43:39,158	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:43:39,159	[INFO]	27	SUCCESS	+2.0	
2020-12-31 15:43:39,159	[DEBUG]	
2020-12-31 15:43:42,613	[INFO]	28	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:43:42,614	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:43:42,614	[INFO]	29	SUCCESS	+2.0	
2020-12-31 15:43:42,615	[DEBUG]	
2020-12-31 15:43:43,649	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:43:44,673	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:43:45,681	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:43:46,706	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:43:47,741	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:43:48,772	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:43:52,152	[INFO]	36	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:43:53,160	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:43:54,197	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:43:55,228	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:43:58,612	[INFO]	40	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:43:58,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:43:59,603	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:44:00,619	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:44:00,620	[INFO]	43	SUCCESS	+2.0	
2020-12-31 15:44:00,621	[DEBUG]	
2020-12-31 15:44:01,655	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:44:02,673	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:44:03,712	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:44:04,741	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:44:08,261	[INFO]	48	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:44:08,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:44:09,284	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:44:09,285	[INFO]	50	SUCCESS	+2.0	
2020-12-31 15:44:09,285	[DEBUG]	
2020-12-31 15:44:10,284	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:44:11,321	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:44:14,758	[INFO]	53	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:44:14,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:44:18,225	[INFO]	54	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:44:18,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,45 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 int minDistance = Integer.MAX_VALUE;
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:44:18,228	[INFO]	55	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:44:18,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:44:19,240	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:44:22,740	[INFO]	57	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 15:44:22,741	[INFO]	58	SUCCESS	+2.0	
2020-12-31 15:44:22,741	[DEBUG]	
2020-12-31 15:44:23,743	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:44:24,847	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:44:25,877	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:44:26,899	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:44:27,941	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:44:28,994	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:44:30,027	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:44:31,093	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:44:32,137	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:44:35,589	[INFO]	68	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:44:36,593	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:44:37,614	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:44:38,586	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:44:42,017	[INFO]	72	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:44:43,058	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:44:43,060	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:44:46,466	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:44:46,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:44:46,468	[INFO]	76	SUCCESS	+2.0	
2020-12-31 15:44:46,469	[DEBUG]	
2020-12-31 15:44:47,485	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:44:48,520	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:44:49,568	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:44:50,615	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:44:51,707	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:44:52,684	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:44:53,712	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:44:54,752	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:44:55,809	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:44:56,812	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:45:00,113	[INFO]	87	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:45:01,134	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:45:16,194	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:45:19,137	[INFO]	90	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:45:19,138	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:45:19,139	[INFO]	91	SUCCESS	+2.0	
2020-12-31 15:45:19,139	[DEBUG]	
2020-12-31 15:45:20,030	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:45:23,483	[INFO]	93	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:45:23,484	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:45:23,485	[INFO]	94	SUCCESS	+2.0	
2020-12-31 15:45:23,485	[DEBUG]	
2020-12-31 15:45:24,489	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:45:25,542	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:45:26,572	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:45:27,589	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:45:28,621	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:45:29,634	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:45:32,947	[INFO]	101	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:45:32,948	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:45:33,985	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:45:33,986	[INFO]	103	SUCCESS	+2.0	
2020-12-31 15:45:33,986	[DEBUG]	
2020-12-31 15:45:35,209	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:45:36,400	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:45:37,424	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:45:38,466	[INFO]	107	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:45:39,533	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:45:42,983	[INFO]	109	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:45:44,018	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:45:45,055	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:45:46,082	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:45:47,094	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:45:48,052	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:45:49,079	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:45:50,115	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:45:53,462	[INFO]	117	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:45:54,457	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:45:55,468	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:45:56,521	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:45:57,534	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:45:58,569	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:45:59,608	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:46:00,659	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:46:01,679	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:46:02,738	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:46:06,465	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:46:06,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 15:46:06,467	[INFO]	128	SUCCESS	+2.0	
2020-12-31 15:46:06,468	[DEBUG]	
2020-12-31 15:46:06,469	[INFO]	129	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:46:06,470	[DEBUG]	
2020-12-31 15:46:07,498	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:46:08,531	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:46:11,932	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:46:11,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 15:46:12,935	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:46:12,937	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:46:12,938	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:46:12,938	[DEBUG]	
2020-12-31 15:46:13,962	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:46:13,963	[INFO]	137	SUCCESS	+2.0	
2020-12-31 15:46:13,964	[DEBUG]	
2020-12-31 15:46:14,996	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:46:16,029	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:46:17,091	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:46:18,130	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:46:19,140	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:46:20,205	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:46:23,602	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:46:23,603	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:46:23,604	[INFO]	145	SUCCESS	+2.0	
2020-12-31 15:46:23,604	[DEBUG]	
2020-12-31 15:46:24,644	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:46:39,715	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:46:40,639	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:46:41,566	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:46:44,697	[INFO]	150	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 15:46:44,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:46:44,699	[INFO]	151	SUCCESS	+2.0	
2020-12-31 15:46:44,699	[DEBUG]	
2020-12-31 15:46:45,727	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:46:46,747	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:46:50,176	[INFO]	154	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:46:51,188	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:46:54,519	[INFO]	156	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:46:54,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 15:46:54,521	[INFO]	157	SUCCESS	+2.0	
2020-12-31 15:46:54,522	[DEBUG]	
2020-12-31 15:46:55,540	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:46:56,558	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:46:57,522	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:46:58,552	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:47:01,883	[INFO]	162	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:47:02,877	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 15:47:06,243	[INFO]	164	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:47:06,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 15:47:07,230	[INFO]	165	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:47:07,231	[INFO]	166	SUCCESS	+2.0	
2020-12-31 15:47:07,231	[DEBUG]	
2020-12-31 15:47:08,263	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:47:09,305	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:47:10,335	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:47:11,408	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:47:12,439	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:47:13,395	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:47:16,607	[INFO]	173	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:47:16,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:47:16,609	[INFO]	174	SUCCESS	+2.0	
2020-12-31 15:47:16,609	[DEBUG]	
2020-12-31 15:47:17,616	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:47:18,634	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:47:19,671	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:47:20,713	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:47:21,738	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:47:22,735	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:47:23,770	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:47:24,791	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:47:25,806	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:47:26,835	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:47:27,901	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:47:31,282	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:47:31,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:47:31,284	[INFO]	187	SUCCESS	+2.0	
2020-12-31 15:47:31,285	[DEBUG]	
2020-12-31 15:47:32,290	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:47:33,314	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:47:34,360	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:47:34,365	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:47:35,384	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:47:36,385	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:47:37,396	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:47:38,402	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:47:39,410	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:47:40,438	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:47:41,470	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:47:42,506	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:47:43,524	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:47:44,551	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:47:45,591	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:47:46,582	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:47:47,565	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:47:48,593	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:47:49,621	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:47:50,636	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:47:51,667	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:47:54,953	[INFO]	209	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:47:55,961	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:47:59,373	[INFO]	211	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:47:59,374	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:48:00,412	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:48:01,371	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:48:02,395	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:48:03,424	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:48:04,439	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:48:04,440	[INFO]	217	SUCCESS	+2.0	
2020-12-31 15:48:04,440	[DEBUG]	
2020-12-31 15:48:04,441	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:48:04,441	[DEBUG]	
2020-12-31 15:48:04,442	[INFO]	219	SUCCESS	+2.0	
2020-12-31 15:48:04,442	[DEBUG]	
2020-12-31 15:48:05,464	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:48:05,465	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:48:05,466	[DEBUG]	
2020-12-31 15:48:05,466	[INFO]	222	SUCCESS	+2.0	
2020-12-31 15:48:05,467	[DEBUG]	
2020-12-31 15:48:06,521	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:48:07,552	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:48:08,631	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:48:09,660	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:48:10,684	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:48:11,687	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:48:15,028	[INFO]	229	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:48:16,037	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:48:17,065	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:48:18,077	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:48:19,094	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:48:20,061	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:48:21,150	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:48:22,188	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:48:25,544	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:48:25,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:48:26,577	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:48:26,578	[INFO]	239	SUCCESS	+2.0	
2020-12-31 15:48:26,578	[DEBUG]	
2020-12-31 15:48:27,591	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:48:28,594	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:48:29,626	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:48:30,687	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:48:45,757	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:48:48,621	[INFO]	245	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:48:49,599	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:48:50,653	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:48:54,048	[INFO]	248	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:48:55,080	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:48:56,144	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:48:57,168	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:48:58,203	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:49:13,268	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:49:14,167	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:49:17,058	[INFO]	255	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:49:20,458	[INFO]	256	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:49:21,553	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:49:22,643	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:49:23,750	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:49:24,902	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:49:26,035	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:49:27,144	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:49:28,216	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:49:29,351	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:49:30,444	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:49:31,533	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:49:32,594	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:49:33,626	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:49:36,933	[INFO]	269	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:49:36,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 15:49:36,935	[INFO]	270	SUCCESS	+2.0	
2020-12-31 15:49:36,936	[DEBUG]	
2020-12-31 15:49:37,954	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:49:39,019	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:49:42,425	[INFO]	273	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:49:42,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:49:43,442	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:49:44,489	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:49:45,528	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:49:45,529	[INFO]	277	SUCCESS	+2.0	
2020-12-31 15:49:45,529	[DEBUG]	
2020-12-31 15:49:48,933	[INFO]	278	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:49:48,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:49:48,935	[INFO]	279	SUCCESS	+2.0	
2020-12-31 15:49:48,936	[DEBUG]	
2020-12-31 15:49:49,931	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:49:53,309	[INFO]	281	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:49:54,330	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:49:55,347	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:49:58,694	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:49:58,695	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:49:58,696	[INFO]	285	SUCCESS	+2.0	
2020-12-31 15:49:58,696	[DEBUG]	
2020-12-31 15:49:59,715	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:49:59,717	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:49:59,718	[DEBUG]	
2020-12-31 15:50:00,747	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:50:00,749	[INFO]	289	SUCCESS	+2.0	
2020-12-31 15:50:00,749	[DEBUG]	
2020-12-31 15:50:15,818	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:50:16,756	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:50:19,794	[INFO]	292	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:50:19,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:50:20,769	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:50:21,919	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:50:21,921	[INFO]	295	SUCCESS	+2.0	
2020-12-31 15:50:21,922	[DEBUG]	
2020-12-31 15:50:23,129	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:50:24,163	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:50:25,239	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:50:26,275	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:50:27,316	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:50:28,329	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:50:31,820	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:50:31,821	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 15:50:32,833	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:50:32,834	[INFO]	304	SUCCESS	+2.0	
2020-12-31 15:50:32,835	[DEBUG]	
2020-12-31 15:50:33,911	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:50:33,913	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:50:34,939	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:50:36,328	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:50:37,747	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:50:39,217	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:50:40,589	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:50:44,966	[INFO]	312	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:50:44,967	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:50:45,995	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:50:45,996	[INFO]	314	SUCCESS	+2.0	
2020-12-31 15:50:45,996	[DEBUG]	
2020-12-31 15:50:46,950	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:50:47,990	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:50:51,409	[INFO]	317	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:50:51,410	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:50:51,411	[INFO]	318	SUCCESS	+2.0	
2020-12-31 15:50:51,411	[DEBUG]	
2020-12-31 15:50:52,398	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:50:53,432	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:50:53,436	[INFO]	321	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:50:53,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:50:53,439	[INFO]	322	SUCCESS	+2.0	
2020-12-31 15:50:53,439	[DEBUG]	
2020-12-31 15:50:54,477	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:50:55,510	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:50:56,519	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:50:57,558	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:50:58,606	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:50:59,646	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:51:00,677	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:51:01,720	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:51:02,747	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:51:03,779	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:51:04,822	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:51:05,863	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:51:06,902	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:51:07,932	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:51:08,960	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:51:12,388	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:51:12,389	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:51:13,398	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:51:14,436	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:51:14,437	[INFO]	341	SUCCESS	+2.0	
2020-12-31 15:51:14,437	[DEBUG]	
2020-12-31 15:51:15,484	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:51:16,503	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:51:17,528	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:51:18,474	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:51:19,489	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:51:20,534	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:51:21,594	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:51:22,611	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:51:23,657	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:51:24,666	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:51:25,736	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:51:26,771	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:51:30,084	[INFO]	354	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:51:30,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:51:30,085	[INFO]	355	SUCCESS	+2.0	
2020-12-31 15:51:30,086	[DEBUG]	
2020-12-31 15:51:33,437	[INFO]	356	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:51:33,439	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 15:51:34,449	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:51:34,451	[INFO]	358	SUCCESS	+2.0	
2020-12-31 15:51:34,451	[DEBUG]	
2020-12-31 15:51:37,769	[INFO]	359	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:51:37,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:51:37,770	[INFO]	360	SUCCESS	+2.0	
2020-12-31 15:51:37,771	[DEBUG]	
2020-12-31 15:51:38,770	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:51:42,175	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:51:42,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:51:42,177	[INFO]	363	SUCCESS	+2.0	
2020-12-31 15:51:42,177	[DEBUG]	
2020-12-31 15:51:42,179	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:51:45,554	[INFO]	365	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:51:45,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:51:49,011	[INFO]	366	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:51:49,013	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         Node minNode = null;
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 15:51:50,073	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:51:53,416	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:51:53,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:51:54,460	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:51:54,462	[INFO]	370	SUCCESS	+2.0	
2020-12-31 15:51:54,463	[DEBUG]	
2020-12-31 15:51:55,458	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:51:56,497	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:51:57,524	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:51:58,542	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:52:01,975	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:52:01,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 15:52:01,977	[INFO]	376	SUCCESS	+2.0	
2020-12-31 15:52:01,978	[DEBUG]	
2020-12-31 15:52:05,346	[INFO]	377	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:52:05,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:52:05,348	[INFO]	378	SUCCESS	+2.0	
2020-12-31 15:52:05,348	[DEBUG]	
2020-12-31 15:52:06,287	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:52:07,320	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:52:08,345	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:52:09,425	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:52:10,459	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:52:13,871	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:52:13,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:52:13,873	[INFO]	385	SUCCESS	+2.0	
2020-12-31 15:52:13,873	[DEBUG]	
2020-12-31 15:52:14,867	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:52:18,157	[INFO]	387	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:52:18,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 15:52:21,496	[INFO]	388	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:52:21,497	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,57 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             return Integer.MAX_VALUE;
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:52:24,934	[INFO]	389	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:52:24,936	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 15:52:25,973	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:52:25,974	[INFO]	391	SUCCESS	+2.0	
2020-12-31 15:52:25,975	[DEBUG]	
2020-12-31 15:52:27,024	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:52:42,086	[INFO]	393	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:52:43,050	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:52:43,964	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:52:44,890	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:52:45,844	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:52:46,887	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:52:47,962	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:52:49,014	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:52:52,372	[INFO]	401	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:52:52,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:52:53,393	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:52:56,753	[INFO]	403	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:52:56,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 43,48 ****
--- 41,47 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:53:00,168	[INFO]	404	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 15:53:00,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 43,52 ****
--- 41,52 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             visitedNodes.add(node);
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 15:53:00,171	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:53:00,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 43,48 ****
--- 41,47 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:53:03,524	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:53:03,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
- 
-                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
-                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,40 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
              }
          }
  
***************
*** 43,48 ****
--- 42,48 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:53:03,531	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:53:03,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 43,48 ****
--- 41,47 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:53:06,842	[INFO]	408	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:53:06,844	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:53:06,847	[INFO]	409	SUCCESS	+2.0	
2020-12-31 15:53:06,848	[DEBUG]	
2020-12-31 15:53:10,267	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:53:10,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 15:53:11,275	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:53:12,306	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:53:12,308	[INFO]	413	SUCCESS	+2.0	
2020-12-31 15:53:12,308	[DEBUG]	
2020-12-31 15:53:13,321	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:53:14,373	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:53:15,398	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:53:15,400	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:53:16,451	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:53:19,820	[INFO]	419	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:53:19,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 15:53:19,823	[INFO]	420	SUCCESS	+2.0	
2020-12-31 15:53:19,823	[DEBUG]	
2020-12-31 15:53:20,861	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:53:24,297	[INFO]	422	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:53:24,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:53:24,299	[INFO]	423	SUCCESS	+2.0	
2020-12-31 15:53:24,299	[DEBUG]	
2020-12-31 15:53:25,330	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:53:26,370	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:53:29,812	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:53:29,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:53:44,894	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:53:46,612	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:53:46,613	[INFO]	429	SUCCESS	+2.0	
2020-12-31 15:53:46,613	[DEBUG]	
2020-12-31 15:53:47,708	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:53:48,737	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:53:49,779	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:53:50,812	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:53:54,205	[INFO]	434	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:53:54,206	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:53:55,274	[INFO]	435	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:53:56,321	[INFO]	436	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:53:57,410	[INFO]	437	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:53:57,411	[INFO]	438	SUCCESS	+2.0	
2020-12-31 15:53:57,412	[DEBUG]	
2020-12-31 15:53:58,451	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:53:59,482	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:54:00,510	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:54:03,908	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:54:03,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:54:04,945	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:54:04,946	[INFO]	444	SUCCESS	+2.0	
2020-12-31 15:54:04,946	[DEBUG]	
2020-12-31 15:54:04,947	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:54:04,948	[DEBUG]	
2020-12-31 15:54:04,948	[INFO]	446	SUCCESS	+2.0	
2020-12-31 15:54:04,949	[DEBUG]	
2020-12-31 15:54:08,342	[INFO]	447	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:54:08,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:54:08,344	[INFO]	448	SUCCESS	+2.0	
2020-12-31 15:54:08,344	[DEBUG]	
2020-12-31 15:54:09,345	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:54:12,794	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:54:12,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 15:54:12,796	[INFO]	451	SUCCESS	+2.0	
2020-12-31 15:54:12,796	[DEBUG]	
2020-12-31 15:54:13,830	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:54:17,357	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:54:17,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:54:17,359	[INFO]	454	SUCCESS	+2.0	
2020-12-31 15:54:17,359	[DEBUG]	
2020-12-31 15:54:17,360	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:54:17,361	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 15:54:17,361	[INFO]	456	SUCCESS	+2.0	
2020-12-31 15:54:17,362	[DEBUG]	
2020-12-31 15:54:18,357	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:54:19,405	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:54:20,427	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:54:21,446	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:54:22,473	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:54:23,616	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:54:24,691	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:54:25,805	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:54:26,853	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:54:27,865	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:54:28,908	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:54:28,909	[INFO]	468	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:54:28,910	[DEBUG]	
2020-12-31 15:54:28,910	[INFO]	469	SUCCESS	+2.0	
2020-12-31 15:54:28,911	[DEBUG]	
2020-12-31 15:54:29,934	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:54:30,984	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:54:32,018	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:54:33,047	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:54:34,063	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:54:35,082	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:54:36,511	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:54:37,542	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:54:38,602	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:54:39,630	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:54:39,631	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:54:39,632	[DEBUG]	
2020-12-31 15:54:40,708	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:54:41,810	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:54:56,884	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:54:56,885	[INFO]	484	SUCCESS	+2.0	
2020-12-31 15:54:56,885	[DEBUG]	
2020-12-31 15:54:59,810	[INFO]	485	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:54:59,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:54:59,812	[INFO]	486	SUCCESS	+2.0	
2020-12-31 15:54:59,812	[DEBUG]	
2020-12-31 15:55:00,790	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:55:01,836	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:55:05,211	[INFO]	489	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:55:05,212	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-31 15:55:05,213	[INFO]	490	SUCCESS	+2.0	
2020-12-31 15:55:05,214	[DEBUG]	
2020-12-31 15:55:06,202	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:55:09,612	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:55:09,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 15:55:10,652	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:55:10,653	[INFO]	494	SUCCESS	+2.0	
2020-12-31 15:55:10,654	[DEBUG]	
2020-12-31 15:55:14,073	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:55:14,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 15:55:17,443	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:55:17,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,32 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 15:55:20,825	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:55:20,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:55:21,843	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:55:22,977	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:55:24,068	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:55:24,069	[INFO]	==== END ====
2020-12-31 15:55:24,070	[INFO]	Reason: step budget
2020-12-31 15:55:24,072	[INFO]	
2020-12-31 15:55:24,073	[INFO]	========== EPOCH 14 ==========
2020-12-31 15:55:24,073	[INFO]	==== WARMUP ====
2020-12-31 15:55:27,450	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:55:27,450	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:55:30,851	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:55:30,852	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:55:34,187	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 15:55:34,188	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:55:37,710	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 15:55:37,711	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 15:55:37,711	[INFO]	==== START ====
2020-12-31 15:55:41,123	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:55:41,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 15:55:41,125	[INFO]	2	SUCCESS	+2.0	
2020-12-31 15:55:41,125	[DEBUG]	
2020-12-31 15:55:42,171	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:55:43,186	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:55:44,245	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:55:45,281	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:55:46,316	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:55:47,336	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:55:48,378	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:55:49,395	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:55:50,443	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:55:51,447	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:55:54,750	[INFO]	13	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:55:54,751	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:55:54,752	[INFO]	14	SUCCESS	+2.0	
2020-12-31 15:55:54,752	[DEBUG]	
2020-12-31 15:55:55,910	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:55:57,211	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:55:58,259	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:55:58,260	[INFO]	18	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:55:58,261	[DEBUG]	
2020-12-31 15:55:58,261	[INFO]	19	SUCCESS	+2.0	
2020-12-31 15:55:58,262	[DEBUG]	
2020-12-31 15:55:59,299	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:56:00,332	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:56:01,382	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:56:02,426	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:56:03,434	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:56:04,498	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:56:05,465	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:56:06,464	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:56:07,515	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:56:08,569	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:56:09,600	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:56:10,629	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:56:13,989	[INFO]	32	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:56:13,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:56:15,043	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:56:16,067	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:56:16,069	[INFO]	35	SUCCESS	+2.0	
2020-12-31 15:56:16,070	[DEBUG]	
2020-12-31 15:56:17,133	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:56:18,160	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:56:19,175	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:56:20,197	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:56:21,223	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 15:56:24,621	[INFO]	41	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:56:24,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:56:24,622	[INFO]	42	SUCCESS	+2.0	
2020-12-31 15:56:24,623	[DEBUG]	
2020-12-31 15:56:25,648	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:56:26,687	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:56:27,704	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:56:28,733	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:56:29,757	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:56:33,165	[INFO]	48	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:56:33,166	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 15:56:33,167	[INFO]	49	SUCCESS	+2.0	
2020-12-31 15:56:33,168	[DEBUG]	
2020-12-31 15:56:34,200	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 15:56:35,232	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:56:36,267	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:56:37,336	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:56:38,343	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:56:41,747	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:56:41,749	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:56:42,795	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:56:43,805	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:56:43,806	[INFO]	58	SUCCESS	+2.0	
2020-12-31 15:56:43,807	[DEBUG]	
2020-12-31 15:56:47,166	[INFO]	59	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:56:47,168	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 15:56:48,178	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:56:48,179	[INFO]	61	SUCCESS	+2.0	
2020-12-31 15:56:48,180	[DEBUG]	
2020-12-31 15:56:49,197	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:56:50,212	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:56:51,244	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:56:52,255	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:56:53,224	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:56:54,250	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:56:57,591	[INFO]	68	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:56:57,592	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:56:57,593	[INFO]	69	SUCCESS	+2.0	
2020-12-31 15:56:57,593	[DEBUG]	
2020-12-31 15:56:58,639	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:56:59,700	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:57:00,723	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:57:01,772	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:57:02,787	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:57:03,742	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:57:04,762	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:57:05,790	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:57:06,785	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:57:06,787	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:57:07,816	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:57:08,847	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:57:09,934	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:57:10,981	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:57:14,364	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:57:14,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 15:57:15,319	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 15:57:16,311	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:57:17,329	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:57:18,363	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:57:18,365	[INFO]	89	SUCCESS	+2.0	
2020-12-31 15:57:18,365	[DEBUG]	
2020-12-31 15:57:19,309	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:57:20,323	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:57:21,360	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:57:21,362	[INFO]	93	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:57:21,362	[DEBUG]	
2020-12-31 15:57:24,760	[INFO]	94	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:57:24,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-31 15:57:24,765	[INFO]	95	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:57:24,766	[DEBUG]	
2020-12-31 15:57:28,119	[INFO]	96	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 15:57:28,121	[INFO]	97	SUCCESS	+2.0	
2020-12-31 15:57:28,121	[DEBUG]	
2020-12-31 15:57:29,144	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:57:30,212	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:57:31,247	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 15:57:32,328	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:57:33,352	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 15:57:34,400	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:57:35,498	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:57:36,538	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:57:37,536	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:57:38,566	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:57:39,562	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 15:57:40,588	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 15:57:41,663	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:57:42,716	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:57:43,738	[INFO]	112	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:57:44,775	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:57:45,779	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:57:46,811	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:57:47,851	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:57:48,886	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:57:48,888	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 15:57:48,890	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:57:49,947	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 15:57:51,009	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:57:52,036	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 15:57:53,046	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 15:57:56,415	[INFO]	124	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:57:57,446	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 15:57:57,447	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:57:57,448	[DEBUG]	
2020-12-31 15:58:00,832	[INFO]	127	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:58:00,833	[INFO]	128	SUCCESS	+2.0	
2020-12-31 15:58:00,833	[DEBUG]	
2020-12-31 15:58:01,848	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:58:02,886	[INFO]	130	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-31 15:58:03,925	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:58:04,917	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:58:05,931	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:58:06,971	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:58:10,329	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:58:10,330	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:58:10,331	[INFO]	136	SUCCESS	+2.0	
2020-12-31 15:58:10,331	[DEBUG]	
2020-12-31 15:58:11,433	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:58:14,901	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 15:58:14,902	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 15:58:14,903	[INFO]	139	SUCCESS	+2.0	
2020-12-31 15:58:14,904	[DEBUG]	
2020-12-31 15:58:15,918	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:58:16,982	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:58:17,999	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:58:19,059	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:58:20,099	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 15:58:21,144	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:58:22,165	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:58:22,167	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:58:23,174	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:58:24,196	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:58:25,260	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:58:26,282	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:58:27,310	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:58:28,353	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:58:29,368	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:58:30,404	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:58:31,426	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:58:32,411	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:58:33,450	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:58:34,455	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:58:35,456	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 15:58:36,496	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:58:37,526	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 15:58:38,541	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 15:58:39,561	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 15:58:40,596	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:58:44,472	[INFO]	166	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:58:44,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 15:58:45,545	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:58:45,548	[INFO]	168	SUCCESS	+2.0	
2020-12-31 15:58:45,548	[DEBUG]	
2020-12-31 15:58:46,595	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 15:58:50,006	[INFO]	170	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:58:50,007	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 15:58:53,349	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:58:53,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:58:56,713	[INFO]	172	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:58:56,714	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 15:58:57,746	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:58:57,747	[INFO]	174	SUCCESS	+2.0	
2020-12-31 15:58:57,747	[DEBUG]	
2020-12-31 15:58:58,795	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 15:59:02,217	[INFO]	176	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:59:02,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 15:59:03,235	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:59:04,266	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 15:59:04,268	[INFO]	179	SUCCESS	+2.0	
2020-12-31 15:59:04,268	[DEBUG]	
2020-12-31 15:59:05,275	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:59:06,314	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:59:07,342	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 15:59:08,354	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 15:59:09,382	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:59:10,498	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 15:59:11,458	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:59:12,457	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 15:59:12,459	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 15:59:13,458	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 15:59:14,485	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:59:17,965	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:59:17,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:59:18,958	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:59:18,960	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 15:59:18,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:59:18,962	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 15:59:18,962	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 15:59:18,963	[INFO]	195	SUCCESS	+2.0	
2020-12-31 15:59:18,963	[DEBUG]	
2020-12-31 15:59:19,990	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 15:59:21,037	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:59:22,047	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 15:59:25,462	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:59:25,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:59:26,473	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 15:59:29,835	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 15:59:29,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-31 15:59:29,838	[INFO]	202	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 15:59:29,838	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 15:59:31,003	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 15:59:31,005	[INFO]	204	SUCCESS	+2.0	
2020-12-31 15:59:31,006	[DEBUG]	
2020-12-31 15:59:32,389	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 15:59:35,860	[INFO]	206	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 15:59:36,939	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 15:59:37,984	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 15:59:39,002	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 15:59:40,038	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 15:59:41,054	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 15:59:42,114	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 15:59:43,159	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 15:59:44,188	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 15:59:45,219	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 15:59:46,247	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 15:59:47,285	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 15:59:48,292	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 15:59:49,333	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 15:59:50,337	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:00:05,400	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:00:06,302	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:00:07,198	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:00:08,112	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:00:09,018	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:00:09,935	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:00:10,937	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:00:14,295	[INFO]	228	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:00:14,296	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-31 16:00:14,297	[INFO]	229	SUCCESS	+2.0	
2020-12-31 16:00:14,297	[DEBUG]	
2020-12-31 16:00:15,358	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:00:16,395	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:00:16,396	[INFO]	232	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:00:16,397	[DEBUG]	
2020-12-31 16:00:19,862	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:00:19,863	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:00:20,867	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:00:24,260	[INFO]	235	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:00:27,721	[INFO]	236	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:00:27,723	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  
***************
*** 46,51 ****
--- 47,53 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:00:28,747	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:00:29,777	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:00:30,822	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:00:34,255	[INFO]	240	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:00:34,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 16:00:34,257	[INFO]	241	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:00:34,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 16:00:35,421	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:00:36,870	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:00:36,872	[INFO]	244	SUCCESS	+2.0	
2020-12-31 16:00:36,873	[DEBUG]	
2020-12-31 16:00:40,946	[INFO]	245	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:00:40,947	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 16:00:40,948	[INFO]	246	SUCCESS	+2.0	
2020-12-31 16:00:40,948	[DEBUG]	
2020-12-31 16:00:42,029	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:00:43,054	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:00:44,112	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:00:45,153	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:00:46,242	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:00:47,306	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:00:48,368	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:00:49,380	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:00:52,792	[INFO]	255	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:00:53,854	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:00:57,241	[INFO]	257	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:00:58,256	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:00:59,274	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:01:00,324	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:01:01,332	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:01:02,361	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:01:03,403	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:01:04,416	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:01:07,827	[INFO]	265	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:01:08,838	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:01:09,923	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:01:13,347	[INFO]	268	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:01:14,391	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:01:15,385	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:01:16,436	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:01:17,501	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:01:20,991	[INFO]	273	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:01:21,942	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:01:25,378	[INFO]	275	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:01:25,379	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:01:28,619	[INFO]	276	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:01:28,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:01:31,861	[INFO]	277	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:01:31,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:01:31,863	[INFO]	278	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:01:31,863	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:01:32,830	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:01:33,847	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:01:34,874	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:01:34,876	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:01:34,876	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:01:34,877	[INFO]	283	SUCCESS	+2.0	
2020-12-31 16:01:34,877	[DEBUG]	
2020-12-31 16:01:35,954	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:01:39,383	[INFO]	285	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:01:40,430	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:01:41,516	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-31 16:01:42,619	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:01:43,685	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:01:44,717	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:01:45,761	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:01:49,101	[INFO]	292	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:01:49,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:01:50,110	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:01:50,112	[INFO]	294	SUCCESS	+2.0	
2020-12-31 16:01:50,112	[DEBUG]	
2020-12-31 16:01:51,132	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:01:52,162	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:01:53,206	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:01:54,226	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:01:55,228	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:01:58,541	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:01:58,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:01:59,586	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:02:00,605	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:02:03,978	[INFO]	303	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:02:03,979	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
- 
-                 if (unvisitedNodes.get(nextnode) == null) {
-                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,39 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:02:07,288	[INFO]	304	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:02:07,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:02:07,290	[INFO]	305	SUCCESS	+2.0	
2020-12-31 16:02:07,290	[DEBUG]	
2020-12-31 16:02:10,683	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:02:10,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:02:11,674	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:02:12,686	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:02:12,687	[INFO]	309	SUCCESS	+2.0	
2020-12-31 16:02:12,688	[DEBUG]	
2020-12-31 16:02:13,716	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:02:14,738	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:02:15,753	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:02:15,754	[INFO]	313	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:02:15,754	[DEBUG]	
2020-12-31 16:02:15,755	[INFO]	314	SUCCESS	+2.0	
2020-12-31 16:02:15,755	[DEBUG]	
2020-12-31 16:02:16,770	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:02:17,791	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:02:18,806	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:02:19,805	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:02:20,832	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:02:21,857	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:02:22,908	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:02:26,283	[INFO]	322	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:02:29,606	[INFO]	323	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:02:30,687	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:02:31,724	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:02:32,757	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:02:33,929	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:02:35,182	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:02:36,231	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:02:37,315	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:02:38,361	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:02:39,350	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:02:42,758	[INFO]	333	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:02:42,759	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:02:42,760	[INFO]	334	SUCCESS	+2.0	
2020-12-31 16:02:42,760	[DEBUG]	
2020-12-31 16:02:43,776	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:02:47,155	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:02:47,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:02:48,178	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:02:48,179	[INFO]	338	SUCCESS	+2.0	
2020-12-31 16:02:48,179	[DEBUG]	
2020-12-31 16:02:49,207	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:02:50,229	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:02:51,250	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:02:52,271	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:02:52,273	[INFO]	343	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:02:52,273	[DEBUG]	
2020-12-31 16:02:53,310	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:02:54,341	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:02:54,342	[INFO]	346	SUCCESS	+2.0	
2020-12-31 16:02:54,343	[DEBUG]	
2020-12-31 16:02:55,372	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:02:58,771	[INFO]	348	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:02:58,772	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:02:59,803	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:02:59,804	[INFO]	350	SUCCESS	+2.0	
2020-12-31 16:02:59,805	[DEBUG]	
2020-12-31 16:03:00,749	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:03:04,068	[INFO]	352	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:03:04,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:03:05,078	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:03:06,102	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:03:06,103	[INFO]	355	SUCCESS	+2.0	
2020-12-31 16:03:06,104	[DEBUG]	
2020-12-31 16:03:07,100	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:03:08,125	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:03:09,172	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:03:10,194	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:03:11,212	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:03:12,229	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:03:15,592	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:03:15,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:03:16,619	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:03:16,622	[INFO]	364	SUCCESS	+2.0	
2020-12-31 16:03:16,623	[DEBUG]	
2020-12-31 16:03:17,635	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:03:18,670	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:03:19,709	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:03:23,093	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:03:23,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:03:24,087	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:03:25,155	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:03:26,179	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:03:27,206	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:03:28,243	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:03:28,244	[INFO]	374	SUCCESS	+2.0	
2020-12-31 16:03:28,244	[DEBUG]	
2020-12-31 16:03:28,245	[INFO]	375	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:03:28,245	[DEBUG]	
2020-12-31 16:03:29,269	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:03:29,271	[INFO]	377	SUCCESS	+2.0	
2020-12-31 16:03:29,271	[DEBUG]	
2020-12-31 16:03:30,307	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:03:31,305	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:03:32,339	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:03:47,401	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:03:50,372	[INFO]	382	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:03:51,261	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:03:54,590	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:03:54,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:03:54,591	[INFO]	385	SUCCESS	+2.0	
2020-12-31 16:03:54,592	[DEBUG]	
2020-12-31 16:03:57,996	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:03:57,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:03:59,011	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:03:59,012	[INFO]	388	SUCCESS	+2.0	
2020-12-31 16:03:59,013	[DEBUG]	
2020-12-31 16:04:00,037	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:04:01,112	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:04:02,148	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:04:03,180	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:04:04,230	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:04:05,250	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:04:06,271	[INFO]	395	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:04:07,290	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:04:08,332	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:04:09,367	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:04:10,402	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:04:11,442	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:04:12,455	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:04:15,918	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:04:15,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:04:15,919	[INFO]	403	SUCCESS	+2.0	
2020-12-31 16:04:15,920	[DEBUG]	
2020-12-31 16:04:19,269	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:04:19,272	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:04:19,275	[INFO]	405	SUCCESS	+2.0	
2020-12-31 16:04:19,276	[DEBUG]	
2020-12-31 16:04:20,276	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:04:21,298	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:04:22,323	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:04:23,346	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:04:24,382	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:04:27,761	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:04:27,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:04:28,831	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:04:29,869	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:04:29,872	[INFO]	414	SUCCESS	+2.0	
2020-12-31 16:04:29,873	[DEBUG]	
2020-12-31 16:04:30,919	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:04:31,949	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:04:35,374	[INFO]	417	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:04:35,375	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:04:35,376	[INFO]	418	SUCCESS	+2.0	
2020-12-31 16:04:35,376	[DEBUG]	
2020-12-31 16:04:36,380	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:04:39,748	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:04:39,749	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:04:40,819	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:04:41,899	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:04:42,928	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:04:43,997	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:04:45,037	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:04:45,039	[INFO]	426	SUCCESS	+2.0	
2020-12-31 16:04:45,039	[DEBUG]	
2020-12-31 16:04:46,040	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:04:47,069	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:04:48,087	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:04:51,528	[INFO]	430	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:04:52,515	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:04:53,535	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:04:56,920	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:04:56,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:05:00,191	[INFO]	434	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:05:00,193	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;
***************
*** 52,57 ****
--- 41,53 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:05:03,558	[INFO]	435	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:05:03,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:05:03,560	[INFO]	436	SUCCESS	+2.0	
2020-12-31 16:05:03,560	[DEBUG]	
2020-12-31 16:05:04,578	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:05:04,580	[INFO]	438	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:05:04,580	[DEBUG]	
2020-12-31 16:05:04,581	[INFO]	439	SUCCESS	+2.0	
2020-12-31 16:05:04,581	[DEBUG]	
2020-12-31 16:05:05,617	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:05:06,678	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:05:07,681	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:05:08,708	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:05:09,737	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:05:10,773	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:05:11,795	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:05:12,832	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:05:13,911	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:05:14,956	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:05:15,960	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:05:17,049	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:05:18,069	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:05:21,555	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:05:21,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:05:22,665	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:05:23,748	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:05:27,412	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:05:27,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 18,23 ****
--- 19,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:05:30,891	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:05:30,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 16:05:30,893	[INFO]	458	SUCCESS	+2.0	
2020-12-31 16:05:30,894	[DEBUG]	
2020-12-31 16:05:31,958	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:05:33,000	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:05:34,024	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:05:35,116	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:05:36,193	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:05:37,212	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:05:40,630	[INFO]	465	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:05:40,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:05:40,632	[INFO]	466	SUCCESS	+2.0	
2020-12-31 16:05:40,633	[DEBUG]	
2020-12-31 16:05:41,705	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:05:45,090	[INFO]	468	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:05:46,132	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:05:47,152	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:05:50,532	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:05:50,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 16:05:51,615	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:05:51,616	[INFO]	473	SUCCESS	+2.0	
2020-12-31 16:05:51,616	[DEBUG]	
2020-12-31 16:05:52,649	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:05:53,693	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:05:54,693	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:05:55,711	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:05:56,751	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:06:00,433	[INFO]	479	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:06:00,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 16:06:00,434	[INFO]	480	SUCCESS	+2.0	
2020-12-31 16:06:00,435	[DEBUG]	
2020-12-31 16:06:01,469	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:06:02,509	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:06:03,556	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:06:04,583	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:06:07,959	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:06:07,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 16:06:09,046	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:06:12,519	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:06:12,521	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 24,29 ****
--- 36,54 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:06:13,581	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:06:13,583	[INFO]	489	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:06:13,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 16:06:17,008	[INFO]	490	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:06:17,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,28 ****
--- 17,41 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:06:20,366	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:06:20,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:06:20,371	[INFO]	492	SUCCESS	+2.0	
2020-12-31 16:06:20,372	[DEBUG]	
2020-12-31 16:06:21,396	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:06:22,406	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:06:23,430	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:06:24,452	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:06:25,508	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:06:26,548	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:06:29,987	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:06:29,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 16:06:31,031	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:06:31,032	[INFO]	==== END ====
2020-12-31 16:06:31,032	[INFO]	Reason: step budget
2020-12-31 16:06:31,033	[INFO]	
2020-12-31 16:06:31,033	[INFO]	========== EPOCH 15 ==========
2020-12-31 16:06:31,033	[INFO]	==== WARMUP ====
2020-12-31 16:06:34,367	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:06:34,367	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:06:37,716	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:06:37,716	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:06:41,033	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:06:41,033	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:06:44,543	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 16:06:44,543	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:06:44,544	[INFO]	==== START ====
2020-12-31 16:06:47,860	[INFO]	1	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:06:47,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 16:06:47,862	[INFO]	2	SUCCESS	+2.0	
2020-12-31 16:06:47,863	[DEBUG]	
2020-12-31 16:06:51,204	[INFO]	3	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:06:51,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:06:51,206	[INFO]	4	SUCCESS	+2.0	
2020-12-31 16:06:51,207	[DEBUG]	
2020-12-31 16:06:52,173	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:06:55,535	[INFO]	6	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:06:55,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:06:56,584	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:06:56,585	[INFO]	8	SUCCESS	+2.0	
2020-12-31 16:06:56,586	[DEBUG]	
2020-12-31 16:06:57,615	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:06:58,646	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:06:59,682	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:07:00,688	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:07:01,711	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:07:02,739	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:07:03,762	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:07:07,162	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:07:07,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:07:07,165	[INFO]	17	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:07:07,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:07:07,166	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:07:07,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:07:07,168	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:07:07,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:07:08,216	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:07:08,218	[INFO]	21	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:07:08,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:07:08,219	[INFO]	22	SUCCESS	+2.0	
2020-12-31 16:07:08,219	[DEBUG]	
2020-12-31 16:07:09,262	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:07:10,293	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:07:11,342	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:07:12,349	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:07:13,371	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:07:16,718	[INFO]	28	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:07:17,747	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:07:18,752	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:07:22,132	[INFO]	31	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:07:22,133	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:07:23,615	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:07:23,616	[INFO]	33	SUCCESS	+2.0	
2020-12-31 16:07:23,616	[DEBUG]	
2020-12-31 16:07:24,665	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:07:25,716	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:07:26,738	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:07:30,025	[INFO]	37	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:07:30,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:07:30,027	[INFO]	38	SUCCESS	+2.0	
2020-12-31 16:07:30,028	[DEBUG]	
2020-12-31 16:07:31,032	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:07:32,076	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:07:33,098	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:07:34,130	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:07:35,156	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:07:36,220	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:07:37,235	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:07:38,256	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:07:39,301	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:07:40,314	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:07:41,360	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:07:42,436	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:07:43,445	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:07:44,475	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:07:45,520	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:07:46,558	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:07:47,599	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:07:48,594	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:07:49,615	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:07:50,641	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:07:51,661	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:07:52,644	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:07:53,669	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:07:57,073	[INFO]	62	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:07:57,075	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:07:57,075	[INFO]	63	SUCCESS	+2.0	
2020-12-31 16:07:57,076	[DEBUG]	
2020-12-31 16:07:58,018	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:07:59,059	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:08:00,084	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:08:01,155	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:08:04,520	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:08:04,521	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:08:05,450	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:08:05,452	[INFO]	70	SUCCESS	+2.0	
2020-12-31 16:08:05,452	[DEBUG]	
2020-12-31 16:08:06,469	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:08:07,531	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:08:07,532	[INFO]	73	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:08:07,533	[DEBUG]	
2020-12-31 16:08:08,550	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:08:09,600	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:08:09,601	[INFO]	76	SUCCESS	+2.0	
2020-12-31 16:08:09,601	[DEBUG]	
2020-12-31 16:08:10,669	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:08:11,701	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:08:12,756	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:08:13,819	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:08:14,873	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:08:15,903	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:08:16,914	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:08:17,933	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:08:18,967	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:08:19,980	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:08:21,039	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:08:22,068	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:08:23,095	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:08:24,108	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:08:27,560	[INFO]	91	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:08:27,562	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:08:28,565	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:08:28,567	[INFO]	93	SUCCESS	+2.0	
2020-12-31 16:08:28,567	[DEBUG]	
2020-12-31 16:08:29,601	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:08:30,667	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:08:34,106	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:08:34,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:08:35,163	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:08:35,164	[INFO]	98	SUCCESS	+2.0	
2020-12-31 16:08:35,165	[DEBUG]	
2020-12-31 16:08:36,191	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:08:37,241	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:08:38,267	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:08:39,276	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:08:40,304	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:08:43,714	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:08:43,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 16:08:43,716	[INFO]	105	SUCCESS	+2.0	
2020-12-31 16:08:43,716	[DEBUG]	
2020-12-31 16:08:44,735	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:08:45,832	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:08:49,284	[INFO]	108	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:08:49,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:08:49,286	[INFO]	109	SUCCESS	+2.0	
2020-12-31 16:08:49,286	[DEBUG]	
2020-12-31 16:08:50,270	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:08:53,655	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:08:53,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:08:53,658	[INFO]	112	SUCCESS	+2.0	
2020-12-31 16:08:53,658	[DEBUG]	
2020-12-31 16:08:54,651	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:08:55,728	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:08:56,715	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:09:00,115	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:09:00,116	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:09:01,102	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:09:02,181	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:09:02,182	[INFO]	119	SUCCESS	+2.0	
2020-12-31 16:09:02,182	[DEBUG]	
2020-12-31 16:09:03,208	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:09:04,243	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:09:05,271	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:09:06,295	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:09:07,317	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:09:07,318	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:09:08,343	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:09:23,419	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:09:24,352	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:09:25,260	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:09:26,176	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:09:29,436	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:09:29,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:32,878	[INFO]	132	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:09:32,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 34,39 ****
--- 35,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:32,880	[INFO]	133	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:09:32,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:33,902	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:09:34,932	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:09:38,263	[INFO]	136	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:09:38,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,45 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:39,303	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:09:42,753	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:09:42,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:46,230	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:09:46,231	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:09:49,514	[INFO]	140	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:09:49,515	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:09:50,575	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:09:50,577	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:09:50,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:09:50,578	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:09:50,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:09:50,579	[INFO]	144	SUCCESS	+2.0	
2020-12-31 16:09:50,580	[DEBUG]	
2020-12-31 16:09:53,869	[INFO]	145	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:09:53,870	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:09:54,834	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:09:55,895	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:09:55,896	[INFO]	148	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:09:55,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:09:59,254	[INFO]	149	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:10:00,187	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:10:01,209	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:10:04,682	[INFO]	152	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:10:04,683	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,31 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
!             visitedNodes.add(node);
! 
!             for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 37,42 ****
--- 33,43 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:10:05,709	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:10:05,717	[INFO]	154	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:10:05,720	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,31 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
!             visitedNodes.add(node);
! 
!             for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 37,42 ****
--- 33,43 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:10:06,685	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:10:10,334	[INFO]	156	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:10:10,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:10:10,339	[INFO]	157	SUCCESS	+2.0	
2020-12-31 16:10:10,340	[DEBUG]	
2020-12-31 16:10:11,389	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:10:12,395	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:10:13,418	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:10:14,439	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:10:14,441	[INFO]	162	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:10:14,441	[DEBUG]	
2020-12-31 16:10:15,457	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:10:15,458	[INFO]	164	SUCCESS	+2.0	
2020-12-31 16:10:15,458	[DEBUG]	
2020-12-31 16:10:18,842	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:10:18,843	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:10:18,844	[INFO]	166	SUCCESS	+2.0	
2020-12-31 16:10:18,844	[DEBUG]	
2020-12-31 16:10:19,866	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:10:20,891	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:10:24,285	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:10:24,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:10:24,287	[INFO]	170	SUCCESS	+2.0	
2020-12-31 16:10:24,287	[DEBUG]	
2020-12-31 16:10:27,691	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:10:27,692	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:10:27,693	[INFO]	172	SUCCESS	+2.0	
2020-12-31 16:10:27,693	[DEBUG]	
2020-12-31 16:10:28,704	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:10:32,071	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:10:32,073	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:10:32,073	[INFO]	175	SUCCESS	+2.0	
2020-12-31 16:10:32,074	[DEBUG]	
2020-12-31 16:10:33,085	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:10:34,027	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:10:38,597	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:10:38,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:10:40,041	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:10:41,298	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:10:42,603	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:10:42,605	[INFO]	182	SUCCESS	+2.0	
2020-12-31 16:10:42,606	[DEBUG]	
2020-12-31 16:10:43,984	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:10:45,381	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:10:46,514	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:10:49,950	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:10:49,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:10:50,968	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:10:50,969	[INFO]	188	SUCCESS	+2.0	
2020-12-31 16:10:50,970	[DEBUG]	
2020-12-31 16:10:51,977	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:10:52,999	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:10:56,366	[INFO]	191	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:10:56,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:10:56,367	[INFO]	192	SUCCESS	+2.0	
2020-12-31 16:10:56,368	[DEBUG]	
2020-12-31 16:10:57,367	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:10:58,423	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:10:59,467	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:11:02,932	[INFO]	196	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:11:02,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:11:02,933	[INFO]	197	SUCCESS	+2.0	
2020-12-31 16:11:02,934	[DEBUG]	
2020-12-31 16:11:03,942	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:11:03,944	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:11:04,969	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:11:08,358	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:11:08,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:11:08,360	[INFO]	202	SUCCESS	+2.0	
2020-12-31 16:11:08,361	[DEBUG]	
2020-12-31 16:11:09,429	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:11:12,811	[INFO]	204	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:11:12,812	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:11:12,813	[INFO]	205	SUCCESS	+2.0	
2020-12-31 16:11:12,813	[DEBUG]	
2020-12-31 16:11:13,846	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:11:14,889	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:11:18,293	[INFO]	208	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:11:19,324	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:11:20,378	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:11:21,419	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:11:22,436	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:11:25,856	[INFO]	213	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:11:25,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:11:26,870	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:11:27,904	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:11:28,922	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:11:29,944	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:11:30,966	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:11:34,321	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:11:34,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:11:34,324	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:11:34,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:11:34,325	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:11:34,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:11:35,369	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:11:38,745	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:11:38,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:11:42,232	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:11:42,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,40 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-31 16:11:42,235	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:11:42,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:11:42,236	[INFO]	226	SUCCESS	+2.0	
2020-12-31 16:11:42,237	[DEBUG]	
2020-12-31 16:11:43,224	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:11:44,237	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:11:45,308	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:11:46,339	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:11:47,411	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:11:48,438	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:11:49,466	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:11:50,485	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:11:51,498	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:11:52,518	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:11:55,924	[INFO]	237	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:11:56,932	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:11:57,886	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:11:58,903	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:11:58,904	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:11:59,935	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:12:00,958	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:12:01,994	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:12:03,027	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:12:04,040	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:12:05,095	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:12:08,494	[INFO]	248	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:12:08,495	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:12:08,496	[INFO]	249	SUCCESS	+2.0	
2020-12-31 16:12:08,496	[DEBUG]	
2020-12-31 16:12:09,462	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:12:10,473	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:12:11,502	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:12:12,546	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:12:12,547	[INFO]	254	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:12:12,548	[DEBUG]	
2020-12-31 16:12:12,548	[INFO]	255	SUCCESS	+2.0	
2020-12-31 16:12:12,549	[DEBUG]	
2020-12-31 16:12:13,627	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:12:14,678	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:12:15,710	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:12:19,088	[INFO]	259	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-31 16:12:20,102	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:12:21,153	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:12:22,182	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:12:23,192	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:12:24,196	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:12:27,655	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:12:27,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:12:28,661	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:12:28,662	[INFO]	267	SUCCESS	+2.0	
2020-12-31 16:12:28,662	[DEBUG]	
2020-12-31 16:12:29,715	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:12:33,071	[INFO]	269	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:12:33,072	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 16:12:34,116	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:12:34,118	[INFO]	271	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:12:34,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 16:12:35,131	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:12:36,197	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:12:37,233	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:12:38,255	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:12:39,273	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:12:40,696	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:12:40,697	[INFO]	278	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:12:40,698	[DEBUG]	
2020-12-31 16:12:40,698	[INFO]	279	SUCCESS	+2.0	
2020-12-31 16:12:40,699	[DEBUG]	
2020-12-31 16:12:44,121	[INFO]	280	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:12:44,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:12:45,155	[INFO]	281	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:12:45,156	[INFO]	282	SUCCESS	+2.0	
2020-12-31 16:12:45,157	[DEBUG]	
2020-12-31 16:12:46,178	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:12:47,247	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:12:50,577	[INFO]	285	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:12:50,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-31 16:12:50,578	[INFO]	286	SUCCESS	+2.0	
2020-12-31 16:12:50,579	[DEBUG]	
2020-12-31 16:12:51,591	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:12:52,594	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:12:53,629	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:12:54,679	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:12:55,769	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:12:59,149	[INFO]	292	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:12:59,150	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:13:00,097	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:13:00,098	[INFO]	294	SUCCESS	+2.0	
2020-12-31 16:13:00,098	[DEBUG]	
2020-12-31 16:13:01,130	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:13:04,491	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:13:04,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:13:04,494	[INFO]	297	SUCCESS	+2.0	
2020-12-31 16:13:04,494	[DEBUG]	
2020-12-31 16:13:05,504	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:13:08,866	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:13:08,867	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:13:08,868	[INFO]	300	SUCCESS	+2.0	
2020-12-31 16:13:08,868	[DEBUG]	
2020-12-31 16:13:09,875	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:13:10,860	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:13:11,887	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:13:12,933	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:13:13,958	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:13:14,961	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:13:15,980	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:13:16,982	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:13:17,980	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:13:21,354	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:13:21,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:13:22,377	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:13:23,413	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:13:23,414	[INFO]	313	SUCCESS	+2.0	
2020-12-31 16:13:23,414	[DEBUG]	
2020-12-31 16:13:24,485	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:13:25,580	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:13:26,608	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:13:26,609	[INFO]	317	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:13:26,609	[DEBUG]	
2020-12-31 16:13:27,642	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:13:27,643	[INFO]	319	SUCCESS	+2.0	
2020-12-31 16:13:27,644	[DEBUG]	
2020-12-31 16:13:27,645	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:13:28,626	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:13:31,928	[INFO]	322	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:13:32,942	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:13:33,953	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:13:34,992	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:13:36,013	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:13:37,065	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:13:38,117	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:13:39,139	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:13:40,190	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:13:41,308	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:13:42,356	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:13:43,383	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:13:44,406	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:13:45,448	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:13:46,450	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:13:47,572	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:13:48,688	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:13:49,720	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:13:50,818	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:13:51,827	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:13:52,837	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:13:53,859	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:13:54,850	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:13:55,890	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:13:56,898	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:13:57,909	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:13:58,932	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:13:59,947	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:14:00,984	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:14:02,008	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:14:03,046	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:14:04,011	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:14:07,393	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:14:07,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:14:08,387	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:14:08,388	[INFO]	356	SUCCESS	+2.0	
2020-12-31 16:14:08,389	[DEBUG]	
2020-12-31 16:14:09,451	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:14:10,483	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:14:11,522	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:14:12,550	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:14:13,563	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:14:14,578	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:14:18,003	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:14:18,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 16:14:18,005	[INFO]	364	SUCCESS	+2.0	
2020-12-31 16:14:18,006	[DEBUG]	
2020-12-31 16:14:21,360	[INFO]	365	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:14:21,361	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 16:14:21,362	[INFO]	366	SUCCESS	+2.0	
2020-12-31 16:14:21,362	[DEBUG]	
2020-12-31 16:14:22,371	[INFO]	367	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:14:23,408	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:14:24,444	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:14:25,473	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:14:26,477	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:14:26,478	[INFO]	372	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:14:26,479	[DEBUG]	
2020-12-31 16:14:27,525	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:14:28,565	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:14:29,599	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:14:30,660	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:14:30,662	[INFO]	377	SUCCESS	+2.0	
2020-12-31 16:14:30,662	[DEBUG]	
2020-12-31 16:14:31,832	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:14:32,821	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:14:33,840	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:14:37,211	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:14:37,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:14:37,215	[INFO]	382	SUCCESS	+2.0	
2020-12-31 16:14:37,216	[DEBUG]	
2020-12-31 16:14:38,386	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:14:39,423	[INFO]	384	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:14:40,458	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 16:14:41,441	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:14:42,472	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:14:45,839	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:14:45,840	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:14:45,841	[INFO]	389	SUCCESS	+2.0	
2020-12-31 16:14:45,842	[DEBUG]	
2020-12-31 16:14:46,884	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:14:48,011	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:14:51,405	[INFO]	392	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:14:52,421	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:14:55,812	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:14:55,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 16:14:56,843	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:14:56,844	[INFO]	396	SUCCESS	+2.0	
2020-12-31 16:14:56,845	[DEBUG]	
2020-12-31 16:14:57,845	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:14:58,873	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:14:59,891	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:15:00,876	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:15:04,166	[INFO]	401	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:15:04,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:15:04,169	[INFO]	402	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:15:04,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:15:05,179	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:15:08,558	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:15:08,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,33 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:15:08,560	[INFO]	405	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:15:08,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,33 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:15:11,895	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:15:11,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:15:11,897	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:15:11,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:15:12,906	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:15:12,907	[INFO]	409	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:15:12,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:15:12,909	[INFO]	410	SUCCESS	+2.0	
2020-12-31 16:15:12,909	[DEBUG]	
2020-12-31 16:15:13,958	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:15:14,968	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:15:16,035	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:15:17,077	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:15:18,127	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:15:21,474	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:15:21,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:15:21,476	[INFO]	417	SUCCESS	+2.0	
2020-12-31 16:15:21,477	[DEBUG]	
2020-12-31 16:15:24,795	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:15:24,796	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-31 16:15:24,797	[INFO]	419	SUCCESS	+2.0	
2020-12-31 16:15:24,798	[DEBUG]	
2020-12-31 16:15:25,802	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:15:26,836	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:15:27,788	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:15:28,810	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:15:32,185	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:15:32,186	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:15:33,195	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:15:34,304	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 16:15:34,305	[INFO]	427	SUCCESS	+2.0	
2020-12-31 16:15:34,305	[DEBUG]	
2020-12-31 16:15:37,852	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:15:37,854	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:15:38,887	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:15:38,890	[INFO]	430	SUCCESS	+2.0	
2020-12-31 16:15:38,891	[DEBUG]	
2020-12-31 16:15:39,958	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:15:41,056	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:15:42,124	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:15:45,540	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:15:45,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:15:45,542	[INFO]	435	SUCCESS	+2.0	
2020-12-31 16:15:45,542	[DEBUG]	
2020-12-31 16:15:46,585	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:15:47,574	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:15:48,602	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:15:49,732	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:15:50,802	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:15:54,203	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:15:54,204	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:15:55,197	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:15:55,199	[INFO]	443	SUCCESS	+2.0	
2020-12-31 16:15:55,199	[DEBUG]	
2020-12-31 16:15:56,227	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:15:57,282	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:15:58,320	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:15:59,365	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:16:00,412	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:16:01,420	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:16:02,490	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:16:03,515	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:16:06,885	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:16:06,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 16:16:06,887	[INFO]	453	SUCCESS	+2.0	
2020-12-31 16:16:06,887	[DEBUG]	
2020-12-31 16:16:10,331	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:16:10,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:16:11,348	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:16:11,349	[INFO]	456	SUCCESS	+2.0	
2020-12-31 16:16:11,350	[DEBUG]	
2020-12-31 16:16:12,364	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:16:13,410	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:16:14,414	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:16:15,431	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:16:16,489	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:16:17,528	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:16:21,397	[INFO]	463	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:16:21,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:16:21,399	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:16:21,400	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:16:21,401	[INFO]	465	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:16:21,401	[DEBUG]	
2020-12-31 16:16:22,525	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:16:22,526	[INFO]	467	SUCCESS	+2.0	
2020-12-31 16:16:22,526	[DEBUG]	
2020-12-31 16:16:23,543	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:16:24,582	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:16:25,587	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:16:26,592	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:16:29,941	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:16:29,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 16:16:30,955	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:16:31,998	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:16:32,001	[INFO]	475	SUCCESS	+2.0	
2020-12-31 16:16:32,002	[DEBUG]	
2020-12-31 16:16:33,027	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:16:36,407	[INFO]	477	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:16:36,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:16:39,855	[INFO]	478	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:16:39,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:16:40,907	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:16:44,379	[INFO]	480	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:16:44,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:16:45,398	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:16:45,399	[INFO]	482	SUCCESS	+2.0	
2020-12-31 16:16:45,399	[DEBUG]	
2020-12-31 16:16:46,500	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:16:49,838	[INFO]	484	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:16:50,839	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:16:50,841	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:16:50,841	[DEBUG]	
2020-12-31 16:16:50,842	[INFO]	487	SUCCESS	+2.0	
2020-12-31 16:16:50,842	[DEBUG]	
2020-12-31 16:16:54,183	[INFO]	488	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-31 16:16:54,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:16:55,218	[INFO]	489	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:16:55,219	[INFO]	490	SUCCESS	+2.0	
2020-12-31 16:16:55,219	[DEBUG]	
2020-12-31 16:16:58,583	[INFO]	491	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:16:58,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:16:58,585	[INFO]	492	SUCCESS	+2.0	
2020-12-31 16:16:58,585	[DEBUG]	
2020-12-31 16:16:59,603	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:17:00,634	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:17:01,671	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:17:02,726	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:17:03,742	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:17:07,130	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:17:07,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 16:17:08,065	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:17:09,145	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:17:09,146	[INFO]	==== END ====
2020-12-31 16:17:09,146	[INFO]	Reason: step budget
2020-12-31 16:17:09,148	[INFO]	
2020-12-31 16:17:09,148	[INFO]	========== EPOCH 16 ==========
2020-12-31 16:17:09,149	[INFO]	==== WARMUP ====
2020-12-31 16:17:12,544	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:17:12,544	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:17:15,862	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:17:15,862	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:17:19,294	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:17:19,294	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:17:22,692	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 16:17:22,692	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:17:22,692	[INFO]	==== START ====
2020-12-31 16:17:23,735	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:17:25,147	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:17:26,191	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:17:27,201	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:17:27,202	[INFO]	5	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:17:27,203	[DEBUG]	
2020-12-31 16:17:28,231	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:17:29,318	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:17:29,319	[INFO]	8	SUCCESS	+2.0	
2020-12-31 16:17:29,319	[DEBUG]	
2020-12-31 16:17:30,332	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:17:31,421	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:17:32,435	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:17:33,464	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:17:34,481	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:17:35,527	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:17:36,543	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:17:39,866	[INFO]	16	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:17:40,883	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:17:41,923	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:17:42,945	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:17:43,958	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:17:44,984	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:17:44,986	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:17:48,322	[INFO]	23	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:17:48,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:17:48,324	[INFO]	24	SUCCESS	+2.0	
2020-12-31 16:17:48,324	[DEBUG]	
2020-12-31 16:17:49,360	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:17:50,387	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:17:51,413	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:17:52,447	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:17:53,457	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:17:54,477	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:17:55,493	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:17:56,490	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:17:59,950	[INFO]	33	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:18:00,974	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:18:02,006	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:18:03,035	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:18:03,036	[INFO]	37	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:18:03,036	[DEBUG]	
2020-12-31 16:18:06,462	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:18:06,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:18:06,464	[INFO]	39	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:18:06,465	[DEBUG]	
2020-12-31 16:18:06,466	[INFO]	40	SUCCESS	+2.0	
2020-12-31 16:18:06,466	[DEBUG]	
2020-12-31 16:18:09,836	[INFO]	41	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:18:09,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:10,825	[INFO]	42	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:18:14,213	[INFO]	43	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:18:14,214	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:15,206	[INFO]	44	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:18:16,223	[INFO]	45	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:18:16,225	[INFO]	46	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:18:16,226	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:17,349	[INFO]	47	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:18:17,351	[INFO]	48	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:18:17,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:17,352	[INFO]	49	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:18:17,352	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:17,353	[INFO]	50	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:18:17,354	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:18,344	[INFO]	51	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:18:18,345	[INFO]	52	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:18:18,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:18:18,347	[INFO]	53	SUCCESS	+2.0	
2020-12-31 16:18:18,347	[DEBUG]	
2020-12-31 16:18:21,656	[INFO]	54	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:18:21,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:21,660	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:18:21,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:21,662	[INFO]	56	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:18:21,662	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:21,664	[INFO]	57	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:18:21,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:21,667	[INFO]	58	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:18:21,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:21,670	[INFO]	59	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:18:21,671	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:22,631	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:18:22,632	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:18:22,633	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:18:22,634	[INFO]	62	SUCCESS	+2.0	
2020-12-31 16:18:22,634	[DEBUG]	
2020-12-31 16:18:23,657	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:18:27,007	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:18:27,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:18:27,950	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:18:31,276	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:18:31,277	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,41 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:18:34,539	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:18:34,540	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,41 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 36,42 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:35,495	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:18:38,762	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:18:38,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,35 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 38,44 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:38,766	[INFO]	70	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:18:38,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,35 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 38,44 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:39,746	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:18:39,749	[INFO]	72	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:18:39,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,35 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 38,44 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:43,186	[INFO]	73	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:18:43,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:44,192	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:18:44,194	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:18:44,195	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:44,197	[INFO]	76	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:18:44,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:44,199	[INFO]	77	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:18:44,200	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:44,201	[INFO]	78	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:18:44,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:44,204	[INFO]	79	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:18:44,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 44,49 ****
--- 37,43 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:18:45,219	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:18:46,312	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:18:49,602	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:18:49,603	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:18:50,565	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:18:51,533	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:18:52,474	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:18:53,430	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:18:54,404	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:18:54,406	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:18:54,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:18:55,361	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:18:55,362	[INFO]	90	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:18:55,363	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:18:56,314	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:18:57,262	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:18:58,248	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:18:59,222	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:18:59,224	[INFO]	95	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:18:59,225	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:19:00,166	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:19:01,129	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:19:01,131	[INFO]	98	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:19:01,131	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,41 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 16:19:04,506	[INFO]	99	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:19:04,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:19:07,852	[INFO]	100	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:19:07,853	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:19:07,854	[INFO]	101	SUCCESS	+2.0	
2020-12-31 16:19:07,854	[DEBUG]	
2020-12-31 16:19:08,862	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:19:12,269	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:19:12,270	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:19:15,638	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:19:15,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,36 ****
--- 29,40 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:19:18,972	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:19:18,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:19:20,036	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:19:20,038	[INFO]	107	SUCCESS	+2.0	
2020-12-31 16:19:20,038	[DEBUG]	
2020-12-31 16:19:35,098	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:19:35,981	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:19:36,884	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:19:37,781	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:19:38,717	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:19:53,787	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:19:54,695	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:19:55,566	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:19:56,480	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:19:57,447	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:19:58,499	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:19:59,587	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:20:00,604	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:20:01,630	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:20:02,665	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:20:03,727	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:20:04,787	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:20:05,841	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:20:06,857	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:20:07,874	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:20:22,947	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:20:23,831	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:20:24,720	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:20:25,666	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:20:26,658	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:20:27,690	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:20:28,757	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:20:32,178	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:20:32,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:20:32,180	[INFO]	136	SUCCESS	+2.0	
2020-12-31 16:20:32,180	[DEBUG]	
2020-12-31 16:20:33,167	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:20:34,207	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:20:38,588	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:20:38,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:20:39,750	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:20:40,782	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:20:41,849	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:20:45,207	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:20:45,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 26,31 ****
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:20:45,209	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:20:45,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:20:46,220	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:20:47,229	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:20:47,231	[INFO]	147	SUCCESS	+2.0	
2020-12-31 16:20:47,231	[DEBUG]	
2020-12-31 16:20:50,577	[INFO]	148	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:20:50,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:20:51,599	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:20:52,647	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:20:53,679	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:20:54,714	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:20:54,715	[INFO]	153	SUCCESS	+2.0	
2020-12-31 16:20:54,716	[DEBUG]	
2020-12-31 16:20:55,733	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:20:56,759	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:20:57,743	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:21:01,291	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:21:01,292	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:21:02,321	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:21:05,852	[INFO]	159	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:21:05,853	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 27,32 ****
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 16:21:06,928	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:21:08,004	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:21:11,477	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:21:11,479	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 27,32 ****
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
***************
*** 48,53 ****
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:21:12,544	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:21:15,923	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:21:15,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 26,32 ****
--- 27,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
***************
*** 48,53 ****
--- 51,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:21:19,260	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:21:19,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 48,53 ****
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:21:22,624	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:21:22,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 23,31 ****
--- 24,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 48,53 ****
--- 53,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:21:23,655	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:21:27,049	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:21:27,050	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 23,31 ****
--- 24,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:21:27,052	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:21:27,053	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 23,31 ****
--- 24,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:21:28,085	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:21:29,141	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:21:32,574	[INFO]	172	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:21:32,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:21:35,882	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:21:35,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 38,46 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-31 16:21:36,855	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:21:36,858	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:21:36,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 38,46 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-31 16:21:36,860	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:21:36,861	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:21:37,890	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:21:38,920	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:21:42,330	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:21:42,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 46,51 ****
--- 50,56 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:21:45,721	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:21:45,722	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 46,51 ****
--- 49,55 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:21:46,754	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:21:47,794	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:21:51,166	[INFO]	183	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:21:51,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:21:54,474	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:21:54,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 46,51 ****
--- 48,54 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:21:54,476	[INFO]	185	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:21:54,476	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:21:55,505	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:21:55,506	[INFO]	187	SUCCESS	+2.0	
2020-12-31 16:21:55,506	[DEBUG]	
2020-12-31 16:21:56,521	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:21:57,559	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:21:58,565	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:21:59,611	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:22:00,646	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:22:01,650	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:22:02,677	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:22:03,710	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:22:18,773	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:22:21,727	[INFO]	197	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:22:21,730	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:22:21,732	[INFO]	198	SUCCESS	+2.0	
2020-12-31 16:22:21,732	[DEBUG]	
2020-12-31 16:22:22,687	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:22:23,651	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:22:24,673	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:22:25,775	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:22:29,118	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:22:29,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:22:32,529	[INFO]	204	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:22:32,530	[INFO]	205	SUCCESS	+2.0	
2020-12-31 16:22:32,530	[DEBUG]	
2020-12-31 16:22:33,538	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:22:34,613	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:22:35,697	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:22:36,730	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:22:40,091	[INFO]	210	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:22:40,092	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:22:41,109	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:22:42,159	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:22:42,161	[INFO]	213	SUCCESS	+2.0	
2020-12-31 16:22:42,161	[DEBUG]	
2020-12-31 16:22:43,195	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:22:44,259	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:22:45,272	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:22:46,317	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:22:49,691	[INFO]	218	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:22:49,692	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:22:49,693	[INFO]	219	SUCCESS	+2.0	
2020-12-31 16:22:49,693	[DEBUG]	
2020-12-31 16:22:50,736	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:22:51,790	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:22:52,815	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:23:07,879	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:23:08,769	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:23:09,658	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:23:10,566	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:23:11,473	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:23:12,390	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:23:13,381	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:23:14,390	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:23:15,485	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:23:18,818	[INFO]	232	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:23:19,852	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:23:23,214	[INFO]	234	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:23:23,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:23:24,217	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:23:24,218	[INFO]	236	SUCCESS	+2.0	
2020-12-31 16:23:24,218	[DEBUG]	
2020-12-31 16:23:25,271	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:23:28,581	[INFO]	238	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:23:43,639	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:23:44,552	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:23:47,579	[INFO]	241	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:23:47,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:23:47,581	[INFO]	242	SUCCESS	+2.0	
2020-12-31 16:23:47,581	[DEBUG]	
2020-12-31 16:23:50,932	[INFO]	243	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:23:50,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:23:50,935	[INFO]	244	SUCCESS	+2.0	
2020-12-31 16:23:50,935	[DEBUG]	
2020-12-31 16:23:51,953	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:23:52,968	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:23:54,025	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:23:55,059	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:23:56,094	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:23:59,549	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:23:59,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:23:59,551	[INFO]	251	SUCCESS	+2.0	
2020-12-31 16:23:59,551	[DEBUG]	
2020-12-31 16:24:00,603	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:24:04,051	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:24:04,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:24:05,064	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:24:05,065	[INFO]	255	SUCCESS	+2.0	
2020-12-31 16:24:05,065	[DEBUG]	
2020-12-31 16:24:05,066	[INFO]	256	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:24:05,066	[DEBUG]	
2020-12-31 16:24:05,067	[INFO]	257	SUCCESS	+2.0	
2020-12-31 16:24:05,067	[DEBUG]	
2020-12-31 16:24:08,420	[INFO]	258	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:24:09,454	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:24:10,501	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:24:11,520	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:24:14,808	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:24:14,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:24:14,810	[INFO]	263	SUCCESS	+2.0	
2020-12-31 16:24:14,810	[DEBUG]	
2020-12-31 16:24:15,842	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:24:16,873	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:24:17,874	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:24:17,875	[INFO]	267	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-31 16:24:17,876	[DEBUG]	
2020-12-31 16:24:17,876	[INFO]	268	SUCCESS	+2.0	
2020-12-31 16:24:17,877	[DEBUG]	
2020-12-31 16:24:21,347	[INFO]	269	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:24:24,783	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:24:24,788	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 16:24:25,809	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:24:26,813	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:24:27,851	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:24:27,854	[INFO]	274	SUCCESS	+2.0	
2020-12-31 16:24:27,855	[DEBUG]	
2020-12-31 16:24:31,323	[INFO]	275	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:24:32,347	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:24:35,725	[INFO]	277	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:24:39,155	[INFO]	278	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:24:39,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:24:40,112	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:24:40,113	[INFO]	280	SUCCESS	+2.0	
2020-12-31 16:24:40,114	[DEBUG]	
2020-12-31 16:24:43,576	[INFO]	281	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:24:43,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:24:43,578	[INFO]	282	SUCCESS	+2.0	
2020-12-31 16:24:43,579	[DEBUG]	
2020-12-31 16:24:44,613	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:24:45,618	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:24:46,646	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:24:47,678	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:24:51,009	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:24:51,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:24:51,011	[INFO]	288	SUCCESS	+2.0	
2020-12-31 16:24:51,011	[DEBUG]	
2020-12-31 16:24:51,959	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:24:52,968	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:25:08,027	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:25:08,941	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:25:23,993	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:25:24,889	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:25:25,826	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:25:25,827	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:25:25,827	[DEBUG]	
2020-12-31 16:25:25,828	[INFO]	297	SUCCESS	+2.0	
2020-12-31 16:25:25,828	[DEBUG]	
2020-12-31 16:25:26,730	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:25:27,628	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:25:30,942	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:25:30,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:25:31,960	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:25:31,962	[INFO]	302	SUCCESS	+2.0	
2020-12-31 16:25:31,962	[DEBUG]	
2020-12-31 16:25:32,988	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:25:34,033	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:25:35,171	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:25:36,384	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:25:36,385	[INFO]	307	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:25:37,434	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:25:38,525	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:25:39,536	[INFO]	310	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 16:25:40,615	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:25:41,741	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:25:42,752	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:25:43,801	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:25:44,848	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:25:45,890	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:25:46,928	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:25:47,959	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:25:48,994	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:25:50,062	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:25:53,468	[INFO]	321	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:25:53,469	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:25:53,469	[INFO]	322	SUCCESS	+2.0	
2020-12-31 16:25:53,470	[DEBUG]	
2020-12-31 16:25:54,476	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:25:55,561	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:25:56,515	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:25:59,878	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:25:59,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:26:00,925	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:26:01,975	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:26:02,983	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:26:04,017	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:26:04,018	[INFO]	331	SUCCESS	+2.0	
2020-12-31 16:26:04,018	[DEBUG]	
2020-12-31 16:26:05,068	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:26:06,111	[INFO]	333	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:26:07,127	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:26:08,138	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:26:09,161	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:26:10,189	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:26:11,239	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:26:12,295	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:26:13,361	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:26:16,819	[INFO]	341	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:26:17,853	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:26:18,874	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:26:19,897	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:26:20,942	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:26:21,957	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:26:23,017	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:26:26,427	[INFO]	348	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:26:27,471	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:26:28,535	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:26:29,553	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:26:30,611	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:26:31,645	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:26:35,336	[INFO]	354	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:26:36,376	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:26:37,386	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:26:38,419	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:26:41,750	[INFO]	358	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:26:45,126	[INFO]	359	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:26:46,143	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:26:47,174	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:26:48,198	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:26:48,199	[INFO]	363	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:26:48,200	[DEBUG]	
2020-12-31 16:26:48,200	[INFO]	364	SUCCESS	+2.0	
2020-12-31 16:26:48,201	[DEBUG]	
2020-12-31 16:26:49,237	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:26:52,663	[INFO]	366	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:26:52,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:26:52,665	[INFO]	367	SUCCESS	+2.0	
2020-12-31 16:26:52,665	[DEBUG]	
2020-12-31 16:26:53,680	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:26:54,707	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:26:55,740	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:26:56,782	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:27:11,842	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:27:12,683	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:27:13,576	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:27:14,498	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:27:15,395	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:27:16,308	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:27:17,279	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:27:18,277	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:27:19,307	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:27:20,364	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:27:21,397	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:27:24,860	[INFO]	383	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:27:24,861	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:27:25,895	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:27:26,926	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:27:30,298	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:27:30,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,20 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         Node minNode = null;
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 26,31 ****
--- 28,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:27:31,360	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:27:34,736	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:27:34,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,20 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         Node minNode = null;
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 26,31 ****
--- 28,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 50,55 ****
--- 56,62 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-31 16:27:35,812	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:27:39,150	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:27:39,151	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 50,55 ****
--- 52,58 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-31 16:27:40,183	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:27:43,654	[INFO]	392	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:27:43,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 16:27:44,628	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:27:44,630	[INFO]	394	SUCCESS	+2.0	
2020-12-31 16:27:44,630	[DEBUG]	
2020-12-31 16:27:45,651	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:27:49,077	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:27:49,078	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:27:50,104	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:27:53,540	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:27:53,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 51,56 ****
--- 53,62 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-31 16:27:53,542	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:27:53,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:27:53,543	[INFO]	400	SUCCESS	+2.0	
2020-12-31 16:27:53,543	[DEBUG]	
2020-12-31 16:27:54,546	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:27:55,601	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:27:56,672	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:27:57,669	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:27:58,730	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:27:59,767	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:28:00,809	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:28:01,839	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:28:02,848	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:28:06,235	[INFO]	410	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:28:09,644	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:28:09,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:28:09,646	[INFO]	412	SUCCESS	+2.0	
2020-12-31 16:28:09,646	[DEBUG]	
2020-12-31 16:28:09,647	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:28:10,676	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:28:11,668	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 16:28:15,113	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:28:15,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:28:16,097	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:28:16,099	[INFO]	418	SUCCESS	+2.0	
2020-12-31 16:28:16,099	[DEBUG]	
2020-12-31 16:28:17,126	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:28:18,155	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:28:19,172	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:28:20,199	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:28:23,587	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:28:23,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:28:23,588	[INFO]	424	SUCCESS	+2.0	
2020-12-31 16:28:23,589	[DEBUG]	
2020-12-31 16:28:26,970	[INFO]	425	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:28:27,967	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:28:28,994	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:28:28,995	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:28:32,448	[INFO]	429	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:28:33,454	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:28:34,469	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:28:37,889	[INFO]	432	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:28:37,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:28:38,876	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:28:38,878	[INFO]	434	SUCCESS	+2.0	
2020-12-31 16:28:38,879	[DEBUG]	
2020-12-31 16:28:39,885	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:28:40,943	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:28:42,012	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:28:43,140	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:28:44,201	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:28:45,208	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:28:46,254	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:28:47,262	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:28:48,306	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:28:49,343	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:28:52,814	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:28:52,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:28:52,816	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:28:52,817	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:28:53,813	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:28:54,874	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:28:54,875	[INFO]	449	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:28:54,876	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:28:54,876	[INFO]	450	SUCCESS	+2.0	
2020-12-31 16:28:54,877	[DEBUG]	
2020-12-31 16:28:54,878	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:28:55,916	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:28:59,414	[INFO]	453	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-31 16:28:59,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:29:02,799	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:29:02,800	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:29:06,120	[INFO]	455	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:29:06,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,36 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 25,38 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,52 ****
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:29:06,123	[INFO]	456	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:29:06,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,36 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 25,38 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,52 ****
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:29:09,582	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:29:09,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 47,52 ****
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:29:13,007	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:29:13,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:29:16,342	[INFO]	459	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:29:16,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:29:16,343	[INFO]	460	SUCCESS	+2.0	
2020-12-31 16:29:16,344	[DEBUG]	
2020-12-31 16:29:17,344	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:29:18,411	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:29:21,776	[INFO]	463	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:29:25,141	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:29:25,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:29:25,143	[INFO]	465	SUCCESS	+2.0	
2020-12-31 16:29:25,144	[DEBUG]	
2020-12-31 16:29:26,154	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:29:27,216	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:29:28,264	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:29:29,272	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:29:32,616	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:29:32,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:29:32,619	[INFO]	471	SUCCESS	+2.0	
2020-12-31 16:29:32,619	[DEBUG]	
2020-12-31 16:29:35,931	[INFO]	472	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:29:36,941	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:29:40,335	[INFO]	474	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:29:41,346	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:29:42,410	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:29:43,418	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:29:44,447	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:29:45,497	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:29:46,551	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:29:47,565	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:29:48,593	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:29:49,639	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:29:53,067	[INFO]	484	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:29:53,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:29:53,069	[INFO]	485	SUCCESS	+2.0	
2020-12-31 16:29:53,069	[DEBUG]	
2020-12-31 16:29:54,058	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:29:55,095	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:29:56,151	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:29:57,147	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:29:58,319	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:29:59,445	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:30:03,024	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:30:03,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:30:03,026	[INFO]	493	SUCCESS	+2.0	
2020-12-31 16:30:03,026	[DEBUG]	
2020-12-31 16:30:04,438	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:30:05,483	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:30:08,887	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:30:08,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:30:09,977	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:30:09,978	[INFO]	498	SUCCESS	+2.0	
2020-12-31 16:30:09,978	[DEBUG]	
2020-12-31 16:30:10,928	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:30:14,241	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:30:14,242	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 16:30:14,242	[INFO]	==== END ====
2020-12-31 16:30:14,242	[INFO]	Reason: step budget
2020-12-31 16:30:14,243	[INFO]	
2020-12-31 16:30:14,243	[INFO]	========== EPOCH 17 ==========
2020-12-31 16:30:14,244	[INFO]	==== WARMUP ====
2020-12-31 16:30:17,591	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:30:17,591	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:30:21,214	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:30:21,215	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:30:24,584	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:30:24,585	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:30:27,936	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 16:30:27,936	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:30:27,936	[INFO]	==== START ====
2020-12-31 16:30:28,938	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:30:30,029	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:30:31,138	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:30:32,187	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:30:33,229	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:30:34,243	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:30:35,408	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:30:36,813	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:30:38,283	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:30:39,806	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:30:40,868	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:30:41,960	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:30:43,048	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:30:44,077	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:30:44,079	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:30:44,079	[DEBUG]	
2020-12-31 16:30:45,142	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:30:46,408	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:30:47,558	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:30:47,560	[INFO]	19	SUCCESS	+2.0	
2020-12-31 16:30:47,560	[DEBUG]	
2020-12-31 16:30:51,732	[INFO]	20	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:30:51,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 16:30:55,042	[INFO]	21	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:30:58,423	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:30:58,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 16:30:59,436	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:31:02,898	[INFO]	24	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:31:02,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:31:02,900	[INFO]	25	SUCCESS	+2.0	
2020-12-31 16:31:02,900	[DEBUG]	
2020-12-31 16:31:03,939	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:31:04,940	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:31:05,978	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:31:06,990	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:31:08,034	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:31:09,035	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:31:10,098	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:31:11,120	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:31:12,140	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:31:13,160	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:31:14,212	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:31:15,232	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:31:16,273	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:31:17,348	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:31:18,390	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:31:18,391	[INFO]	41	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:31:18,392	[DEBUG]	
2020-12-31 16:31:19,459	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:31:20,498	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:31:20,499	[INFO]	44	SUCCESS	+2.0	
2020-12-31 16:31:20,499	[DEBUG]	
2020-12-31 16:31:21,545	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:31:22,568	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:31:25,954	[INFO]	47	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:31:25,955	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:31:25,955	[INFO]	48	SUCCESS	+2.0	
2020-12-31 16:31:25,956	[DEBUG]	
2020-12-31 16:31:29,326	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:31:29,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:31:29,328	[INFO]	50	SUCCESS	+2.0	
2020-12-31 16:31:29,328	[DEBUG]	
2020-12-31 16:31:30,378	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:31:31,419	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:31:32,433	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:31:33,470	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:31:36,906	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:31:36,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:31:36,908	[INFO]	56	SUCCESS	+2.0	
2020-12-31 16:31:36,909	[DEBUG]	
2020-12-31 16:31:37,912	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:31:41,212	[INFO]	58	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:31:41,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:31:42,198	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:31:42,199	[INFO]	60	SUCCESS	+2.0	
2020-12-31 16:31:42,199	[DEBUG]	
2020-12-31 16:31:43,210	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:31:44,269	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:31:45,279	[INFO]	63	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:31:46,293	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:31:47,321	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:31:48,380	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:31:49,445	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:31:50,475	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:31:51,509	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:31:52,544	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:31:53,627	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:31:54,688	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:31:55,689	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:31:59,154	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:31:59,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:31:59,155	[INFO]	75	SUCCESS	+2.0	
2020-12-31 16:31:59,156	[DEBUG]	
2020-12-31 16:32:00,145	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:32:01,112	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:32:02,145	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:32:03,171	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:32:04,202	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:32:07,590	[INFO]	81	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:32:08,608	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:32:08,610	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:32:09,625	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:32:13,075	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:32:13,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 16:32:14,078	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:32:14,079	[INFO]	87	SUCCESS	+2.0	
2020-12-31 16:32:14,079	[DEBUG]	
2020-12-31 16:32:17,515	[INFO]	88	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:32:17,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:32:18,567	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:32:18,570	[INFO]	90	SUCCESS	+2.0	
2020-12-31 16:32:18,572	[DEBUG]	
2020-12-31 16:32:19,602	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:32:23,007	[INFO]	92	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:32:23,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:32:23,009	[INFO]	93	SUCCESS	+2.0	
2020-12-31 16:32:23,010	[DEBUG]	
2020-12-31 16:32:24,022	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:32:25,062	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:32:28,462	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:32:28,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 16:32:29,445	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:32:29,446	[INFO]	98	SUCCESS	+2.0	
2020-12-31 16:32:29,447	[DEBUG]	
2020-12-31 16:32:30,459	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:32:31,481	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:32:32,547	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:32:33,549	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:32:33,551	[INFO]	103	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:32:33,551	[DEBUG]	
2020-12-31 16:32:33,552	[INFO]	104	SUCCESS	+2.0	
2020-12-31 16:32:33,552	[DEBUG]	
2020-12-31 16:32:36,955	[INFO]	105	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:32:36,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:32:37,991	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:32:39,040	[INFO]	107	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:32:40,082	[INFO]	108	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:32:40,084	[INFO]	109	SUCCESS	+2.0	
2020-12-31 16:32:40,084	[DEBUG]	
2020-12-31 16:32:43,424	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:32:43,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-31 16:32:44,423	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:32:44,424	[INFO]	112	SUCCESS	+2.0	
2020-12-31 16:32:44,424	[DEBUG]	
2020-12-31 16:32:45,465	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:32:46,474	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:32:49,850	[INFO]	115	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:32:49,851	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:32:50,863	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:32:50,865	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:32:50,866	[INFO]	118	SUCCESS	+2.0	
2020-12-31 16:32:50,866	[DEBUG]	
2020-12-31 16:32:51,867	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:32:52,900	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:33:07,958	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:33:11,117	[INFO]	122	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:33:11,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:33:11,119	[INFO]	123	SUCCESS	+2.0	
2020-12-31 16:33:11,119	[DEBUG]	
2020-12-31 16:33:12,162	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:33:13,193	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:33:14,234	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:33:15,286	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:33:18,645	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:33:18,647	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:33:18,647	[INFO]	129	SUCCESS	+2.0	
2020-12-31 16:33:18,648	[DEBUG]	
2020-12-31 16:33:19,646	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:33:23,184	[INFO]	131	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:33:23,186	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:33:24,247	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:33:24,248	[INFO]	133	SUCCESS	+2.0	
2020-12-31 16:33:24,248	[DEBUG]	
2020-12-31 16:33:25,348	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:33:26,419	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:33:27,492	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:33:28,656	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:33:29,760	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:33:30,842	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:33:31,920	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:33:32,974	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:33:36,368	[INFO]	142	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:33:36,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:33:37,392	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:33:37,393	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:33:37,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:33:37,395	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:33:37,396	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:33:38,440	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:33:38,442	[INFO]	147	SUCCESS	+2.0	
2020-12-31 16:33:38,442	[DEBUG]	
2020-12-31 16:33:39,455	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:33:40,486	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:33:41,528	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:33:42,579	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:33:43,590	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:33:46,965	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:33:46,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-31 16:33:46,967	[INFO]	154	SUCCESS	+2.0	
2020-12-31 16:33:46,967	[DEBUG]	
2020-12-31 16:33:50,333	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:33:50,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:33:50,335	[INFO]	156	SUCCESS	+2.0	
2020-12-31 16:33:50,335	[DEBUG]	
2020-12-31 16:33:53,759	[INFO]	157	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-31 16:33:54,749	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:33:55,770	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:34:10,830	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:34:11,736	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:34:12,613	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:34:13,493	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:34:14,397	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:34:15,299	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:34:16,282	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:34:17,308	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:34:18,347	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:34:19,381	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:34:20,484	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:34:23,872	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:34:23,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-31 16:34:23,877	[INFO]	172	SUCCESS	+2.0	
2020-12-31 16:34:23,878	[DEBUG]	
2020-12-31 16:34:27,507	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:34:27,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-31 16:34:27,509	[INFO]	174	SUCCESS	+2.0	
2020-12-31 16:34:27,509	[DEBUG]	
2020-12-31 16:34:31,151	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:34:31,152	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:34:31,153	[INFO]	176	SUCCESS	+2.0	
2020-12-31 16:34:31,153	[DEBUG]	
2020-12-31 16:34:32,166	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:34:33,282	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:34:34,385	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:34:35,505	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:34:36,566	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:34:37,598	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:34:38,645	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:34:42,109	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:34:42,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 16:34:43,130	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:34:44,179	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:34:44,181	[INFO]	187	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:34:44,182	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 16:34:44,183	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:34:44,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 16:34:44,184	[INFO]	189	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:34:44,185	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-31 16:34:44,186	[INFO]	190	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:34:44,186	[DEBUG]	
2020-12-31 16:34:44,187	[INFO]	191	SUCCESS	+2.0	
2020-12-31 16:34:44,187	[DEBUG]	
2020-12-31 16:34:45,197	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:34:46,213	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:34:47,234	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:34:50,613	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:34:50,614	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 16:34:54,085	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:34:54,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,34 ****
--- 24,38 ----
                  return distance;
              }
              visitedNodes.add(node);
+             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:34:55,162	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:34:58,723	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:34:58,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:34:58,725	[INFO]	199	SUCCESS	+2.0	
2020-12-31 16:34:58,725	[DEBUG]	
2020-12-31 16:34:59,795	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:35:00,904	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:35:02,056	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:35:03,144	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:35:04,215	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:35:05,300	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:35:06,316	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:35:07,342	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:35:08,389	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:35:11,890	[INFO]	209	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:35:11,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:35:13,006	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:35:13,009	[INFO]	211	SUCCESS	+2.0	
2020-12-31 16:35:13,010	[DEBUG]	
2020-12-31 16:35:14,072	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:35:15,156	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:35:16,257	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:35:19,918	[INFO]	215	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:35:19,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 16:35:19,920	[INFO]	216	SUCCESS	+2.0	
2020-12-31 16:35:19,921	[DEBUG]	
2020-12-31 16:35:20,998	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:35:22,088	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:35:23,184	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:35:24,240	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:35:25,369	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:35:28,894	[INFO]	222	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:35:28,895	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:35:30,012	[INFO]	223	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:35:30,013	[INFO]	224	SUCCESS	+2.0	
2020-12-31 16:35:30,014	[DEBUG]	
2020-12-31 16:35:31,137	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:35:32,188	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:35:33,282	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:35:34,280	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:35:35,461	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:35:36,509	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:35:39,939	[INFO]	231	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:35:39,941	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:35:39,941	[INFO]	232	SUCCESS	+2.0	
2020-12-31 16:35:39,942	[DEBUG]	
2020-12-31 16:35:40,953	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:35:42,007	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:35:45,590	[INFO]	235	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:35:45,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:35:45,592	[INFO]	236	SUCCESS	+2.0	
2020-12-31 16:35:45,593	[DEBUG]	
2020-12-31 16:35:46,668	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:35:47,753	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:35:51,306	[INFO]	239	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:35:51,307	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 16:35:52,358	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:35:52,360	[INFO]	241	SUCCESS	+2.0	
2020-12-31 16:35:52,360	[DEBUG]	
2020-12-31 16:35:55,854	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:35:55,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:35:55,856	[INFO]	243	SUCCESS	+2.0	
2020-12-31 16:35:55,856	[DEBUG]	
2020-12-31 16:35:56,886	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:35:57,926	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:36:01,414	[INFO]	246	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-31 16:36:01,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:36:01,416	[INFO]	247	SUCCESS	+2.0	
2020-12-31 16:36:01,416	[DEBUG]	
2020-12-31 16:36:04,884	[INFO]	248	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:36:04,885	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:36:04,886	[INFO]	249	SUCCESS	+2.0	
2020-12-31 16:36:04,886	[DEBUG]	
2020-12-31 16:36:08,332	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:36:08,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:36:08,335	[INFO]	251	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:36:08,335	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:36:09,388	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:36:10,474	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:36:10,477	[INFO]	254	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:36:10,478	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:36:10,479	[INFO]	255	SUCCESS	+2.0	
2020-12-31 16:36:10,480	[DEBUG]	
2020-12-31 16:36:11,549	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:36:15,070	[INFO]	257	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:36:15,071	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:36:18,557	[INFO]	258	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:36:18,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  
***************
*** 44,49 ****
--- 45,51 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:36:19,554	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:36:19,556	[INFO]	260	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:36:19,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:36:19,557	[INFO]	261	SUCCESS	+2.0	
2020-12-31 16:36:19,557	[DEBUG]	
2020-12-31 16:36:20,609	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:36:21,661	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:36:22,743	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:36:23,769	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:36:24,857	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:36:25,912	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:36:29,521	[INFO]	268	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:36:29,523	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:36:30,614	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:36:30,615	[INFO]	270	SUCCESS	+2.0	
2020-12-31 16:36:30,615	[DEBUG]	
2020-12-31 16:36:31,662	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:36:32,741	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:36:33,823	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:36:34,952	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:36:38,464	[INFO]	275	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:36:38,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 16:36:39,518	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:36:39,519	[INFO]	277	SUCCESS	+2.0	
2020-12-31 16:36:39,519	[DEBUG]	
2020-12-31 16:36:43,112	[INFO]	278	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:36:43,113	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:36:43,114	[INFO]	279	SUCCESS	+2.0	
2020-12-31 16:36:43,114	[DEBUG]	
2020-12-31 16:36:44,191	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:36:45,265	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:36:46,369	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:36:47,437	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:36:48,515	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:36:49,616	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:36:50,680	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:36:51,792	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:36:51,797	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:36:51,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 16:36:51,800	[INFO]	289	SUCCESS	+2.0	
2020-12-31 16:36:51,801	[DEBUG]	
2020-12-31 16:36:52,877	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:36:53,968	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:36:55,024	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:36:58,584	[INFO]	293	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:36:58,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:36:58,586	[INFO]	294	SUCCESS	+2.0	
2020-12-31 16:36:58,586	[DEBUG]	
2020-12-31 16:37:02,025	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:37:02,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 16:37:02,027	[INFO]	296	SUCCESS	+2.0	
2020-12-31 16:37:02,027	[DEBUG]	
2020-12-31 16:37:03,036	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:37:04,097	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:37:05,058	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:37:06,105	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:37:07,141	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:37:10,988	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:37:10,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:37:12,039	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:37:12,040	[INFO]	304	SUCCESS	+2.0	
2020-12-31 16:37:12,041	[DEBUG]	
2020-12-31 16:37:13,079	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:37:14,117	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:37:15,130	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:37:18,545	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:37:18,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:37:19,549	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:37:19,550	[INFO]	310	SUCCESS	+2.0	
2020-12-31 16:37:19,550	[DEBUG]	
2020-12-31 16:37:20,603	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:37:21,636	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:37:22,727	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:37:26,465	[INFO]	314	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:37:27,501	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:37:30,785	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:37:30,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-31 16:37:31,764	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:37:31,765	[INFO]	318	SUCCESS	+2.0	
2020-12-31 16:37:31,766	[DEBUG]	
2020-12-31 16:37:32,784	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:37:33,786	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:37:34,826	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:37:35,787	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:37:36,811	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:37:37,858	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:37:37,859	[INFO]	325	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:37:37,860	[DEBUG]	
2020-12-31 16:37:37,860	[INFO]	326	SUCCESS	+2.0	
2020-12-31 16:37:37,861	[DEBUG]	
2020-12-31 16:37:38,923	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:37:39,970	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:37:41,012	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:37:42,048	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:37:43,058	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:37:44,015	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:37:47,980	[INFO]	333	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:37:47,981	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:37:47,982	[INFO]	334	SUCCESS	+2.0	
2020-12-31 16:37:47,982	[DEBUG]	
2020-12-31 16:37:49,074	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:37:50,151	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:37:51,217	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:37:52,330	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:37:55,866	[INFO]	339	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:37:55,867	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 16:37:55,868	[INFO]	340	SUCCESS	+2.0	
2020-12-31 16:37:55,869	[DEBUG]	
2020-12-31 16:37:56,921	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:37:58,011	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:37:59,089	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:38:00,181	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:38:01,247	[INFO]	345	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:38:01,249	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:38:01,249	[DEBUG]	
2020-12-31 16:38:01,250	[INFO]	347	SUCCESS	+2.0	
2020-12-31 16:38:01,250	[DEBUG]	
2020-12-31 16:38:02,335	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:38:03,417	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:38:03,418	[INFO]	350	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:38:06,992	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:38:06,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:38:06,995	[INFO]	352	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:38:06,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:38:06,997	[INFO]	353	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:38:06,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:38:06,999	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:38:06,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:38:08,056	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:38:09,099	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:38:10,150	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:38:10,151	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:38:10,152	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:38:10,153	[INFO]	359	SUCCESS	+2.0	
2020-12-31 16:38:10,153	[DEBUG]	
2020-12-31 16:38:11,186	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:38:12,197	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:38:12,198	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:38:13,212	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:38:14,237	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:38:15,262	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:38:16,300	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:38:16,302	[INFO]	367	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:38:16,302	[DEBUG]	
2020-12-31 16:38:16,303	[INFO]	368	SUCCESS	+2.0	
2020-12-31 16:38:16,303	[DEBUG]	
2020-12-31 16:38:17,349	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:38:18,359	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:38:19,385	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:38:20,432	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:38:23,879	[INFO]	373	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:38:23,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:38:23,880	[INFO]	374	SUCCESS	+2.0	
2020-12-31 16:38:23,881	[DEBUG]	
2020-12-31 16:38:24,925	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:38:25,987	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:38:27,009	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:38:30,505	[INFO]	378	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:38:31,536	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:38:31,537	[INFO]	380	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:38:31,538	[DEBUG]	
2020-12-31 16:38:32,577	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:38:32,578	[INFO]	382	SUCCESS	+2.0	
2020-12-31 16:38:32,578	[DEBUG]	
2020-12-31 16:38:33,587	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:38:34,628	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:38:35,670	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:38:36,707	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:38:37,722	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:38:38,733	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:38:42,244	[INFO]	389	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:38:42,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:38:42,246	[INFO]	390	SUCCESS	+2.0	
2020-12-31 16:38:42,246	[DEBUG]	
2020-12-31 16:38:43,296	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:38:44,330	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:38:45,381	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:38:46,474	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:38:47,548	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:38:48,664	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:38:49,742	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:38:50,832	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:38:51,921	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:38:53,001	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:38:56,541	[INFO]	401	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:38:57,628	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:39:12,714	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:39:13,724	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:39:14,766	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:39:15,851	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:39:19,433	[INFO]	407	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:39:19,435	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:39:20,507	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:39:20,508	[INFO]	409	SUCCESS	+2.0	
2020-12-31 16:39:20,509	[DEBUG]	
2020-12-31 16:39:21,605	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:39:22,626	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:39:23,700	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:39:24,825	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:39:25,826	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:39:26,920	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:39:28,039	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:39:29,072	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:39:32,420	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:39:32,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 16:39:32,422	[INFO]	419	SUCCESS	+2.0	
2020-12-31 16:39:32,422	[DEBUG]	
2020-12-31 16:39:33,435	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:39:34,480	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:39:34,481	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:39:34,482	[DEBUG]	
2020-12-31 16:39:34,482	[INFO]	423	SUCCESS	+2.0	
2020-12-31 16:39:34,483	[DEBUG]	
2020-12-31 16:39:35,493	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:39:36,540	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:39:40,016	[INFO]	426	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 16:39:41,081	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:39:44,592	[INFO]	428	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:39:44,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 16:39:44,594	[INFO]	429	SUCCESS	+2.0	
2020-12-31 16:39:44,594	[DEBUG]	
2020-12-31 16:39:45,668	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:39:46,759	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:39:50,317	[INFO]	432	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:39:50,319	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 16:39:53,888	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:39:53,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
--- 31,44 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:39:55,020	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:39:56,147	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:39:56,152	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:39:56,154	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 16:39:56,157	[INFO]	437	SUCCESS	+2.0	
2020-12-31 16:39:56,158	[DEBUG]	
2020-12-31 16:39:57,304	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:39:58,401	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:39:59,498	[INFO]	440	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-31 16:40:00,629	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:40:01,756	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:40:02,895	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:40:06,486	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:40:06,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:40:07,539	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:40:08,611	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:40:08,613	[INFO]	447	SUCCESS	+2.0	
2020-12-31 16:40:08,613	[DEBUG]	
2020-12-31 16:40:09,648	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:40:10,695	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:40:11,796	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:40:12,893	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:40:13,962	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:40:15,058	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:40:18,658	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:40:18,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:40:18,660	[INFO]	455	SUCCESS	+2.0	
2020-12-31 16:40:18,660	[DEBUG]	
2020-12-31 16:40:19,762	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:40:20,856	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:40:21,920	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:40:23,018	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:40:24,120	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:40:25,241	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:40:26,310	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:40:27,390	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:40:28,473	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:40:29,536	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:40:30,643	[INFO]	466	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:40:31,753	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:40:32,835	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:40:33,926	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:40:35,016	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:40:39,731	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:40:39,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:40:40,852	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:40:41,994	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:40:41,996	[INFO]	474	SUCCESS	+2.0	
2020-12-31 16:40:41,996	[DEBUG]	
2020-12-31 16:40:45,702	[INFO]	475	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:40:45,704	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-31 16:40:46,889	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:40:50,484	[INFO]	477	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:40:50,485	[INFO]	478	SUCCESS	+2.0	
2020-12-31 16:40:50,486	[DEBUG]	
2020-12-31 16:40:51,545	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:40:52,619	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:40:56,148	[INFO]	481	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-31 16:40:56,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:40:56,150	[INFO]	482	SUCCESS	+2.0	
2020-12-31 16:40:56,151	[DEBUG]	
2020-12-31 16:40:57,234	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:40:58,310	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:40:59,426	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:41:00,521	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:41:01,619	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:41:02,701	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:41:03,793	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:41:04,862	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:41:05,941	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:41:07,025	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:41:08,117	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:41:09,228	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:41:12,755	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:41:12,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 16:41:12,757	[INFO]	496	SUCCESS	+2.0	
2020-12-31 16:41:12,757	[DEBUG]	
2020-12-31 16:41:13,856	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:41:14,848	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:41:15,951	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:41:19,430	[INFO]	500	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:41:19,431	[INFO]	==== END ====
2020-12-31 16:41:19,431	[INFO]	Reason: step budget
2020-12-31 16:41:19,432	[INFO]	
2020-12-31 16:41:19,432	[INFO]	========== EPOCH 18 ==========
2020-12-31 16:41:19,432	[INFO]	==== WARMUP ====
2020-12-31 16:41:23,017	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:41:23,018	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:41:26,647	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:41:26,647	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:41:30,217	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:41:30,217	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:41:33,645	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 16:41:33,645	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:41:33,645	[INFO]	==== START ====
2020-12-31 16:41:34,655	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:41:35,676	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:41:39,024	[INFO]	3	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:41:39,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:41:40,030	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:41:40,031	[INFO]	5	SUCCESS	+2.0	
2020-12-31 16:41:40,032	[DEBUG]	
2020-12-31 16:41:41,063	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:41:42,051	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:41:43,062	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:41:44,085	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:41:45,110	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:41:46,152	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:41:47,110	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:41:50,479	[INFO]	13	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:41:50,480	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-31 16:41:50,481	[INFO]	14	SUCCESS	+2.0	
2020-12-31 16:41:50,482	[DEBUG]	
2020-12-31 16:41:54,075	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:41:54,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:41:54,077	[INFO]	16	SUCCESS	+2.0	
2020-12-31 16:41:54,077	[DEBUG]	
2020-12-31 16:41:55,142	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:41:56,237	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:41:59,804	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:41:59,805	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 16:42:00,927	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:42:04,535	[INFO]	21	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:42:04,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,55 ****
--- 48,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+             }
+                 Set<Node> visitedNodes = new HashSet<>();
              }
          }
          return minNode;

2020-12-31 16:42:08,087	[INFO]	22	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:42:11,665	[INFO]	23	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:42:11,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 48,55 ****
--- 49,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+             }
+                 Set<Node> visitedNodes = new HashSet<>();
              }
          }
          return minNode;

2020-12-31 16:42:12,722	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:42:16,268	[INFO]	25	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:42:19,767	[INFO]	26	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:42:19,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 34,39 ****
--- 35,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,55 ****
--- 51,61 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+             }
+                 Set<Node> visitedNodes = new HashSet<>();
              }
          }
          return minNode;

2020-12-31 16:42:23,332	[INFO]	27	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:42:24,404	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:42:25,665	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:42:26,784	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:42:27,859	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:42:31,368	[INFO]	32	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:42:31,370	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,55 ****
--- 50,60 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+             }
+                 Set<Node> visitedNodes = new HashSet<>();
              }
          }
          return minNode;

2020-12-31 16:42:32,430	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:42:33,756	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:42:34,861	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:42:35,939	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:42:39,552	[INFO]	37	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:42:39,553	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
--- 50,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 16:42:39,554	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:42:39,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 16:42:39,556	[INFO]	39	SUCCESS	+2.0	
2020-12-31 16:42:39,556	[DEBUG]	
2020-12-31 16:42:40,623	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:42:42,086	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:42:43,235	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:42:44,330	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:42:45,419	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:42:46,513	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:42:50,158	[INFO]	46	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:42:51,179	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:42:54,722	[INFO]	48	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:42:55,834	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:42:57,115	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:42:58,411	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:42:59,449	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:43:00,541	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:43:01,710	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:43:03,074	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:43:04,180	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:43:05,251	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:43:06,378	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:43:10,040	[INFO]	59	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:43:11,116	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:43:12,207	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:43:13,269	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:43:14,384	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:43:15,556	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:43:16,669	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:43:20,242	[INFO]	66	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:43:20,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:43:20,244	[INFO]	67	SUCCESS	+2.0	
2020-12-31 16:43:20,244	[DEBUG]	
2020-12-31 16:43:21,294	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:43:22,385	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:43:25,959	[INFO]	70	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:43:25,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 16:43:27,022	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:43:28,113	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:43:29,195	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:43:30,265	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:43:30,266	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:43:30,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 16:43:30,268	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:43:30,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-31 16:43:31,350	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:43:31,351	[INFO]	78	SUCCESS	+2.0	
2020-12-31 16:43:31,352	[DEBUG]	
2020-12-31 16:43:32,443	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:43:33,552	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:43:34,617	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:43:35,644	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:43:39,189	[INFO]	83	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:43:40,221	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:43:43,800	[INFO]	85	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:43:43,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:43:43,802	[INFO]	86	SUCCESS	+2.0	
2020-12-31 16:43:43,803	[DEBUG]	
2020-12-31 16:43:44,912	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:43:45,954	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:43:47,027	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:43:48,111	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:43:51,680	[INFO]	91	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:43:52,748	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:43:56,338	[INFO]	93	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:43:56,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-31 16:43:57,416	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:43:57,417	[INFO]	95	SUCCESS	+2.0	
2020-12-31 16:43:57,418	[DEBUG]	
2020-12-31 16:43:58,479	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:43:59,593	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:44:00,689	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:44:01,747	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:44:02,855	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:44:03,981	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:44:05,086	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:44:06,142	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:44:07,214	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:44:08,225	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:44:11,742	[INFO]	106	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:44:11,743	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-31 16:44:12,842	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:44:13,904	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:44:17,288	[INFO]	109	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:44:20,930	[INFO]	110	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:44:20,932	[INFO]	111	SUCCESS	+2.0	
2020-12-31 16:44:20,932	[DEBUG]	
2020-12-31 16:44:21,997	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:44:23,042	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:44:26,650	[INFO]	114	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:44:26,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:44:27,723	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:44:28,827	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:44:28,828	[INFO]	117	SUCCESS	+2.0	
2020-12-31 16:44:28,829	[DEBUG]	
2020-12-31 16:44:29,887	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:44:29,889	[INFO]	119	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:44:29,889	[DEBUG]	
2020-12-31 16:44:30,949	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:44:30,951	[INFO]	121	SUCCESS	+2.0	
2020-12-31 16:44:30,951	[DEBUG]	
2020-12-31 16:44:32,071	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:44:33,153	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:44:34,235	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:44:37,886	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:44:37,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-31 16:44:37,888	[INFO]	126	SUCCESS	+2.0	
2020-12-31 16:44:37,889	[DEBUG]	
2020-12-31 16:44:38,975	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:44:40,029	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:44:41,136	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:44:44,722	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:44:44,723	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:44:44,724	[INFO]	131	SUCCESS	+2.0	
2020-12-31 16:44:44,724	[DEBUG]	
2020-12-31 16:44:45,751	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:44:46,850	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:44:50,411	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:44:50,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:44:50,413	[INFO]	135	SUCCESS	+2.0	
2020-12-31 16:44:50,414	[DEBUG]	
2020-12-31 16:44:51,471	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:44:52,551	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:44:53,630	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:44:54,712	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:44:55,753	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:44:56,785	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:44:57,802	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:45:01,103	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:45:01,104	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:45:02,128	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:45:03,169	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:45:03,170	[INFO]	146	SUCCESS	+2.0	
2020-12-31 16:45:03,170	[DEBUG]	
2020-12-31 16:45:04,198	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:45:05,222	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:45:06,233	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:45:07,252	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:45:08,264	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:45:08,265	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:45:09,303	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:45:12,746	[INFO]	154	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:45:12,747	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:45:12,748	[INFO]	155	SUCCESS	+2.0	
2020-12-31 16:45:12,748	[DEBUG]	
2020-12-31 16:45:13,826	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:45:13,828	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:45:13,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:45:14,932	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:45:14,933	[INFO]	159	SUCCESS	+2.0	
2020-12-31 16:45:14,934	[DEBUG]	
2020-12-31 16:45:16,002	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:45:19,663	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:45:19,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 16:45:19,665	[INFO]	162	SUCCESS	+2.0	
2020-12-31 16:45:19,666	[DEBUG]	
2020-12-31 16:45:20,753	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:45:24,262	[INFO]	164	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:45:24,263	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:45:25,287	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:45:26,312	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:45:26,315	[INFO]	167	SUCCESS	+2.0	
2020-12-31 16:45:26,316	[DEBUG]	
2020-12-31 16:45:27,392	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:45:28,474	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:45:29,587	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:45:30,681	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:45:31,744	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:45:32,824	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:45:33,927	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:45:35,071	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:45:38,662	[INFO]	176	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:45:38,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:45:38,665	[INFO]	177	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:45:38,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:45:38,668	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:45:38,668	[DEBUG]	
2020-12-31 16:45:39,761	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:45:39,762	[INFO]	180	SUCCESS	+2.0	
2020-12-31 16:45:39,762	[DEBUG]	
2020-12-31 16:45:43,447	[INFO]	181	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:45:43,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:45:43,449	[INFO]	182	SUCCESS	+2.0	
2020-12-31 16:45:43,450	[DEBUG]	
2020-12-31 16:45:44,556	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:45:45,718	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:45:49,217	[INFO]	185	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:45:49,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:45:49,219	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:45:49,220	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:45:52,583	[INFO]	187	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:45:55,920	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:45:55,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 47,52 ****
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:45:55,922	[INFO]	189	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:45:55,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:45:59,338	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:45:59,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,52 ****
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:46:00,388	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:46:01,476	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:46:02,563	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:46:02,565	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:46:02,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,52 ****
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:46:03,659	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:46:04,768	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:46:05,856	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:46:05,857	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:46:05,858	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 16:46:05,859	[INFO]	199	SUCCESS	+2.0	
2020-12-31 16:46:05,859	[DEBUG]	
2020-12-31 16:46:05,860	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:46:06,958	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:46:08,026	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:46:09,090	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:46:10,198	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:46:11,295	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:46:12,385	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:46:13,405	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:46:16,990	[INFO]	208	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:46:16,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:46:16,993	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:16,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:46:18,050	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:46:21,608	[INFO]	211	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:21,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:46:25,206	[INFO]	212	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:46:25,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:28,734	[INFO]	213	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:46:28,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:32,308	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:46:32,309	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:33,409	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:46:37,029	[INFO]	216	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:46:37,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:40,454	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:46:40,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 52,57 ****
--- 65,71 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:41,498	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:46:45,210	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:46:45,212	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,57 ****
--- 61,72 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:45,214	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:45,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,57 ****
--- 61,72 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:45,216	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:45,217	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 52,57 ****
--- 65,71 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:45,218	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:45,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 16:46:46,263	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:46:47,387	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:46:47,389	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:47,389	[DEBUG]	
2020-12-31 16:46:47,390	[INFO]	226	SUCCESS	+2.0	
2020-12-31 16:46:47,390	[DEBUG]	
2020-12-31 16:46:48,461	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:46:52,070	[INFO]	228	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:46:52,071	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:52,072	[INFO]	229	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:46:52,072	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:53,164	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:46:56,628	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:46:56,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 unvisitedNodes.put(startnode, 0);
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:57,639	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:46:57,640	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:46:57,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 unvisitedNodes.put(startnode, 0);
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:57,642	[INFO]	234	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:46:57,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:57,644	[INFO]	235	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:46:57,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:46:57,645	[INFO]	236	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:46:57,645	[DEBUG]	
2020-12-31 16:46:57,646	[INFO]	237	SUCCESS	+2.0	
2020-12-31 16:46:57,646	[DEBUG]	
2020-12-31 16:46:58,677	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:46:59,762	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:47:00,771	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:47:01,811	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:47:02,867	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:47:03,893	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:47:03,894	[INFO]	244	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:47:03,895	[DEBUG]	
2020-12-31 16:47:03,895	[INFO]	245	SUCCESS	+2.0	
2020-12-31 16:47:03,896	[DEBUG]	
2020-12-31 16:47:04,904	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:47:05,946	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:47:07,005	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:47:08,028	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:47:09,066	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:47:10,116	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:47:11,150	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:47:12,173	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:47:13,528	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:47:14,580	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:47:18,002	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:47:18,003	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:47:18,004	[INFO]	257	SUCCESS	+2.0	
2020-12-31 16:47:18,004	[DEBUG]	
2020-12-31 16:47:19,051	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:47:20,141	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:47:21,201	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:47:24,848	[INFO]	261	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:47:25,932	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:47:27,034	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:47:28,106	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:47:29,169	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:47:30,281	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:47:31,350	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:47:32,436	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:47:33,522	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:47:34,606	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:47:35,696	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:47:36,783	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:47:37,891	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:47:39,028	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:47:40,106	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:47:43,712	[INFO]	276	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:47:43,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:47:44,775	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:47:44,777	[INFO]	278	SUCCESS	+2.0	
2020-12-31 16:47:44,777	[DEBUG]	
2020-12-31 16:47:45,899	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:47:46,967	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:47:48,053	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:47:51,663	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:47:51,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 16:47:55,249	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:47:55,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 49,54 ****
--- 50,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:47:58,780	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:47:58,781	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:47:59,822	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:47:59,823	[INFO]	286	SUCCESS	+2.0	
2020-12-31 16:47:59,824	[DEBUG]	
2020-12-31 16:48:03,411	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:48:03,412	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-31 16:48:03,413	[INFO]	288	SUCCESS	+2.0	
2020-12-31 16:48:03,414	[DEBUG]	
2020-12-31 16:48:04,482	[INFO]	289	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:48:05,535	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:48:06,625	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:48:07,715	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:48:08,794	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:48:12,314	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:48:12,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 16:48:12,316	[INFO]	295	SUCCESS	+2.0	
2020-12-31 16:48:12,316	[DEBUG]	
2020-12-31 16:48:13,362	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:48:14,467	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:48:15,539	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:48:16,609	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:48:20,222	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:48:20,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-31 16:48:21,325	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:48:22,415	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:48:22,416	[INFO]	303	SUCCESS	+2.0	
2020-12-31 16:48:22,416	[DEBUG]	
2020-12-31 16:48:23,752	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:48:24,948	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-31 16:48:28,506	[INFO]	306	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:48:29,550	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:48:30,637	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:48:31,747	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:48:32,831	[INFO]	310	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:48:33,889	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:48:34,957	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:48:36,042	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:48:37,121	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:48:37,122	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:48:38,187	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:48:39,206	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:48:40,250	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:48:41,275	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:48:44,867	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:48:44,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:48:44,870	[INFO]	321	SUCCESS	+2.0	
2020-12-31 16:48:44,871	[DEBUG]	
2020-12-31 16:48:45,924	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:48:46,963	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:48:47,916	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:48:48,971	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:48:48,973	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:48:48,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:48:48,974	[INFO]	327	SUCCESS	+2.0	
2020-12-31 16:48:48,975	[DEBUG]	
2020-12-31 16:48:49,991	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:48:51,011	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:48:52,028	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:48:53,073	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:48:54,106	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:48:55,142	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:48:58,501	[INFO]	334	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:48:58,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:48:58,503	[INFO]	335	SUCCESS	+2.0	
2020-12-31 16:48:58,503	[DEBUG]	
2020-12-31 16:49:13,567	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:49:28,638	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:49:31,901	[INFO]	338	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:49:35,499	[INFO]	339	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:49:35,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-31 16:49:35,501	[INFO]	340	SUCCESS	+2.0	
2020-12-31 16:49:35,501	[DEBUG]	
2020-12-31 16:49:39,169	[INFO]	341	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:49:40,265	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:49:43,917	[INFO]	343	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:49:43,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:49:47,365	[INFO]	344	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:49:47,366	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 27,39 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:49:47,367	[INFO]	345	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:49:47,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:49:47,369	[INFO]	346	SUCCESS	+2.0	
2020-12-31 16:49:47,369	[DEBUG]	
2020-12-31 16:49:50,887	[INFO]	347	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:49:50,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 16:49:50,889	[INFO]	348	SUCCESS	+2.0	
2020-12-31 16:49:50,890	[DEBUG]	
2020-12-31 16:49:54,444	[INFO]	349	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:49:54,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 16:49:55,518	[INFO]	350	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:49:56,598	[INFO]	351	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:49:57,678	[INFO]	352	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:49:57,680	[INFO]	353	SUCCESS	+2.0	
2020-12-31 16:49:57,680	[DEBUG]	
2020-12-31 16:49:58,769	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:50:02,218	[INFO]	355	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:50:02,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:50:02,220	[INFO]	356	SUCCESS	+2.0	
2020-12-31 16:50:02,221	[DEBUG]	
2020-12-31 16:50:03,314	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:50:07,222	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:50:07,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:50:10,743	[INFO]	359	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:50:10,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,31 ****
--- 27,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:50:11,814	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:50:11,815	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:50:11,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-31 16:50:11,816	[INFO]	362	SUCCESS	+2.0	
2020-12-31 16:50:11,817	[DEBUG]	
2020-12-31 16:50:12,879	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:50:13,966	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:50:17,579	[INFO]	365	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:50:18,616	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:50:19,719	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:50:23,281	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:50:23,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:50:23,283	[INFO]	369	SUCCESS	+2.0	
2020-12-31 16:50:23,284	[DEBUG]	
2020-12-31 16:50:24,354	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:50:25,443	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:50:26,504	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:50:30,051	[INFO]	373	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:50:30,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:50:30,053	[INFO]	374	SUCCESS	+2.0	
2020-12-31 16:50:30,053	[DEBUG]	
2020-12-31 16:50:33,583	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:50:33,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 16:50:34,657	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:50:36,264	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:50:36,266	[INFO]	378	SUCCESS	+2.0	
2020-12-31 16:50:36,266	[DEBUG]	
2020-12-31 16:50:37,767	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:50:39,281	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:50:40,593	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:50:41,807	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:50:42,891	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:50:46,890	[INFO]	384	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:51:01,968	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:51:02,918	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:51:03,960	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:51:07,451	[INFO]	388	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:51:07,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:51:07,453	[INFO]	389	SUCCESS	+2.0	
2020-12-31 16:51:07,454	[DEBUG]	
2020-12-31 16:51:08,524	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:51:09,610	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:51:10,717	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 16:51:10,719	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:51:14,321	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:51:14,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:51:15,392	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:51:16,446	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:51:16,447	[INFO]	397	SUCCESS	+2.0	
2020-12-31 16:51:16,448	[DEBUG]	
2020-12-31 16:51:17,487	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:51:18,543	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:51:19,544	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:51:20,569	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:51:21,584	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:51:24,992	[INFO]	403	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:51:26,022	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:51:27,064	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:51:28,065	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:51:29,083	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:51:30,097	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:51:31,141	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:51:46,211	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:51:47,126	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:51:48,027	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:51:48,967	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:51:50,035	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:51:51,143	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:51:52,250	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:51:53,363	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:51:57,059	[INFO]	418	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:51:57,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 16:51:57,061	[INFO]	419	SUCCESS	+2.0	
2020-12-31 16:51:57,061	[DEBUG]	
2020-12-31 16:51:58,171	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:51:59,266	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:52:00,370	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:52:03,914	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:52:03,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:52:04,980	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:52:04,981	[INFO]	425	SUCCESS	+2.0	
2020-12-31 16:52:04,981	[DEBUG]	
2020-12-31 16:52:06,051	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:52:07,120	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:52:10,695	[INFO]	428	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:52:11,760	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:52:15,137	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:52:15,138	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:52:15,139	[INFO]	431	SUCCESS	+2.0	
2020-12-31 16:52:15,140	[DEBUG]	
2020-12-31 16:52:16,145	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:52:17,147	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:52:18,161	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:52:19,204	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:52:22,621	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:52:22,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:52:22,623	[INFO]	437	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 16:52:22,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 16:52:22,625	[INFO]	438	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 16:52:22,625	[DEBUG]	
2020-12-31 16:52:22,626	[INFO]	439	SUCCESS	+2.0	
2020-12-31 16:52:22,626	[DEBUG]	
2020-12-31 16:52:26,000	[INFO]	440	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:52:26,001	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 16:52:26,002	[INFO]	441	SUCCESS	+2.0	
2020-12-31 16:52:26,002	[DEBUG]	
2020-12-31 16:52:29,345	[INFO]	442	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:52:29,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 16:52:29,347	[INFO]	443	SUCCESS	+2.0	
2020-12-31 16:52:29,347	[DEBUG]	
2020-12-31 16:52:30,371	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:52:31,342	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:52:32,341	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:52:33,366	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:52:34,384	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:52:37,967	[INFO]	449	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:52:41,427	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:52:41,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-31 16:52:42,505	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:52:42,506	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:52:43,535	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:52:43,536	[INFO]	454	SUCCESS	+2.0	
2020-12-31 16:52:43,536	[DEBUG]	
2020-12-31 16:52:47,013	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:52:47,014	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 16:52:48,012	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:52:48,013	[INFO]	457	SUCCESS	+2.0	
2020-12-31 16:52:48,014	[DEBUG]	
2020-12-31 16:52:51,385	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:52:51,386	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 16:52:52,372	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:52:52,373	[INFO]	460	SUCCESS	+2.0	
2020-12-31 16:52:52,374	[DEBUG]	
2020-12-31 16:52:53,399	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:52:54,415	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:52:55,438	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:52:59,062	[INFO]	464	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:53:00,074	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:53:01,141	[INFO]	466	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:53:02,183	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:53:03,202	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:53:06,641	[INFO]	469	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:53:06,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 16:53:06,643	[INFO]	470	SUCCESS	+2.0	
2020-12-31 16:53:06,643	[DEBUG]	
2020-12-31 16:53:07,680	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:53:11,050	[INFO]	472	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:53:12,090	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:53:13,119	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:53:14,151	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:53:17,560	[INFO]	476	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:53:17,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:53:18,570	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:53:18,572	[INFO]	478	SUCCESS	+2.0	
2020-12-31 16:53:18,573	[DEBUG]	
2020-12-31 16:53:19,598	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:53:20,628	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:53:21,735	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:53:22,715	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:53:26,164	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:53:26,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:53:29,555	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:53:29,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
+ 
+                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:53:30,611	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:53:31,627	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:53:31,628	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:53:31,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:53:31,630	[INFO]	488	SUCCESS	+2.0	
2020-12-31 16:53:31,630	[DEBUG]	
2020-12-31 16:53:32,703	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:53:33,733	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:53:37,136	[INFO]	491	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:53:38,158	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:53:39,186	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:53:40,242	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:53:40,247	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:53:40,249	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:53:41,397	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:53:42,829	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:53:44,319	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:53:48,672	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:53:48,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 45,50 ****
--- 46,52 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-31 16:53:52,094	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:53:52,096	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 16:53:52,096	[INFO]	==== END ====
2020-12-31 16:53:52,096	[INFO]	Reason: step budget
2020-12-31 16:53:52,097	[INFO]	
2020-12-31 16:53:52,097	[INFO]	========== EPOCH 19 ==========
2020-12-31 16:53:52,097	[INFO]	==== WARMUP ====
2020-12-31 16:53:55,520	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:53:55,520	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:53:58,935	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:53:58,936	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:54:02,255	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 16:54:02,256	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:54:05,605	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 16:54:05,605	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 16:54:05,605	[INFO]	==== START ====
2020-12-31 16:54:06,625	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:54:10,033	[INFO]	2	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:54:10,034	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-31 16:54:11,003	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:54:11,939	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:54:11,940	[INFO]	5	SUCCESS	+2.0	
2020-12-31 16:54:11,940	[DEBUG]	
2020-12-31 16:54:12,987	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:54:14,003	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:54:15,138	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:54:16,144	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:54:17,239	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:54:18,264	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:54:19,327	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:54:20,376	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:54:21,406	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:54:22,441	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:54:25,870	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:54:25,871	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 16:54:25,872	[INFO]	17	SUCCESS	+2.0	
2020-12-31 16:54:25,872	[DEBUG]	
2020-12-31 16:54:26,913	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:54:27,940	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:54:29,002	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:54:32,392	[INFO]	21	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:54:33,400	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:54:34,428	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:54:35,453	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:54:36,488	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:54:37,515	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:54:38,540	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:54:39,630	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:54:40,675	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:54:41,725	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:54:42,769	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:54:43,823	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:54:44,841	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:54:45,882	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:54:46,922	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:54:47,986	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:54:49,043	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:54:50,076	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:54:53,436	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:54:53,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:54:54,451	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:54:55,629	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:54:55,630	[INFO]	42	SUCCESS	+2.0	
2020-12-31 16:54:55,631	[DEBUG]	
2020-12-31 16:54:56,700	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:54:57,720	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:54:58,749	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:55:02,226	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:55:02,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 16:55:03,260	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:55:04,320	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:55:05,375	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:55:05,376	[INFO]	50	SUCCESS	+2.0	
2020-12-31 16:55:05,377	[DEBUG]	
2020-12-31 16:55:20,453	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:55:21,338	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:55:22,231	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:55:25,548	[INFO]	54	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:55:25,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-31 16:55:25,550	[INFO]	55	SUCCESS	+2.0	
2020-12-31 16:55:25,551	[DEBUG]	
2020-12-31 16:55:26,562	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:55:27,580	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:55:30,943	[INFO]	58	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:55:30,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 16:55:31,972	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:55:31,974	[INFO]	60	SUCCESS	+2.0	
2020-12-31 16:55:31,974	[DEBUG]	
2020-12-31 16:55:33,031	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:55:34,069	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:55:35,129	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:55:36,228	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:55:37,252	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:55:38,291	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:55:39,329	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:55:40,374	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:55:43,754	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:55:43,755	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 16:55:43,756	[INFO]	70	SUCCESS	+2.0	
2020-12-31 16:55:43,756	[DEBUG]	
2020-12-31 16:55:44,764	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:55:45,829	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:55:49,233	[INFO]	73	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:55:49,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:55:50,247	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:55:51,277	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:55:51,279	[INFO]	76	SUCCESS	+2.0	
2020-12-31 16:55:51,279	[DEBUG]	
2020-12-31 16:55:52,329	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:55:53,374	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:55:54,365	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:55:55,385	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:55:58,711	[INFO]	81	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:55:58,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:56:02,001	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:56:02,002	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:56:02,968	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:56:02,970	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:56:02,970	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-31 16:56:02,971	[INFO]	85	SUCCESS	+2.0	
2020-12-31 16:56:02,971	[DEBUG]	
2020-12-31 16:56:03,960	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:56:07,326	[INFO]	87	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:56:08,346	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:56:09,372	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:56:10,406	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:56:11,421	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:56:12,455	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:56:13,861	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:56:14,890	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:56:15,911	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:56:16,937	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:56:16,938	[INFO]	97	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:56:16,938	[DEBUG]	
2020-12-31 16:56:17,984	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:56:17,987	[INFO]	99	SUCCESS	+2.0	
2020-12-31 16:56:17,988	[DEBUG]	
2020-12-31 16:56:19,056	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:56:20,162	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:56:23,702	[INFO]	102	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:56:23,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 16:56:23,704	[INFO]	103	SUCCESS	+2.0	
2020-12-31 16:56:23,704	[DEBUG]	
2020-12-31 16:56:24,797	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:56:25,880	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:56:26,938	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:56:27,955	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:56:29,011	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:56:32,510	[INFO]	109	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-31 16:56:32,511	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 16:56:35,794	[INFO]	110	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:56:35,796	[INFO]	111	SUCCESS	+2.0	
2020-12-31 16:56:35,796	[DEBUG]	
2020-12-31 16:56:36,849	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:56:37,949	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:56:39,035	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:56:40,118	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:56:41,193	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:56:42,304	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:56:43,397	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:56:44,517	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:56:48,053	[INFO]	120	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:56:48,054	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:49,084	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:56:50,121	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:56:50,123	[INFO]	123	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:56:50,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:50,125	[INFO]	124	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:56:50,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:50,127	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:56:50,127	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:51,167	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:56:51,169	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:56:51,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:51,171	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:56:51,172	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:51,173	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 16:56:51,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:52,204	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 16:56:52,206	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:56:52,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:52,209	[INFO]	132	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:56:52,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:55,708	[INFO]	133	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:56:55,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:56,694	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:56:57,764	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:56:57,767	[INFO]	136	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:56:57,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:57,770	[INFO]	137	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:56:57,771	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:58,874	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:56:58,876	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:56:58,877	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:58,879	[INFO]	140	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:56:58,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:58,882	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:56:58,883	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:59,910	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:56:59,912	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:56:59,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:59,915	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-31 16:56:59,917	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:59,918	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:56:59,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:56:59,921	[INFO]	146	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:56:59,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:01,005	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:57:01,007	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:01,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:01,010	[INFO]	149	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:01,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:02,101	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:57:02,103	[INFO]	151	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:02,104	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:02,106	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:02,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:02,109	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:02,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:02,112	[INFO]	154	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:02,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:03,168	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:57:04,243	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:57:04,245	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:04,247	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:04,248	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:05,277	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:57:08,633	[INFO]	160	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-31 16:57:08,635	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:57:08,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,637	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:08,638	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,640	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:57:08,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,643	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:57:08,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,646	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:57:08,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,650	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:57:08,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,653	[INFO]	167	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:57:08,654	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,655	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:08,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,19 ****
--- 13,45 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,659	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:57:08,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,662	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-31 16:57:08,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:08,664	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:57:08,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:09,715	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:57:13,113	[INFO]	173	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:57:13,115	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:57:13,116	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:13,116	[INFO]	175	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 16:57:13,117	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:57:13,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 16:57:13,119	[INFO]	177	SUCCESS	+2.0	
2020-12-31 16:57:13,119	[DEBUG]	
2020-12-31 16:57:14,144	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:57:15,161	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 16:57:16,190	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:57:17,220	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:57:20,585	[INFO]	182	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:21,578	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 16:57:22,566	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:57:23,616	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:57:24,627	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:57:25,679	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:57:26,725	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:57:27,744	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:57:28,797	[INFO]	190	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:57:29,846	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:57:30,865	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 16:57:31,888	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:57:32,936	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 16:57:33,967	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:57:33,968	[INFO]	196	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:57:33,969	[DEBUG]	
2020-12-31 16:57:37,366	[INFO]	197	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:57:37,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 16:57:38,396	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:57:39,483	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:57:39,485	[INFO]	200	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:57:39,485	[DEBUG]	
2020-12-31 16:57:40,535	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:57:40,536	[INFO]	202	SUCCESS	+2.0	
2020-12-31 16:57:40,536	[DEBUG]	
2020-12-31 16:57:41,556	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:57:42,636	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 16:57:43,651	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 16:57:44,625	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:57:45,650	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:57:46,679	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:57:47,699	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:57:48,739	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:57:52,140	[INFO]	211	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:57:52,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:57:52,142	[INFO]	212	SUCCESS	+2.0	
2020-12-31 16:57:52,142	[DEBUG]	
2020-12-31 16:57:53,208	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:57:56,807	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 16:57:56,808	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 16:57:56,809	[INFO]	215	SUCCESS	+2.0	
2020-12-31 16:57:56,809	[DEBUG]	
2020-12-31 16:57:57,879	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:57:58,961	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 16:58:00,054	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 16:58:03,553	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:58:03,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:58:03,555	[INFO]	220	SUCCESS	+2.0	
2020-12-31 16:58:03,555	[DEBUG]	
2020-12-31 16:58:06,912	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:58:06,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-31 16:58:06,914	[INFO]	222	SUCCESS	+2.0	
2020-12-31 16:58:06,914	[DEBUG]	
2020-12-31 16:58:07,919	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:58:08,972	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:58:08,973	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 16:58:08,974	[DEBUG]	
2020-12-31 16:58:10,004	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:58:11,030	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:58:11,032	[INFO]	228	SUCCESS	+2.0	
2020-12-31 16:58:11,032	[DEBUG]	
2020-12-31 16:58:12,067	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:58:13,123	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:14,173	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:58:15,125	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:58:15,126	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:58:15,127	[DEBUG]	
2020-12-31 16:58:16,171	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:58:19,547	[INFO]	235	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:58:19,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:58:19,549	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:58:19,549	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 16:58:19,550	[INFO]	237	SUCCESS	+2.0	
2020-12-31 16:58:19,550	[DEBUG]	
2020-12-31 16:58:20,615	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:21,694	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:58:22,730	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-31 16:58:23,746	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:58:24,752	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:58:25,811	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 16:58:26,811	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:58:27,848	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 16:58:28,899	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:58:29,913	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:58:30,948	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 16:58:30,949	[INFO]	249	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:58:30,949	[DEBUG]	
2020-12-31 16:58:31,979	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 16:58:33,015	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 16:58:33,016	[INFO]	252	SUCCESS	+2.0	
2020-12-31 16:58:33,017	[DEBUG]	
2020-12-31 16:58:36,363	[INFO]	253	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:58:36,365	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:37,421	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:38,440	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:58:39,512	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:40,533	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:58:41,573	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 16:58:42,675	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:58:46,253	[INFO]	261	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:58:46,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:58:49,746	[INFO]	262	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:58:49,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:58:50,876	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:58:50,877	[INFO]	264	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 16:58:50,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 16:58:50,879	[INFO]	265	SUCCESS	+2.0	
2020-12-31 16:58:50,879	[DEBUG]	
2020-12-31 16:58:51,961	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 16:58:53,059	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:58:54,112	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:58:55,175	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:58:56,260	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 16:58:57,376	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 16:58:58,398	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 16:58:59,441	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 16:58:59,443	[INFO]	274	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 16:58:59,444	[DEBUG]	
2020-12-31 16:59:00,464	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:59:01,480	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:59:01,482	[INFO]	277	SUCCESS	+2.0	
2020-12-31 16:59:01,482	[DEBUG]	
2020-12-31 16:59:02,491	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:59:03,522	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 16:59:06,913	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:59:06,914	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:59:07,898	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 16:59:11,305	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:59:11,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 27,32 ****
--- 28,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-31 16:59:12,343	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 16:59:12,344	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 16:59:12,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 16:59:12,346	[INFO]	285	SUCCESS	+2.0	
2020-12-31 16:59:12,346	[DEBUG]	
2020-12-31 16:59:13,425	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 16:59:16,830	[INFO]	287	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:59:20,681	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 16:59:20,682	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:59:20,683	[INFO]	289	SUCCESS	+2.0	
2020-12-31 16:59:20,683	[DEBUG]	
2020-12-31 16:59:21,744	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:59:25,239	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:59:25,240	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 16:59:25,241	[INFO]	292	SUCCESS	+2.0	
2020-12-31 16:59:25,241	[DEBUG]	
2020-12-31 16:59:25,242	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 16:59:26,328	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 16:59:27,436	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:59:28,540	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 16:59:29,671	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 16:59:30,811	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 16:59:31,899	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 16:59:35,471	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:59:35,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:59:39,030	[INFO]	301	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 16:59:39,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:59:39,033	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:59:39,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 16:59:39,034	[INFO]	303	SUCCESS	+2.0	
2020-12-31 16:59:39,034	[DEBUG]	
2020-12-31 16:59:40,140	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 16:59:41,189	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 16:59:44,813	[INFO]	306	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 16:59:45,832	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 16:59:49,162	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 16:59:49,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 16:59:49,163	[INFO]	309	SUCCESS	+2.0	
2020-12-31 16:59:49,164	[DEBUG]	
2020-12-31 16:59:50,203	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 16:59:51,231	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 16:59:52,246	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 16:59:53,308	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 16:59:54,340	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 16:59:55,353	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 16:59:56,390	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 16:59:57,429	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 16:59:58,439	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 16:59:59,465	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:00:00,485	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:00:03,927	[INFO]	321	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:00:03,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:00:03,930	[INFO]	322	SUCCESS	+2.0	
2020-12-31 17:00:03,930	[DEBUG]	
2020-12-31 17:00:04,972	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:00:05,988	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:00:07,022	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:00:07,023	[INFO]	326	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:00:07,023	[DEBUG]	
2020-12-31 17:00:08,090	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:00:08,092	[INFO]	328	SUCCESS	+2.0	
2020-12-31 17:00:08,092	[DEBUG]	
2020-12-31 17:00:08,093	[INFO]	329	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-31 17:00:08,093	[DEBUG]	
2020-12-31 17:00:09,121	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:00:10,147	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:00:10,148	[INFO]	332	SUCCESS	+2.0	
2020-12-31 17:00:10,149	[DEBUG]	
2020-12-31 17:00:13,524	[INFO]	333	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:00:13,525	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 17:00:13,526	[INFO]	334	SUCCESS	+2.0	
2020-12-31 17:00:13,526	[DEBUG]	
2020-12-31 17:00:16,876	[INFO]	335	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:00:16,877	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:00:17,888	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:00:18,926	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:00:19,945	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:00:19,946	[INFO]	339	SUCCESS	+2.0	
2020-12-31 17:00:19,947	[DEBUG]	
2020-12-31 17:00:20,978	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:00:21,989	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:00:23,046	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:00:24,054	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 17:00:27,491	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:00:27,492	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 17:00:30,954	[INFO]	345	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:00:30,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 17:00:32,002	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:00:35,575	[INFO]	347	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:00:35,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 17:00:36,957	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:00:38,343	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:00:39,492	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:00:39,493	[INFO]	351	SUCCESS	+2.0	
2020-12-31 17:00:39,494	[DEBUG]	
2020-12-31 17:00:40,514	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:00:41,538	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:00:42,617	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:00:43,713	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:00:44,728	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:00:45,771	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:00:49,081	[INFO]	358	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:00:49,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 17:00:52,460	[INFO]	359	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:00:55,696	[INFO]	360	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:00:55,697	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 Node minNode = null;
              }
          }
  

2020-12-31 17:00:56,656	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:00:56,657	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:00:56,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 17:00:57,617	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:00:57,618	[INFO]	364	SUCCESS	+2.0	
2020-12-31 17:00:57,619	[DEBUG]	
2020-12-31 17:00:58,587	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:00:59,648	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:01:00,713	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:01:01,784	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:01:02,882	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:01:03,931	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:01:04,992	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:01:06,071	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:01:07,161	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:01:08,251	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:01:09,352	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:01:10,414	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:01:13,810	[INFO]	377	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:01:17,244	[INFO]	378	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:01:17,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 17:01:20,714	[INFO]	379	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:01:20,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-31 17:01:24,042	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:01:24,043	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 17:01:24,044	[INFO]	381	SUCCESS	+2.0	
2020-12-31 17:01:24,044	[DEBUG]	
2020-12-31 17:01:25,129	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:01:26,180	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:01:27,218	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:01:30,609	[INFO]	385	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:01:30,611	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 17:01:31,635	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:01:32,694	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:01:32,695	[INFO]	388	SUCCESS	+2.0	
2020-12-31 17:01:32,695	[DEBUG]	
2020-12-31 17:01:33,720	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:01:34,752	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:01:35,791	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:01:36,817	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 17:01:37,823	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:01:38,891	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:01:53,962	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:01:54,959	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:01:55,994	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:01:59,577	[INFO]	398	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:01:59,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:01:59,580	[INFO]	399	SUCCESS	+2.0	
2020-12-31 17:01:59,581	[DEBUG]	
2020-12-31 17:02:03,136	[INFO]	400	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:02:03,137	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:02:03,138	[INFO]	401	SUCCESS	+2.0	
2020-12-31 17:02:03,138	[DEBUG]	
2020-12-31 17:02:04,214	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:02:05,248	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:02:06,315	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:02:07,417	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:02:08,501	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:02:09,610	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:02:10,685	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:02:14,145	[INFO]	409	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:02:14,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 17:02:15,232	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:02:16,307	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:02:17,397	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:02:18,482	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:02:18,484	[INFO]	414	SUCCESS	+2.0	
2020-12-31 17:02:18,484	[DEBUG]	
2020-12-31 17:02:19,593	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:02:20,673	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:02:24,218	[INFO]	417	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:02:24,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 17:02:25,345	[INFO]	418	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:02:25,347	[INFO]	419	SUCCESS	+2.0	
2020-12-31 17:02:25,347	[DEBUG]	
2020-12-31 17:02:26,436	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:02:27,538	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:02:31,035	[INFO]	422	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:02:32,102	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:02:33,122	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:02:34,180	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:02:35,194	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:02:38,552	[INFO]	427	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:02:38,553	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:02:39,614	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:02:39,615	[INFO]	429	SUCCESS	+2.0	
2020-12-31 17:02:39,615	[DEBUG]	
2020-12-31 17:02:43,059	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:02:43,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 17:02:43,061	[INFO]	431	SUCCESS	+2.0	
2020-12-31 17:02:43,061	[DEBUG]	
2020-12-31 17:02:46,507	[INFO]	432	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:02:46,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 17:02:47,588	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 17:02:47,590	[INFO]	434	SUCCESS	+2.0	
2020-12-31 17:02:47,590	[DEBUG]	
2020-12-31 17:02:49,093	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:02:50,171	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:02:51,240	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:02:52,355	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:02:53,440	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:02:54,525	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:02:55,624	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:02:56,734	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:02:56,736	[INFO]	443	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 17:02:56,736	[DEBUG]	
2020-12-31 17:02:56,737	[INFO]	444	SUCCESS	+2.0	
2020-12-31 17:02:56,737	[DEBUG]	
2020-12-31 17:02:57,780	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:02:58,848	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:02:59,886	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:03:00,931	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:03:01,990	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:03:05,350	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:03:05,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-31 17:03:05,352	[INFO]	451	SUCCESS	+2.0	
2020-12-31 17:03:05,352	[DEBUG]	
2020-12-31 17:03:06,345	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:03:07,424	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:03:08,484	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:03:09,505	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:03:10,572	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:03:13,955	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:03:13,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 17:03:14,990	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:03:14,991	[INFO]	459	SUCCESS	+2.0	
2020-12-31 17:03:14,991	[DEBUG]	
2020-12-31 17:03:16,078	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:03:17,079	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:03:18,103	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:03:19,118	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:03:20,171	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:03:21,198	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:03:24,585	[INFO]	466	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:03:24,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-31 17:03:24,586	[INFO]	467	SUCCESS	+2.0	
2020-12-31 17:03:24,587	[DEBUG]	
2020-12-31 17:03:25,633	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:03:26,679	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:03:30,110	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:03:30,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 17:03:30,112	[INFO]	471	SUCCESS	+2.0	
2020-12-31 17:03:30,112	[DEBUG]	
2020-12-31 17:03:31,110	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:03:32,130	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:03:33,168	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:03:34,179	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:03:37,579	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:03:37,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 17:03:38,600	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:03:38,601	[INFO]	478	SUCCESS	+2.0	
2020-12-31 17:03:38,602	[DEBUG]	
2020-12-31 17:03:39,629	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:03:40,654	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:03:41,677	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:03:42,781	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:03:43,841	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:03:44,859	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:03:45,875	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:03:46,855	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:03:50,273	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:03:50,274	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-31 17:03:50,275	[INFO]	488	SUCCESS	+2.0	
2020-12-31 17:03:50,275	[DEBUG]	
2020-12-31 17:03:51,264	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:03:52,299	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:03:55,687	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:03:55,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 17:03:55,689	[INFO]	492	SUCCESS	+2.0	
2020-12-31 17:03:55,690	[DEBUG]	
2020-12-31 17:03:56,712	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:03:57,737	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:03:58,759	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:03:59,810	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:04:00,836	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:04:01,834	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:04:02,896	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:04:03,907	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:04:03,907	[INFO]	==== END ====
2020-12-31 17:04:03,907	[INFO]	Reason: step budget
2020-12-31 17:04:03,908	[INFO]	
2020-12-31 17:04:03,908	[INFO]	========== EPOCH 20 ==========
2020-12-31 17:04:03,909	[INFO]	==== WARMUP ====
2020-12-31 17:04:07,292	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 17:04:07,293	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 17:04:10,684	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 17:04:10,684	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 17:04:14,156	[INFO]	WARM	SUCCESS	 2.0	
2020-12-31 17:04:14,157	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 17:04:17,550	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-31 17:04:17,551	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-31 17:04:17,551	[INFO]	==== START ====
2020-12-31 17:04:20,896	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:04:20,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 17:04:20,898	[INFO]	2	SUCCESS	+2.0	
2020-12-31 17:04:20,898	[DEBUG]	
2020-12-31 17:04:21,927	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:04:22,993	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:04:24,014	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:04:27,409	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:04:27,410	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-31 17:04:27,411	[INFO]	7	SUCCESS	+2.0	
2020-12-31 17:04:27,411	[DEBUG]	
2020-12-31 17:04:28,385	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:04:29,416	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:04:30,452	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:04:33,806	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:04:33,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-31 17:04:33,807	[INFO]	12	SUCCESS	+2.0	
2020-12-31 17:04:33,808	[DEBUG]	
2020-12-31 17:04:34,834	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:04:38,258	[INFO]	14	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:04:38,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-31 17:04:38,260	[INFO]	15	SUCCESS	+2.0	
2020-12-31 17:04:38,260	[DEBUG]	
2020-12-31 17:04:39,299	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:04:40,335	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:04:55,395	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:04:58,343	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:04:58,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 17:04:58,345	[INFO]	20	SUCCESS	+2.0	
2020-12-31 17:04:58,345	[DEBUG]	
2020-12-31 17:04:59,253	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:05:00,176	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:05:01,179	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:05:02,238	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:05:05,540	[INFO]	25	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:05:05,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:05:06,507	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:05:07,462	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:05:10,717	[INFO]	28	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:05:10,718	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:05:10,720	[INFO]	29	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:05:10,721	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:05:11,676	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:05:12,693	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:05:13,694	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:05:14,644	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:05:14,646	[INFO]	34	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:05:14,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:05:15,681	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:05:19,004	[INFO]	36	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-31 17:05:19,006	[INFO]	37	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:05:19,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:05:19,007	[INFO]	38	SUCCESS	+2.0	
2020-12-31 17:05:19,007	[DEBUG]	
2020-12-31 17:05:20,012	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:05:21,033	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:05:22,052	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:05:25,424	[INFO]	42	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:05:25,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-31 17:05:26,493	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:05:27,527	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:05:27,529	[INFO]	45	SUCCESS	+2.0	
2020-12-31 17:05:27,529	[DEBUG]	
2020-12-31 17:05:28,550	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:05:29,624	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:05:30,656	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 17:05:31,717	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:05:32,746	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:05:32,747	[INFO]	51	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:05:32,748	[DEBUG]	
2020-12-31 17:05:33,756	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:05:33,757	[INFO]	53	SUCCESS	+2.0	
2020-12-31 17:05:33,758	[DEBUG]	
2020-12-31 17:05:34,781	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:05:36,086	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:05:37,136	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:05:38,161	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:05:39,256	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:05:40,354	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:05:41,417	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:05:42,460	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:05:43,515	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:05:44,562	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:05:47,943	[INFO]	64	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:05:51,390	[INFO]	65	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:05:51,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 17:05:52,375	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:05:52,376	[INFO]	67	SUCCESS	+2.0	
2020-12-31 17:05:52,377	[DEBUG]	
2020-12-31 17:05:53,407	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:05:54,438	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:05:55,450	[INFO]	70	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-31 17:05:56,472	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:05:57,486	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:06:00,810	[INFO]	73	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:06:00,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-31 17:06:01,776	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:06:01,777	[INFO]	75	SUCCESS	+2.0	
2020-12-31 17:06:01,778	[DEBUG]	
2020-12-31 17:06:05,258	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:06:05,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 17:06:05,260	[INFO]	77	SUCCESS	+2.0	
2020-12-31 17:06:05,261	[DEBUG]	
2020-12-31 17:06:06,218	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:06:07,246	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:06:10,686	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:06:10,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 17:06:10,688	[INFO]	81	SUCCESS	+2.0	
2020-12-31 17:06:10,689	[DEBUG]	
2020-12-31 17:06:11,704	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:06:12,713	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:06:13,718	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:06:14,768	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:06:15,807	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:06:16,828	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:06:17,870	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:06:18,897	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:06:22,387	[INFO]	90	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:06:22,389	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-31 17:06:23,386	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:06:23,387	[INFO]	92	SUCCESS	+2.0	
2020-12-31 17:06:23,387	[DEBUG]	
2020-12-31 17:06:26,849	[INFO]	93	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:06:30,292	[INFO]	94	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:06:33,555	[INFO]	95	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:06:33,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 17:06:33,557	[INFO]	96	SUCCESS	+2.0	
2020-12-31 17:06:33,557	[DEBUG]	
2020-12-31 17:06:33,558	[INFO]	97	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:06:33,559	[DEBUG]	
2020-12-31 17:06:34,584	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:06:35,612	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:06:35,613	[INFO]	100	SUCCESS	+2.0	
2020-12-31 17:06:35,613	[DEBUG]	
2020-12-31 17:06:36,660	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:06:37,706	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:06:38,707	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:06:39,758	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:06:40,778	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:06:41,800	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:06:41,801	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:06:45,158	[INFO]	108	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:06:45,159	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 17:06:46,178	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:06:46,179	[INFO]	110	SUCCESS	+2.0	
2020-12-31 17:06:46,179	[DEBUG]	
2020-12-31 17:06:47,199	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:06:48,242	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:06:49,254	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:07:04,318	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:07:05,218	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:07:06,101	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:07:06,987	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:07:07,922	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:07:11,451	[INFO]	119	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:07:11,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 17:07:12,427	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:07:12,428	[INFO]	121	SUCCESS	+2.0	
2020-12-31 17:07:12,428	[DEBUG]	
2020-12-31 17:07:13,504	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:07:14,548	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:07:15,579	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 17:07:16,608	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:07:17,634	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:07:21,011	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:07:21,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:07:21,013	[INFO]	128	SUCCESS	+2.0	
2020-12-31 17:07:21,013	[DEBUG]	
2020-12-31 17:07:22,027	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:07:23,045	[INFO]	130	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-31 17:07:24,087	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:07:25,149	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:07:26,172	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:07:27,244	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:07:28,278	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:07:29,341	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:07:30,396	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:07:31,404	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 17:07:32,434	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:07:33,456	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:07:34,492	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:07:35,518	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:07:36,555	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:07:39,974	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:07:39,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 17:07:39,976	[INFO]	145	SUCCESS	+2.0	
2020-12-31 17:07:39,977	[DEBUG]	
2020-12-31 17:07:40,989	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:07:42,069	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:07:42,073	[INFO]	148	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:07:42,074	[DEBUG]	
2020-12-31 17:07:42,076	[INFO]	149	SUCCESS	+2.0	
2020-12-31 17:07:42,077	[DEBUG]	
2020-12-31 17:07:43,381	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:07:46,798	[INFO]	151	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:07:46,799	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-31 17:07:46,799	[INFO]	152	SUCCESS	+2.0	
2020-12-31 17:07:46,800	[DEBUG]	
2020-12-31 17:07:47,811	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:07:48,787	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:07:49,797	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:07:53,156	[INFO]	156	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-31 17:07:54,128	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:07:55,184	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:07:56,245	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:07:57,276	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:07:58,308	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:07:59,339	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:08:00,408	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:08:01,434	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:08:02,463	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:08:03,499	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:08:06,861	[INFO]	167	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:08:06,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:08:06,863	[INFO]	168	SUCCESS	+2.0	
2020-12-31 17:08:06,863	[DEBUG]	
2020-12-31 17:08:07,885	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:08:08,909	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:08:12,313	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:08:12,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 17:08:13,345	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:08:13,347	[INFO]	173	SUCCESS	+2.0	
2020-12-31 17:08:13,347	[DEBUG]	
2020-12-31 17:08:16,742	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:08:16,743	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:08:20,064	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:08:20,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:08:20,067	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:08:20,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:08:20,068	[INFO]	177	SUCCESS	+2.0	
2020-12-31 17:08:20,068	[DEBUG]	
2020-12-31 17:08:21,083	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:08:22,120	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:08:23,169	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:08:24,181	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:08:25,235	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:08:28,672	[INFO]	183	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:08:28,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-31 17:08:28,674	[INFO]	184	SUCCESS	+2.0	
2020-12-31 17:08:28,674	[DEBUG]	
2020-12-31 17:08:29,618	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 17:08:30,640	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:08:34,078	[INFO]	187	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:08:34,080	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 17:08:34,081	[INFO]	188	SUCCESS	+2.0	
2020-12-31 17:08:34,081	[DEBUG]	
2020-12-31 17:08:35,066	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:08:36,095	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:08:37,156	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:08:38,157	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:08:39,194	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:08:39,195	[INFO]	194	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:08:39,196	[DEBUG]	
2020-12-31 17:08:39,196	[INFO]	195	SUCCESS	+2.0	
2020-12-31 17:08:39,197	[DEBUG]	
2020-12-31 17:08:40,232	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:08:41,259	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:08:42,357	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:08:43,389	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:08:44,415	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:08:45,494	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:08:46,571	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:08:49,895	[INFO]	203	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:09:04,963	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:09:05,854	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:09:06,763	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:09:07,691	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:09:10,945	[INFO]	208	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 17:09:10,946	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-31 17:09:10,947	[INFO]	209	SUCCESS	+2.0	
2020-12-31 17:09:10,947	[DEBUG]	
2020-12-31 17:09:11,943	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:09:12,985	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:09:16,357	[INFO]	212	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:09:16,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-31 17:09:17,410	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:09:17,411	[INFO]	214	SUCCESS	+2.0	
2020-12-31 17:09:17,412	[DEBUG]	
2020-12-31 17:09:18,475	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:09:19,440	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:09:20,485	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:09:35,572	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:09:36,461	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:09:37,362	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:09:38,294	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:09:39,303	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:09:40,320	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:09:41,348	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:09:42,411	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-31 17:09:43,463	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:09:44,520	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:09:45,543	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:09:46,558	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:09:47,503	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:09:50,946	[INFO]	231	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-31 17:09:50,947	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-31 17:09:50,948	[INFO]	232	SUCCESS	+2.0	
2020-12-31 17:09:50,948	[DEBUG]	
2020-12-31 17:09:54,358	[INFO]	233	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:09:55,404	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:09:56,430	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:09:57,459	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:09:58,494	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:09:59,525	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:10:00,578	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:10:03,908	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:10:03,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 17:10:04,912	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:10:08,298	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:10:08,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
--- 23,39 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 17:10:09,298	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:10:09,300	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:10:09,300	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-31 17:10:12,771	[INFO]	245	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:10:13,793	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:10:13,796	[INFO]	247	SUCCESS	+2.0	
2020-12-31 17:10:13,797	[DEBUG]	
2020-12-31 17:10:14,754	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 17:10:15,780	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:10:16,827	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:10:17,863	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:10:18,898	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:10:19,931	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:10:20,976	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:10:21,973	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:10:22,996	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:10:24,019	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:10:25,060	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:10:26,089	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:10:27,174	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:10:28,197	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:10:29,224	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-31 17:10:30,279	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:10:31,352	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:10:32,380	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:10:36,105	[INFO]	266	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:10:36,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-31 17:10:36,107	[INFO]	267	SUCCESS	+2.0	
2020-12-31 17:10:36,107	[DEBUG]	
2020-12-31 17:10:37,489	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:10:38,932	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 17:10:40,224	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-31 17:10:40,226	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:10:41,433	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:10:46,051	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:10:46,053	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 17:10:46,056	[INFO]	274	SUCCESS	+2.0	
2020-12-31 17:10:46,057	[DEBUG]	
2020-12-31 17:10:47,085	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:10:48,089	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:10:48,092	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:10:49,116	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:10:50,152	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:10:51,176	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:10:54,543	[INFO]	281	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:10:54,544	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 17:10:54,545	[INFO]	282	SUCCESS	+2.0	
2020-12-31 17:10:54,545	[DEBUG]	
2020-12-31 17:10:55,501	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:10:56,512	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:10:57,552	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:10:58,602	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:10:59,680	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:11:00,731	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:11:00,733	[INFO]	289	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:11:00,733	[DEBUG]	
2020-12-31 17:11:00,734	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:11:00,734	[DEBUG]	
2020-12-31 17:11:04,175	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:11:04,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 17:11:05,192	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:11:06,205	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:11:06,207	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:11:06,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 17:11:09,585	[INFO]	295	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:11:09,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:11:10,604	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-31 17:11:10,606	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:11:10,607	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 17:11:11,638	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:11:12,674	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:11:12,675	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:11:12,676	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 17:11:12,676	[INFO]	301	SUCCESS	+2.0	
2020-12-31 17:11:12,677	[DEBUG]	
2020-12-31 17:11:13,709	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:11:14,733	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:11:15,747	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:11:19,158	[INFO]	305	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:11:20,176	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:11:21,193	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-31 17:11:22,216	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:11:23,223	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:11:26,591	[INFO]	310	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:11:26,592	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 17:11:26,593	[INFO]	311	SUCCESS	+2.0	
2020-12-31 17:11:26,593	[DEBUG]	
2020-12-31 17:11:27,585	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:11:31,005	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:11:31,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 17:11:31,007	[INFO]	314	SUCCESS	+2.0	
2020-12-31 17:11:31,007	[DEBUG]	
2020-12-31 17:11:34,414	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:11:34,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-31 17:11:34,416	[INFO]	316	SUCCESS	+2.0	
2020-12-31 17:11:34,417	[DEBUG]	
2020-12-31 17:11:35,419	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:11:36,445	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:11:37,480	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:11:38,550	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:11:39,581	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:11:43,031	[INFO]	322	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:11:43,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 17:11:43,034	[INFO]	323	SUCCESS	+2.0	
2020-12-31 17:11:43,034	[DEBUG]	
2020-12-31 17:11:44,036	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:11:47,397	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:11:47,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-31 17:11:47,399	[INFO]	326	SUCCESS	+2.0	
2020-12-31 17:11:47,399	[DEBUG]	
2020-12-31 17:11:48,422	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-31 17:11:49,449	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:11:50,465	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:12:05,535	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:12:06,419	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:12:09,532	[INFO]	332	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:12:09,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-31 17:12:10,564	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:12:10,565	[INFO]	334	SUCCESS	+2.0	
2020-12-31 17:12:10,566	[DEBUG]	
2020-12-31 17:12:11,633	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:12:12,675	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:12:13,694	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:12:16,991	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:12:16,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-31 17:12:17,993	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:12:19,031	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:12:19,033	[INFO]	341	SUCCESS	+2.0	
2020-12-31 17:12:19,033	[DEBUG]	
2020-12-31 17:12:20,062	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:12:21,118	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:12:22,173	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:12:25,566	[INFO]	345	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-31 17:12:25,567	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-31 17:12:25,568	[INFO]	346	SUCCESS	+2.0	
2020-12-31 17:12:25,568	[DEBUG]	
2020-12-31 17:12:26,618	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:12:29,998	[INFO]	348	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:12:29,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 17:12:31,025	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:12:32,078	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-31 17:12:32,080	[INFO]	351	SUCCESS	+2.0	
2020-12-31 17:12:32,081	[DEBUG]	
2020-12-31 17:12:33,031	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-31 17:12:34,024	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:12:35,049	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:12:36,090	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:12:37,102	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:12:40,553	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:12:40,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-31 17:12:40,555	[INFO]	358	SUCCESS	+2.0	
2020-12-31 17:12:40,555	[DEBUG]	
2020-12-31 17:12:41,556	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:12:42,633	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:12:45,979	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:12:45,981	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 17:12:45,981	[INFO]	362	SUCCESS	+2.0	
2020-12-31 17:12:45,982	[DEBUG]	
2020-12-31 17:12:46,982	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:12:48,016	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:12:51,379	[INFO]	365	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:12:52,395	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:12:55,764	[INFO]	367	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:12:55,765	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:12:55,767	[INFO]	368	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:12:55,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:12:55,768	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:12:55,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-31 17:12:55,769	[INFO]	370	SUCCESS	+2.0	
2020-12-31 17:12:55,770	[DEBUG]	
2020-12-31 17:12:56,710	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:12:57,727	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:12:58,762	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:12:59,801	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-31 17:13:00,844	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:13:01,896	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:13:02,899	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:13:03,914	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:13:04,931	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:13:05,941	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:13:06,974	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:13:08,135	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:13:09,280	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:13:09,283	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:13:10,472	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:13:11,572	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:13:12,606	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:13:13,683	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:13:14,699	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:13:15,701	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:13:19,342	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:13:19,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-31 17:13:22,679	[INFO]	392	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-31 17:13:22,680	[INFO]	393	SUCCESS	+2.0	
2020-12-31 17:13:22,680	[DEBUG]	
2020-12-31 17:13:26,100	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:13:26,103	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-31 17:13:27,130	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:13:27,133	[INFO]	396	SUCCESS	+2.0	
2020-12-31 17:13:27,134	[DEBUG]	
2020-12-31 17:13:28,162	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-31 17:13:28,164	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:13:31,511	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-31 17:13:31,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-31 17:13:31,512	[INFO]	400	SUCCESS	+2.0	
2020-12-31 17:13:31,513	[DEBUG]	
2020-12-31 17:13:32,520	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:13:33,542	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-31 17:13:34,563	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:13:35,586	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:13:36,638	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-31 17:13:37,681	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:13:38,693	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:13:39,709	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:13:40,787	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:13:41,831	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:13:42,801	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:13:43,824	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-31 17:13:47,189	[INFO]	413	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:13:47,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-31 17:13:47,191	[INFO]	414	SUCCESS	+2.0	
2020-12-31 17:13:47,191	[DEBUG]	
2020-12-31 17:13:50,483	[INFO]	415	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-31 17:13:51,505	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:13:52,520	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 17:13:53,541	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:13:54,578	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:13:57,963	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-31 17:13:57,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 17:13:59,025	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:13:59,026	[INFO]	422	SUCCESS	+2.0	
2020-12-31 17:13:59,027	[DEBUG]	
2020-12-31 17:14:00,061	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:14:01,093	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-31 17:14:02,113	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:14:03,144	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:14:04,200	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:14:05,220	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:14:06,241	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-31 17:14:07,289	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:14:08,301	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-31 17:14:09,322	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:14:10,398	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:14:13,815	[INFO]	434	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-31 17:14:13,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 17:14:13,817	[INFO]	435	SUCCESS	+2.0	
2020-12-31 17:14:13,817	[DEBUG]	
2020-12-31 17:14:14,827	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-31 17:14:18,201	[INFO]	437	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:14:18,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 17:14:19,190	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-31 17:14:20,261	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:14:21,813	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:14:21,815	[INFO]	441	SUCCESS	+2.0	
2020-12-31 17:14:21,815	[DEBUG]	
2020-12-31 17:14:22,910	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-31 17:14:23,949	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:14:25,062	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:14:26,102	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:14:27,101	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:14:28,119	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:14:29,164	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:14:30,188	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-31 17:14:33,581	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:14:33,582	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-31 17:14:34,624	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-31 17:14:34,625	[INFO]	452	SUCCESS	+2.0	
2020-12-31 17:14:34,625	[DEBUG]	
2020-12-31 17:14:38,034	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-31 17:14:38,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-31 17:14:39,101	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:14:40,144	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:14:40,145	[INFO]	456	SUCCESS	+2.0	
2020-12-31 17:14:40,146	[DEBUG]	
2020-12-31 17:14:43,552	[INFO]	457	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-31 17:14:43,553	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-31 17:14:44,588	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:14:44,590	[INFO]	459	SUCCESS	+2.0	
2020-12-31 17:14:44,590	[DEBUG]	
2020-12-31 17:14:45,620	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-31 17:14:46,655	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-31 17:14:47,701	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:14:48,788	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:14:49,857	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-31 17:14:50,915	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-31 17:14:51,942	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-31 17:14:52,951	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-31 17:14:53,976	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-31 17:14:54,987	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:14:58,347	[INFO]	470	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-31 17:14:59,368	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-31 17:15:02,678	[INFO]	472	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-31 17:15:02,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-31 17:15:03,691	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:15:03,692	[INFO]	474	SUCCESS	+2.0	
2020-12-31 17:15:03,693	[DEBUG]	
2020-12-31 17:15:07,008	[INFO]	475	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:15:07,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:15:07,010	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:15:07,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:15:08,016	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-31 17:15:08,971	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:15:08,973	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:15:08,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-31 17:15:08,974	[INFO]	480	SUCCESS	+2.0	
2020-12-31 17:15:08,974	[DEBUG]	
2020-12-31 17:15:10,026	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-31 17:15:11,025	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:15:14,433	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-31 17:15:14,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-31 17:15:15,455	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-31 17:15:16,482	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:15:16,483	[INFO]	486	SUCCESS	+2.0	
2020-12-31 17:15:16,483	[DEBUG]	
2020-12-31 17:15:17,509	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-31 17:15:20,975	[INFO]	488	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-31 17:15:20,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-31 17:15:20,977	[INFO]	489	SUCCESS	+2.0	
2020-12-31 17:15:20,977	[DEBUG]	
2020-12-31 17:15:21,982	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:15:22,999	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:15:24,053	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-31 17:15:25,093	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-31 17:15:26,175	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:15:27,112	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-31 17:15:28,136	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-31 17:15:29,144	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-31 17:15:30,175	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-31 17:15:33,542	[INFO]	499	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-31 17:15:34,550	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-31 17:15:34,551	[INFO]	==== END ====
2020-12-31 17:15:34,551	[INFO]	Reason: step budget
2020-12-31 17:15:34,551	[INFO]	
2020-12-31 17:15:34,551	[INFO]	========== REPORT ==========
2020-12-31 17:15:34,552	[INFO]	==== Epoch 1 ====
2020-12-31 17:15:34,552	[INFO]	Termination: step budget
2020-12-31 17:15:34,552	[INFO]	Number of interations: 500
2020-12-31 17:15:34,552	[INFO]	==== Epoch 2 ====
2020-12-31 17:15:34,552	[INFO]	Termination: step budget
2020-12-31 17:15:34,552	[INFO]	Number of interations: 500
2020-12-31 17:15:34,552	[INFO]	==== Epoch 3 ====
2020-12-31 17:15:34,552	[INFO]	Termination: step budget
2020-12-31 17:15:34,552	[INFO]	Number of interations: 500
2020-12-31 17:15:34,552	[INFO]	==== Epoch 4 ====
2020-12-31 17:15:34,552	[INFO]	Termination: step budget
2020-12-31 17:15:34,552	[INFO]	Number of interations: 500
2020-12-31 17:15:34,552	[INFO]	==== Epoch 5 ====
2020-12-31 17:15:34,552	[INFO]	Termination: step budget
2020-12-31 17:15:34,552	[INFO]	Number of interations: 500
2020-12-31 17:15:34,552	[INFO]	==== Epoch 6 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 7 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 8 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 9 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 10 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 11 ====
2020-12-31 17:15:34,553	[INFO]	Termination: step budget
2020-12-31 17:15:34,553	[INFO]	Number of interations: 500
2020-12-31 17:15:34,553	[INFO]	==== Epoch 12 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,554	[INFO]	==== Epoch 13 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,554	[INFO]	==== Epoch 14 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,554	[INFO]	==== Epoch 15 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,554	[INFO]	==== Epoch 16 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,554	[INFO]	==== Epoch 17 ====
2020-12-31 17:15:34,554	[INFO]	Termination: step budget
2020-12-31 17:15:34,554	[INFO]	Number of interations: 500
2020-12-31 17:15:34,555	[INFO]	==== Epoch 18 ====
2020-12-31 17:15:34,555	[INFO]	Termination: step budget
2020-12-31 17:15:34,555	[INFO]	Number of interations: 500
2020-12-31 17:15:34,555	[INFO]	==== Epoch 19 ====
2020-12-31 17:15:34,555	[INFO]	Termination: step budget
2020-12-31 17:15:34,555	[INFO]	Number of interations: 500
2020-12-31 17:15:34,555	[INFO]	==== Epoch 20 ====
2020-12-31 17:15:34,555	[INFO]	Termination: step budget
2020-12-31 17:15:34,555	[INFO]	Number of interations: 500
2020-12-31 17:15:34,560	[INFO]	Experiment duration: 13780.06128025055
