2020-12-10 03:44:48,425	[INFO]	Path to the temporal program variants: ./.pyggi/tmp_variants/QuixBugs/1607568288
2020-12-10 03:44:48,425	[INFO]	========== EXPERIMENT FOR ['java_programs/LIS.java.xml']  ==========
2020-12-10 03:44:48,425	[INFO]	modification points:
 ['./decl_stmt[1]', './decl_stmt[2]', './decl_stmt[3]', './for[1]', './for[1]/decl_stmt[1]', './for[1]/for[1]', './for[1]/for[1]/operator_comp[1]', './for[1]/for[1]/if[1]', './for[1]/for[1]/if[1]/operator_comp[1]', './for[1]/for[1]/if[1]/expr_stmt[1]', './for[1]/decl_stmt[2]', './for[1]/if[1]', './for[1]/if[1]/operator_comp[1]', './for[1]/if[1]/operator_comp[2]', './for[1]/if[1]/expr_stmt[1]', './for[1]/if[1]/expr_stmt[2]', './for[1]/expr_stmt[1]', './return[1]']
2020-12-10 03:44:48,426	[INFO]	number of statements and comparisons: 14, 4
2020-12-10 03:44:48,426	[INFO]	========== EPOCH 1 ==========
2020-12-10 03:44:48,426	[INFO]	==== WARMUP ====
2020-12-10 03:44:51,267	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:44:51,268	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:44:54,108	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:44:54,108	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:44:56,915	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:44:56,915	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:44:59,818	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 03:44:59,818	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:44:59,819	[INFO]	==== START ====
2020-12-10 03:45:00,756	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:45:03,647	[INFO]	2	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:45:03,649	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 03:45:03,650	[INFO]	3	SUCCESS	+4.0	
2020-12-10 03:45:03,651	[DEBUG]	
2020-12-10 03:45:04,581	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:45:05,521	[INFO]	5	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:45:06,437	[INFO]	6	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:45:07,386	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:45:10,336	[INFO]	8	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:45:10,337	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 03:45:13,181	[INFO]	9	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:45:13,181	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 31,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 03:45:13,182	[INFO]	10	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:45:13,183	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 03:45:13,183	[INFO]	11	SUCCESS	+4.0	
2020-12-10 03:45:13,184	[DEBUG]	
2020-12-10 03:45:14,104	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:45:15,039	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:45:15,977	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:45:16,927	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:45:17,830	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:45:20,688	[INFO]	17	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:45:20,689	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             i++;
  
              i++;
          }

2020-12-10 03:45:21,607	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:45:21,610	[INFO]	19	SUCCESS	+4.0	
2020-12-10 03:45:21,611	[DEBUG]	
2020-12-10 03:45:22,568	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:45:23,536	[INFO]	21	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:45:24,480	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:45:25,318	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:45:26,240	[INFO]	24	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:45:27,165	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:45:30,068	[INFO]	26	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:45:30,069	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 prefix_lengths.add(j);
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 03:45:30,990	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:45:30,993	[INFO]	28	SUCCESS	+4.0	
2020-12-10 03:45:30,994	[DEBUG]	
2020-12-10 03:45:31,941	[INFO]	29	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:45:32,868	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:45:33,815	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:45:34,749	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:45:35,796	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:45:36,768	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:45:37,854	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:45:38,821	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:45:41,647	[INFO]	37	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:45:41,648	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 03:45:41,649	[INFO]	38	SUCCESS	+4.0	
2020-12-10 03:45:41,649	[DEBUG]	
2020-12-10 03:45:42,565	[INFO]	39	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:45:43,523	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:45:46,389	[INFO]	41	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:45:46,390	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  

2020-12-10 03:45:47,328	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:45:47,330	[INFO]	43	SUCCESS	+4.0	
2020-12-10 03:45:47,331	[DEBUG]	
2020-12-10 03:45:50,202	[INFO]	44	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:45:50,203	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 03:45:51,169	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:45:52,141	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:45:53,066	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:45:53,069	[INFO]	48	SUCCESS	+4.0	
2020-12-10 03:45:53,069	[DEBUG]	
2020-12-10 03:45:55,953	[INFO]	49	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:45:55,955	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 03:45:58,800	[INFO]	50	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:45:58,801	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 31,36 ****
--- 32,39 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 03:46:01,603	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:46:01,604	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 03:46:02,514	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:46:05,375	[INFO]	53	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:46:05,376	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 31,36 ****
--- 34,41 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 03:46:08,253	[INFO]	54	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:46:08,254	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,40 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 03:46:09,190	[INFO]	55	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:46:12,021	[INFO]	56	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:46:12,022	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,41 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 03:46:12,968	[INFO]	57	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:46:15,849	[INFO]	58	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:46:15,850	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,39 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 03:46:18,675	[INFO]	59	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:46:18,676	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 03:46:19,605	[INFO]	60	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:46:22,542	[INFO]	61	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:46:22,543	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 03:46:25,434	[INFO]	62	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:46:25,435	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,36 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 03:46:28,334	[INFO]	63	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:46:28,335	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:46:28,336	[INFO]	64	SUCCESS	+4.0	
2020-12-10 03:46:28,336	[DEBUG]	
2020-12-10 03:46:28,337	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:46:28,337	[DEBUG]	
2020-12-10 03:46:28,338	[INFO]	66	SUCCESS	+4.0	
2020-12-10 03:46:28,338	[DEBUG]	
2020-12-10 03:46:29,217	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:46:30,161	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:46:31,077	[INFO]	69	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:46:32,017	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:46:34,888	[INFO]	71	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:46:34,889	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 03:46:34,890	[INFO]	72	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:46:34,891	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 03:46:35,802	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:46:35,804	[INFO]	74	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:46:35,804	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 03:46:35,805	[INFO]	75	SUCCESS	+4.0	
2020-12-10 03:46:35,805	[DEBUG]	
2020-12-10 03:46:38,679	[INFO]	76	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:46:38,680	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 03:46:41,565	[INFO]	77	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:46:41,566	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,35 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
          }
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 03:46:41,568	[INFO]	78	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:46:41,568	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 03:46:42,394	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:46:43,342	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:46:46,172	[INFO]	81	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:46:46,173	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 03:46:47,088	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:46:48,021	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:46:50,901	[INFO]	84	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:46:50,902	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 03:46:50,902	[INFO]	85	SUCCESS	+4.0	
2020-12-10 03:46:50,903	[DEBUG]	
2020-12-10 03:46:50,903	[INFO]	86	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:46:50,904	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 03:46:51,904	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:46:52,831	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:46:52,832	[INFO]	89	SUCCESS	+4.0	
2020-12-10 03:46:52,832	[DEBUG]	
2020-12-10 03:46:53,773	[INFO]	90	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:46:54,683	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:46:55,613	[INFO]	92	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:46:56,553	[INFO]	93	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:46:57,471	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:46:58,380	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:47:01,262	[INFO]	96	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 03:47:01,262	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:47:02,180	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:47:03,046	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:47:03,047	[INFO]	99	SUCCESS	+4.0	
2020-12-10 03:47:03,047	[DEBUG]	
2020-12-10 03:47:06,004	[INFO]	100	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:47:06,004	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 03:47:06,005	[INFO]	101	SUCCESS	+4.0	
2020-12-10 03:47:06,005	[DEBUG]	
2020-12-10 03:47:06,876	[INFO]	102	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:47:07,818	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:47:08,734	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:47:11,670	[INFO]	105	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:47:11,671	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 03:47:12,581	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:47:12,583	[INFO]	107	SUCCESS	+4.0	
2020-12-10 03:47:12,584	[DEBUG]	
2020-12-10 03:47:13,522	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:47:14,466	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:47:15,389	[INFO]	110	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:47:16,324	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:47:17,244	[INFO]	112	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:47:18,163	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:47:21,070	[INFO]	114	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:47:21,071	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:47:23,955	[INFO]	115	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:47:23,957	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,48 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:47:24,880	[INFO]	116	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:47:27,752	[INFO]	117	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:47:27,753	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:47:28,660	[INFO]	118	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:47:28,661	[INFO]	119	SUCCESS	+4.0	
2020-12-10 03:47:28,661	[DEBUG]	
2020-12-10 03:47:29,571	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:47:29,572	[INFO]	121	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 03:47:29,573	[DEBUG]	
2020-12-10 03:47:29,574	[INFO]	122	SUCCESS	+4.0	
2020-12-10 03:47:29,574	[DEBUG]	
2020-12-10 03:47:30,519	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:47:31,500	[INFO]	124	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:47:32,448	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:47:33,363	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:47:34,282	[INFO]	127	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:47:35,234	[INFO]	128	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:47:38,059	[INFO]	129	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:47:38,060	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 03:47:40,908	[INFO]	130	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:47:40,909	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 29,35 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 03:47:43,779	[INFO]	131	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:47:43,779	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 03:47:43,780	[INFO]	132	SUCCESS	+4.0	
2020-12-10 03:47:43,780	[DEBUG]	
2020-12-10 03:47:44,693	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:47:45,627	[INFO]	134	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:47:46,562	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:47:47,478	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:47:48,418	[INFO]	137	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:47:49,364	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:47:52,342	[INFO]	139	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:47:52,344	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:47:55,093	[INFO]	140	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:47:55,094	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,35 ****
--- 28,42 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 03:47:57,939	[INFO]	141	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:47:57,940	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 03:47:58,856	[INFO]	142	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:47:58,859	[INFO]	143	SUCCESS	+4.0	
2020-12-10 03:47:58,860	[DEBUG]	
2020-12-10 03:47:59,826	[INFO]	144	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:48:00,780	[INFO]	145	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:48:01,744	[INFO]	146	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:48:02,661	[INFO]	147	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:48:03,525	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:48:04,451	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:48:05,361	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:48:06,304	[INFO]	151	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:48:07,269	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:48:08,202	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:48:09,114	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:48:11,980	[INFO]	155	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:48:11,981	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:48:11,982	[INFO]	156	SUCCESS	+4.0	
2020-12-10 03:48:11,982	[DEBUG]	
2020-12-10 03:48:12,879	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:48:13,841	[INFO]	158	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:48:14,822	[INFO]	159	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:48:14,823	[INFO]	160	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:48:15,733	[INFO]	161	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:48:16,676	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:48:17,590	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:48:20,524	[INFO]	164	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:48:20,525	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:48:20,525	[INFO]	165	SUCCESS	+4.0	
2020-12-10 03:48:20,526	[DEBUG]	
2020-12-10 03:48:21,438	[INFO]	166	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:48:24,474	[INFO]	167	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:48:24,475	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:48:27,372	[INFO]	168	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:48:27,373	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,33 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 19,35 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:48:27,374	[INFO]	169	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:48:27,374	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:48:27,375	[INFO]	170	SUCCESS	+4.0	
2020-12-10 03:48:27,375	[DEBUG]	
2020-12-10 03:48:28,270	[INFO]	171	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:48:29,230	[INFO]	172	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:48:30,179	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:48:31,085	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:48:32,036	[INFO]	175	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:48:32,948	[INFO]	176	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:48:33,888	[INFO]	177	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:48:36,711	[INFO]	178	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:48:36,712	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 03:48:36,713	[INFO]	179	SUCCESS	+4.0	
2020-12-10 03:48:36,714	[DEBUG]	
2020-12-10 03:48:39,528	[INFO]	180	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 03:48:39,530	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:48:39,532	[INFO]	181	SUCCESS	+4.0	
2020-12-10 03:48:39,533	[DEBUG]	
2020-12-10 03:48:42,368	[INFO]	182	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:48:42,371	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 03:48:42,372	[INFO]	183	SUCCESS	+4.0	
2020-12-10 03:48:42,373	[DEBUG]	
2020-12-10 03:48:43,300	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:48:43,304	[INFO]	185	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:48:46,134	[INFO]	186	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:48:46,135	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  

2020-12-10 03:48:47,068	[INFO]	187	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:48:47,987	[INFO]	188	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:48:48,932	[INFO]	189	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:48:49,874	[INFO]	190	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:48:49,877	[INFO]	191	SUCCESS	+4.0	
2020-12-10 03:48:49,878	[DEBUG]	
2020-12-10 03:48:50,772	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:48:53,690	[INFO]	193	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:48:53,691	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 16,21 ****
--- 16,23 ----
  
          int i = 0;
          for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 03:48:54,541	[INFO]	194	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:48:54,544	[INFO]	195	SUCCESS	+4.0	
2020-12-10 03:48:54,544	[DEBUG]	
2020-12-10 03:48:55,466	[INFO]	196	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:48:56,407	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:48:57,340	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:48:58,289	[INFO]	199	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:48:59,238	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:49:00,133	[INFO]	201	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:49:01,039	[INFO]	202	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:49:01,955	[INFO]	203	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:49:02,897	[INFO]	204	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:49:05,749	[INFO]	205	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:49:05,750	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:05,751	[INFO]	206	SUCCESS	 4.0	
2020-12-10 03:49:06,640	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:49:07,590	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:49:08,504	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:49:11,391	[INFO]	210	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:49:12,330	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:49:13,245	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:49:14,178	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:49:15,081	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:49:16,007	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:49:17,117	[INFO]	216	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:49:18,070	[INFO]	217	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:49:18,976	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:49:21,812	[INFO]	219	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:49:21,813	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,35 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 03:49:21,814	[INFO]	220	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:49:21,814	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:22,734	[INFO]	221	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:49:22,735	[INFO]	222	SUCCESS	 4.0	
2020-12-10 03:49:22,737	[INFO]	223	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:49:23,639	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:49:24,548	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:49:25,468	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:49:26,423	[INFO]	227	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:49:27,310	[INFO]	228	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:49:30,179	[INFO]	229	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 03:49:30,180	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:31,102	[INFO]	230	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:49:33,913	[INFO]	231	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 03:49:33,914	[INFO]	232	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:49:33,914	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:34,830	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:49:34,831	[INFO]	234	SUCCESS	 4.0	
2020-12-10 03:49:35,762	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:49:36,687	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:49:37,651	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:49:40,521	[INFO]	238	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 03:49:41,437	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:49:42,320	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:49:45,432	[INFO]	241	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:49:45,433	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:46,344	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:49:49,180	[INFO]	243	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:49:50,113	[INFO]	244	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:49:50,114	[INFO]	245	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:49:50,115	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:49:50,115	[INFO]	246	SUCCESS	 4.0	
2020-12-10 03:49:51,065	[INFO]	247	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:49:52,019	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:49:52,970	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:49:53,926	[INFO]	250	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:49:54,877	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:49:55,827	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:49:56,743	[INFO]	253	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:49:57,671	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:49:58,591	[INFO]	255	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:49:59,556	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:50:00,478	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:50:01,411	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:50:02,330	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:50:03,246	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:50:03,248	[INFO]	261	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:50:03,248	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:03,249	[INFO]	262	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:50:03,249	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:04,162	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:50:04,163	[INFO]	264	SUCCESS	 4.0	
2020-12-10 03:50:06,972	[INFO]	265	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 03:50:07,915	[INFO]	266	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:50:10,816	[INFO]	267	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:50:13,667	[INFO]	268	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:50:13,668	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:50:14,567	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:50:15,506	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:50:18,419	[INFO]	271	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:50:18,420	[INFO]	272	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:50:18,420	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:19,316	[INFO]	273	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:50:19,318	[INFO]	274	SUCCESS	 4.0	
2020-12-10 03:50:22,269	[INFO]	275	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:50:22,270	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:50:25,172	[INFO]	276	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:50:25,175	[INFO]	277	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:50:25,176	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:26,074	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:50:26,075	[INFO]	279	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:50:26,076	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:26,077	[INFO]	280	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:50:26,077	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:26,078	[INFO]	281	SUCCESS	 4.0	
2020-12-10 03:50:27,029	[INFO]	282	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:50:27,933	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:50:28,915	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:50:29,867	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:50:30,815	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:50:31,635	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:50:32,574	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:50:33,562	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:50:34,473	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:50:35,500	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:50:36,846	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:50:38,116	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:50:39,399	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:50:39,401	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:50:42,913	[INFO]	296	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:50:43,852	[INFO]	297	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:50:45,099	[INFO]	298	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:50:46,253	[INFO]	299	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:50:47,187	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:50:48,101	[INFO]	301	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:50:49,028	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:50:49,031	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:50:49,937	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:50:50,929	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:50:51,873	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:50:54,868	[INFO]	307	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:50:54,869	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:55,779	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:50:55,782	[INFO]	309	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:50:55,783	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:50:55,785	[INFO]	310	SUCCESS	 4.0	
2020-12-10 03:50:56,691	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:50:57,584	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:50:58,516	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:51:01,445	[INFO]	314	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:51:02,341	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:51:05,169	[INFO]	316	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:51:05,170	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:06,076	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:51:09,025	[INFO]	318	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:51:09,027	[INFO]	319	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:51:09,027	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:09,889	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:51:09,890	[INFO]	321	SUCCESS	 4.0	
2020-12-10 03:51:10,822	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:51:11,743	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:51:14,598	[INFO]	324	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:51:14,600	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:51:17,466	[INFO]	325	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:51:20,268	[INFO]	326	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:51:20,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,40 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:51:23,068	[INFO]	327	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:51:23,985	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:51:24,913	[INFO]	329	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:51:25,846	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:51:26,773	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:51:29,634	[INFO]	332	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:51:29,635	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:32,627	[INFO]	333	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:51:33,479	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:51:34,420	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:51:35,341	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:51:35,342	[INFO]	337	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:51:35,342	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:36,274	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:51:36,277	[INFO]	339	SUCCESS	 4.0	
2020-12-10 03:51:37,203	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:51:38,133	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:51:39,068	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:51:40,011	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:51:40,014	[INFO]	344	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:51:40,015	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:42,894	[INFO]	345	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:51:43,815	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:51:43,818	[INFO]	347	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:51:43,819	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:51:44,751	[INFO]	348	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:51:47,680	[INFO]	349	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:51:47,682	[INFO]	350	SUCCESS	 4.0	
2020-12-10 03:51:48,553	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:51:49,504	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:51:50,476	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:51:53,332	[INFO]	354	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 03:51:54,264	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:51:55,228	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:51:58,083	[INFO]	357	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:51:59,004	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:51:59,927	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:52:00,768	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:52:01,683	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:52:02,618	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:52:02,620	[INFO]	363	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:52:02,620	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:02,621	[INFO]	364	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:52:02,621	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:02,622	[INFO]	365	SUCCESS	 4.0	
2020-12-10 03:52:05,477	[INFO]	366	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:52:08,352	[INFO]	367	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:52:09,260	[INFO]	368	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:52:10,091	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:52:10,093	[INFO]	370	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:52:11,047	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:52:11,993	[INFO]	372	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:52:12,954	[INFO]	373	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:52:15,886	[INFO]	374	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:52:16,777	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:52:17,688	[INFO]	376	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:52:18,614	[INFO]	377	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:52:19,597	[INFO]	378	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:52:19,598	[INFO]	379	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:52:19,599	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:20,508	[INFO]	380	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:52:20,509	[INFO]	381	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:52:20,509	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:23,359	[INFO]	382	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:52:23,360	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:26,260	[INFO]	383	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:52:26,261	[INFO]	384	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:52:26,262	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:27,118	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:52:28,054	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:52:29,019	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:52:29,974	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:52:29,975	[INFO]	389	SUCCESS	 4.0	
2020-12-10 03:52:30,914	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:52:30,917	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:52:31,856	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:52:32,836	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:52:33,785	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:52:34,711	[INFO]	395	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:52:35,642	[INFO]	396	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:52:36,507	[INFO]	397	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:52:37,414	[INFO]	398	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:52:38,367	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:52:39,279	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:52:42,181	[INFO]	401	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:52:43,070	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:52:44,015	[INFO]	403	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:52:44,944	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:52:45,879	[INFO]	405	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:52:46,850	[INFO]	406	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:52:47,798	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:52:48,733	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:52:51,699	[INFO]	409	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 03:52:54,583	[INFO]	410	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:52:54,584	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,32 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 20,33 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:54,585	[INFO]	411	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:52:54,585	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:52:54,586	[INFO]	412	SUCCESS	 4.0	
2020-12-10 03:52:54,587	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:52:55,477	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:52:56,398	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:52:57,311	[INFO]	416	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:53:00,199	[INFO]	417	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:53:00,200	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:01,081	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:53:03,957	[INFO]	419	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:53:04,878	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:53:05,840	[INFO]	421	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:53:06,787	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:53:06,790	[INFO]	423	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:06,791	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:07,714	[INFO]	424	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:53:08,653	[INFO]	425	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:53:08,655	[INFO]	426	SUCCESS	 4.0	
2020-12-10 03:53:11,649	[INFO]	427	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:53:11,651	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:11,652	[INFO]	428	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:11,653	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:12,549	[INFO]	429	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:53:13,499	[INFO]	430	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:53:13,502	[INFO]	431	SUCCESS	 4.0	
2020-12-10 03:53:14,456	[INFO]	432	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:53:15,404	[INFO]	433	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:53:16,314	[INFO]	434	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:53:17,246	[INFO]	435	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:53:18,190	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:53:19,093	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:53:19,095	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:53:20,045	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:53:20,984	[INFO]	440	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:53:23,824	[INFO]	441	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:53:24,754	[INFO]	442	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:53:25,699	[INFO]	443	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:53:25,702	[INFO]	444	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:53:25,703	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:25,706	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:53:25,708	[INFO]	446	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:25,709	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:25,710	[INFO]	447	SUCCESS	 4.0	
2020-12-10 03:53:26,627	[INFO]	448	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:53:27,582	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:53:28,581	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:53:29,512	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:53:29,513	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:53:30,459	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:53:31,377	[INFO]	454	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:53:32,221	[INFO]	455	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:53:35,154	[INFO]	456	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:53:36,044	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:53:36,981	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:53:39,877	[INFO]	459	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:53:39,878	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:42,738	[INFO]	460	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:53:42,739	[INFO]	461	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:42,740	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:42,740	[INFO]	462	SUCCESS	 4.0	
2020-12-10 03:53:45,557	[INFO]	463	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:53:45,558	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:45,560	[INFO]	464	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:45,560	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:46,469	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:53:49,390	[INFO]	466	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:53:49,392	[INFO]	467	SUCCESS	 4.0	
2020-12-10 03:53:50,311	[INFO]	468	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:53:51,243	[INFO]	469	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:53:52,213	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:53:53,157	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:53:53,159	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:53:54,094	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:53:54,095	[INFO]	474	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:53:54,096	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:55,049	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:53:55,050	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:53:55,051	[INFO]	477	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:53:55,052	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:53:55,929	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:53:56,866	[INFO]	479	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:53:56,868	[INFO]	480	SUCCESS	 4.0	
2020-12-10 03:53:59,721	[INFO]	481	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:53:59,723	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 03:54:00,643	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:54:03,510	[INFO]	483	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:54:06,340	[INFO]	484	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:54:06,341	[INFO]	485	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:54:06,341	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:54:06,342	[INFO]	486	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:54:07,259	[INFO]	487	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:54:08,177	[INFO]	488	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:54:08,178	[INFO]	489	SUCCESS	 4.0	
2020-12-10 03:54:11,025	[INFO]	490	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:54:11,026	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:54:11,027	[INFO]	491	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:54:11,027	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:54:11,028	[INFO]	492	SUCCESS	 4.0	
2020-12-10 03:54:11,944	[INFO]	493	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:54:12,919	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:54:13,887	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:54:14,788	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:54:15,717	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:54:18,560	[INFO]	498	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:54:18,561	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 03:54:18,561	[INFO]	499	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 03:54:18,562	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:54:19,481	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:54:19,481	[INFO]	==== END ====
2020-12-10 03:54:19,482	[INFO]	Reason: step budget
2020-12-10 03:54:19,483	[INFO]	
2020-12-10 03:54:19,483	[INFO]	========== EPOCH 2 ==========
2020-12-10 03:54:19,483	[INFO]	==== WARMUP ====
2020-12-10 03:54:22,454	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:54:22,454	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:54:25,240	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:54:25,241	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:54:28,177	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:54:28,177	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:54:31,051	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 03:54:31,051	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:54:31,051	[INFO]	==== START ====
2020-12-10 03:54:31,999	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:54:32,906	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:54:33,857	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:54:33,859	[INFO]	4	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:54:33,859	[DEBUG]	
2020-12-10 03:54:33,860	[INFO]	5	SUCCESS	+4.0	
2020-12-10 03:54:33,860	[DEBUG]	
2020-12-10 03:54:36,746	[INFO]	6	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:54:36,748	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 03:54:36,748	[INFO]	7	SUCCESS	+4.0	
2020-12-10 03:54:36,748	[DEBUG]	
2020-12-10 03:54:37,666	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:54:40,608	[INFO]	9	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:54:40,609	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:54:40,610	[INFO]	10	SUCCESS	+4.0	
2020-12-10 03:54:40,610	[DEBUG]	
2020-12-10 03:54:41,488	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:54:44,336	[INFO]	12	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:54:44,336	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:54:44,337	[INFO]	13	SUCCESS	+4.0	
2020-12-10 03:54:44,337	[DEBUG]	
2020-12-10 03:54:45,229	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:54:46,150	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:54:47,067	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:54:47,989	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:54:50,886	[INFO]	18	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:54:50,888	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:54:50,890	[INFO]	19	SUCCESS	+4.0	
2020-12-10 03:54:50,890	[DEBUG]	
2020-12-10 03:54:51,805	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:54:52,725	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:54:52,726	[INFO]	22	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 03:54:52,726	[DEBUG]	
2020-12-10 03:54:55,571	[INFO]	23	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:54:55,572	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:54:55,573	[INFO]	24	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:54:55,574	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:54:55,575	[INFO]	25	SUCCESS	+4.0	
2020-12-10 03:54:55,575	[DEBUG]	
2020-12-10 03:54:55,577	[INFO]	26	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:54:55,577	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:54:58,457	[INFO]	27	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:54:58,458	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,59 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:55:01,299	[INFO]	28	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:01,300	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,54 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 return longest;
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:55:01,302	[INFO]	29	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:01,302	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,54 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 return longest;
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:55:01,303	[INFO]	30	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:01,304	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 03:55:02,265	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:02,268	[INFO]	32	SUCCESS	+4.0	
2020-12-10 03:55:02,269	[DEBUG]	
2020-12-10 03:55:03,229	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:04,144	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:05,057	[INFO]	35	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:55:05,967	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:06,880	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:55:07,834	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:08,709	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:55:11,547	[INFO]	40	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:55:11,548	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 03:55:11,549	[INFO]	41	SUCCESS	+4.0	
2020-12-10 03:55:11,549	[DEBUG]	
2020-12-10 03:55:12,459	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:55:12,462	[INFO]	43	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:55:15,344	[INFO]	44	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:15,346	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 03:55:15,347	[INFO]	45	SUCCESS	+4.0	
2020-12-10 03:55:15,348	[DEBUG]	
2020-12-10 03:55:15,349	[INFO]	46	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:15,350	[DEBUG]	
2020-12-10 03:55:15,351	[INFO]	47	SUCCESS	+4.0	
2020-12-10 03:55:15,351	[DEBUG]	
2020-12-10 03:55:16,243	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:55:17,163	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:18,126	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:55:19,049	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:21,941	[INFO]	52	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:55:21,943	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 03:55:24,781	[INFO]	53	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 03:55:24,782	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,26 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
--- 19,27 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 03:55:25,719	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:55:25,722	[INFO]	55	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:55:25,723	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 03:55:25,724	[INFO]	56	SUCCESS	+4.0	
2020-12-10 03:55:25,725	[DEBUG]	
2020-12-10 03:55:26,635	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:55:27,559	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:55:28,531	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:29,489	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:55:32,442	[INFO]	61	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:32,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             return longest;
          }
          return longest;
      }

2020-12-10 03:55:35,224	[INFO]	62	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:35,225	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:35,226	[INFO]	63	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:35,226	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:37,975	[INFO]	64	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:37,976	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:37,977	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:55:37,978	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:37,979	[INFO]	66	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:37,980	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,805	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:38,806	[INFO]	68	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:55:38,807	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,808	[INFO]	69	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:38,809	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,810	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:38,811	[INFO]	71	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:55:38,812	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,813	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:55:38,814	[INFO]	73	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:38,815	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,817	[INFO]	74	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:38,817	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:38,819	[INFO]	75	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:55:38,819	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:39,711	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:39,715	[INFO]	77	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:39,717	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:42,559	[INFO]	78	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:42,562	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,24 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!         int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
          return longest;
      }
  }

2020-12-10 03:55:43,456	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:55:43,458	[INFO]	80	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:43,459	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,24 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!         int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
          return longest;
      }
  }

2020-12-10 03:55:43,460	[INFO]	81	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:43,461	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,24 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!         int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
          return longest;
      }
  }

2020-12-10 03:55:43,462	[INFO]	82	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:43,463	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:43,464	[INFO]	83	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:55:43,465	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:44,349	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:55:44,353	[INFO]	85	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:44,355	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:44,359	[INFO]	86	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:55:44,361	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:45,260	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:55:45,265	[INFO]	88	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:55:45,267	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:45,270	[INFO]	89	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:55:45,272	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:45,276	[INFO]	90	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:55:45,279	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:45,282	[INFO]	91	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:55:45,284	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,249	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:55:46,250	[INFO]	93	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:55:46,251	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,253	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:55:46,254	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,255	[INFO]	95	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:55:46,256	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,257	[INFO]	96	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:55:46,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,260	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:55:46,261	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,263	[INFO]	98	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:55:46,264	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,265	[INFO]	99	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:55:46,266	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,268	[INFO]	100	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:55:46,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,270	[INFO]	101	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:55:46,271	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,272	[INFO]	102	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:55:46,273	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,275	[INFO]	103	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:46,276	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,278	[INFO]	104	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:46,279	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,281	[INFO]	105	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:55:46,281	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,283	[INFO]	106	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:55:46,284	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,285	[INFO]	107	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:55:46,286	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,287	[INFO]	108	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:46,288	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,290	[INFO]	109	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:46,291	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,292	[INFO]	110	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:55:46,293	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:46,295	[INFO]	111	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:55:46,296	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,225	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:47,228	[INFO]	113	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:47,228	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,230	[INFO]	114	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:55:47,231	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,233	[INFO]	115	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:55:47,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,235	[INFO]	116	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:55:47,236	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,238	[INFO]	117	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:47,239	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,241	[INFO]	118	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:47,242	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,243	[INFO]	119	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:47,244	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:47,246	[INFO]	120	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:47,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:48,152	[INFO]	121	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:55:48,154	[INFO]	122	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:48,155	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:49,045	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:49,047	[INFO]	124	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:49,048	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:49,049	[INFO]	125	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:49,050	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:49,051	[INFO]	126	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:49,052	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:49,053	[INFO]	127	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:49,054	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:49,917	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:55:50,895	[INFO]	129	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:50,899	[INFO]	130	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:50,901	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:50,904	[INFO]	131	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:50,906	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:50,910	[INFO]	132	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:55:50,912	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:50,916	[INFO]	133	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:50,919	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:50,923	[INFO]	134	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:55:50,926	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:50,930	[INFO]	135	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:50,931	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,824	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:51,826	[INFO]	137	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:55:51,827	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,829	[INFO]	138	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:55:51,829	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,831	[INFO]	139	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:55:51,832	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,833	[INFO]	140	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:55:51,834	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,836	[INFO]	141	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:51,837	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,838	[INFO]	142	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:51,839	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,841	[INFO]	143	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:51,842	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,843	[INFO]	144	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:51,844	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,846	[INFO]	145	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:51,847	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,848	[INFO]	146	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:51,849	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,851	[INFO]	147	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:51,852	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,854	[INFO]	148	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:55:51,855	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:51,857	[INFO]	149	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:55:51,858	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:52,692	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:55:52,694	[INFO]	151	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:55:52,695	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:52,696	[INFO]	152	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:52,697	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:52,699	[INFO]	153	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:55:52,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:52,701	[INFO]	154	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:55:52,702	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:53,582	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:55:53,586	[INFO]	156	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:55:53,588	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:53,592	[INFO]	157	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:53,594	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:53,597	[INFO]	158	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:53,600	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,423	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:55:54,425	[INFO]	160	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:54,425	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,427	[INFO]	161	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:55:54,427	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,429	[INFO]	162	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:54,430	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,431	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:55:54,433	[INFO]	164	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:55:54,434	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,435	[INFO]	165	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:55:54,436	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,438	[INFO]	166	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:55:54,439	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,442	[INFO]	167	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:55:54,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,445	[INFO]	168	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:54,446	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,447	[INFO]	169	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:54,448	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,449	[INFO]	170	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:55:54,450	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,452	[INFO]	171	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:54,453	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:54,454	[INFO]	172	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:54,455	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:55,317	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:55:55,319	[INFO]	174	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:55,320	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:55,321	[INFO]	175	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:55,322	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:55,323	[INFO]	176	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:55,324	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:55,326	[INFO]	177	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:55,327	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:55:55,328	[INFO]	178	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:55:55,329	[DEBUG]	
2020-12-10 03:55:55,331	[INFO]	179	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:55,332	[DEBUG]	
2020-12-10 03:55:55,333	[INFO]	180	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:55:55,334	[DEBUG]	
2020-12-10 03:55:55,335	[INFO]	181	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:55,336	[DEBUG]	
2020-12-10 03:55:55,337	[INFO]	182	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:55:55,338	[DEBUG]	
2020-12-10 03:55:55,339	[INFO]	183	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:55:55,340	[DEBUG]	
2020-12-10 03:55:55,341	[INFO]	184	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:55,342	[DEBUG]	
2020-12-10 03:55:55,343	[INFO]	185	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:55:55,344	[DEBUG]	
2020-12-10 03:55:55,345	[INFO]	186	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:55,346	[DEBUG]	
2020-12-10 03:55:55,347	[INFO]	187	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:55:55,348	[DEBUG]	
2020-12-10 03:55:55,349	[INFO]	188	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:55,350	[DEBUG]	
2020-12-10 03:55:55,351	[INFO]	189	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:55,352	[DEBUG]	
2020-12-10 03:55:56,179	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:55:56,181	[INFO]	191	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:56,181	[DEBUG]	
2020-12-10 03:55:56,183	[INFO]	192	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:55:56,183	[DEBUG]	
2020-12-10 03:55:57,106	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:55:57,108	[INFO]	194	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:57,109	[DEBUG]	
2020-12-10 03:55:57,110	[INFO]	195	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:55:57,111	[DEBUG]	
2020-12-10 03:55:57,113	[INFO]	196	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:57,114	[DEBUG]	
2020-12-10 03:55:58,110	[INFO]	197	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:55:58,113	[INFO]	198	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:58,115	[DEBUG]	
2020-12-10 03:55:58,117	[INFO]	199	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:58,118	[DEBUG]	
2020-12-10 03:55:58,119	[INFO]	200	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:58,120	[DEBUG]	
2020-12-10 03:55:58,122	[INFO]	201	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:55:58,124	[DEBUG]	
2020-12-10 03:55:58,126	[INFO]	202	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:55:58,127	[DEBUG]	
2020-12-10 03:55:59,029	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:55:59,033	[INFO]	204	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:55:59,034	[DEBUG]	
2020-12-10 03:55:59,036	[INFO]	205	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:55:59,037	[DEBUG]	
2020-12-10 03:55:59,970	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:55:59,976	[INFO]	207	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 03:55:59,977	[DEBUG]	
2020-12-10 03:56:00,899	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:56:00,905	[INFO]	209	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 03:56:00,908	[DEBUG]	
2020-12-10 03:56:01,826	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:56:02,800	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:02,804	[INFO]	212	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 03:56:02,805	[DEBUG]	
2020-12-10 03:56:02,807	[INFO]	213	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 03:56:02,808	[DEBUG]	
2020-12-10 03:56:02,810	[INFO]	214	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 03:56:02,811	[DEBUG]	
2020-12-10 03:56:02,813	[INFO]	215	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:56:02,815	[DEBUG]	
2020-12-10 03:56:02,816	[INFO]	216	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:56:02,817	[DEBUG]	
2020-12-10 03:56:02,818	[INFO]	217	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:56:02,819	[DEBUG]	
2020-12-10 03:56:02,820	[INFO]	218	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:56:02,821	[DEBUG]	
2020-12-10 03:56:02,822	[INFO]	219	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:02,822	[DEBUG]	
2020-12-10 03:56:02,824	[INFO]	220	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:56:02,824	[DEBUG]	
2020-12-10 03:56:02,825	[INFO]	221	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:02,826	[DEBUG]	
2020-12-10 03:56:02,827	[INFO]	222	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:02,828	[DEBUG]	
2020-12-10 03:56:02,829	[INFO]	223	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:02,829	[DEBUG]	
2020-12-10 03:56:02,830	[INFO]	224	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:02,831	[DEBUG]	
2020-12-10 03:56:02,832	[INFO]	225	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:02,832	[DEBUG]	
2020-12-10 03:56:02,833	[INFO]	226	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:56:02,834	[DEBUG]	
2020-12-10 03:56:02,835	[INFO]	227	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:56:02,835	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:02,837	[INFO]	228	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:02,837	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:03,776	[INFO]	229	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:03,778	[INFO]	230	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:03,778	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:04,616	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:56:05,446	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:56:05,447	[INFO]	233	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:05,448	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:05,449	[INFO]	234	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:05,449	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:06,402	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:07,232	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:56:07,234	[INFO]	237	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:56:07,235	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,236	[INFO]	238	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:56:07,237	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,238	[INFO]	239	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:56:07,239	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,240	[INFO]	240	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 03:56:07,241	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,242	[INFO]	241	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 03:56:07,243	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,245	[INFO]	242	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:07,245	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,247	[INFO]	243	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 03:56:07,247	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,249	[INFO]	244	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:56:07,249	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,251	[INFO]	245	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:07,251	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,253	[INFO]	246	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:56:07,253	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,255	[INFO]	247	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:07,255	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,257	[INFO]	248	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:07,257	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,259	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:56:07,260	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,262	[INFO]	250	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:56:07,263	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,264	[INFO]	251	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:07,265	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,266	[INFO]	252	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:07,267	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:07,269	[INFO]	253	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:07,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,084	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:08,086	[INFO]	255	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:08,087	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,088	[INFO]	256	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:08,089	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,091	[INFO]	257	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:08,091	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,093	[INFO]	258	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:08,094	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,095	[INFO]	259	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:08,096	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,098	[INFO]	260	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:08,099	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,100	[INFO]	261	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:56:08,101	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:08,940	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:56:09,790	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:56:10,787	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 03:56:10,789	[INFO]	265	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,790	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,792	[INFO]	266	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,793	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,794	[INFO]	267	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,795	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,796	[INFO]	268	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,797	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,799	[INFO]	269	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 03:56:10,800	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,801	[INFO]	270	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,802	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,803	[INFO]	271	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,804	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:10,806	[INFO]	272	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:10,807	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:11,635	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:11,637	[INFO]	274	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:11,639	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:11,641	[INFO]	275	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:11,642	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:11,644	[INFO]	276	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:56:11,645	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:11,647	[INFO]	277	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:56:11,648	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:11,650	[INFO]	278	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:11,651	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:12,488	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:56:12,489	[INFO]	280	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:12,490	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:13,442	[INFO]	281	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:13,446	[INFO]	282	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:13,447	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:13,449	[INFO]	283	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:13,450	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,290	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:14,295	[INFO]	285	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 03:56:14,296	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,298	[INFO]	286	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 03:56:14,300	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,302	[INFO]	287	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,304	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,306	[INFO]	288	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,308	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,311	[INFO]	289	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,312	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,314	[INFO]	290	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,316	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,319	[INFO]	291	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,321	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,323	[INFO]	292	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:56:14,325	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,327	[INFO]	293	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:14,328	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,331	[INFO]	294	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:56:14,333	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,335	[INFO]	295	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:56:14,337	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,339	[INFO]	296	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:56:14,340	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:14,341	[INFO]	297	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:56:14,342	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,161	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:56:15,162	[INFO]	299	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:15,163	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,164	[INFO]	300	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:15,165	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
-         for (int val : arr) {
  
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,23 ----
          int longest = 0;
  
          int i = 0;
  
!         i++;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,166	[INFO]	301	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:15,166	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,167	[INFO]	302	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:56:15,168	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,169	[INFO]	303	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:15,170	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,171	[INFO]	304	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:56:15,171	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,173	[INFO]	305	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:56:15,173	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,175	[INFO]	306	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:15,175	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,176	[INFO]	307	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:15,177	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:15,178	[INFO]	308	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:15,178	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:16,019	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:56:16,023	[INFO]	310	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:16,025	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:16,027	[INFO]	311	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:16,029	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:16,979	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:16,982	[INFO]	313	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:16,983	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:16,986	[INFO]	314	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:56:16,987	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:16,989	[INFO]	315	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:16,990	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:17,902	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:17,904	[INFO]	317	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:17,904	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:18,809	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:18,811	[INFO]	319	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:18,812	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:18,813	[INFO]	320	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:18,813	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:18,814	[INFO]	321	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:18,815	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:19,644	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:56:19,645	[INFO]	323	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:19,646	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:19,647	[INFO]	324	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:19,647	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:19,648	[INFO]	325	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:19,649	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:19,650	[INFO]	326	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:56:19,650	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:20,502	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:56:20,506	[INFO]	328	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:20,507	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:20,509	[INFO]	329	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:20,510	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:20,512	[INFO]	330	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:20,513	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:20,515	[INFO]	331	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:56:20,517	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:21,347	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:56:22,168	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:23,103	[INFO]	334	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:56:23,929	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:56:23,931	[INFO]	336	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:23,931	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:23,933	[INFO]	337	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:56:23,933	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:23,934	[INFO]	338	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 03:56:23,935	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:23,936	[INFO]	339	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:23,936	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:24,760	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:24,762	[INFO]	341	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:56:24,762	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:25,703	[INFO]	342	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:56:25,704	[INFO]	343	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:25,705	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:25,706	[INFO]	344	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:56:25,707	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:26,560	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:56:27,403	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:56:27,405	[INFO]	347	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:27,405	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:27,406	[INFO]	348	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:27,407	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:27,408	[INFO]	349	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:56:27,408	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:27,409	[INFO]	350	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:56:27,410	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:27,410	[INFO]	351	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:27,411	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:28,314	[INFO]	352	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:28,315	[INFO]	353	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:28,316	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:28,317	[INFO]	354	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:56:28,317	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:31,045	[INFO]	355	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:56:31,047	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:31,958	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:56:31,961	[INFO]	357	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:56:31,962	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:31,965	[INFO]	358	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:56:31,966	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:31,968	[INFO]	359	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='})
2020-12-10 03:56:31,970	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:31,972	[INFO]	360	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:56:31,974	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:32,776	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:56:32,777	[INFO]	362	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:56:32,778	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 03:56:32,779	[INFO]	363	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:56:32,779	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,706	[INFO]	364	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:56:33,710	[INFO]	365	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:56:33,711	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,714	[INFO]	366	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,715	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,717	[INFO]	367	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,718	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,720	[INFO]	368	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,721	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,724	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:56:33,726	[INFO]	370	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,728	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,731	[INFO]	371	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:56:33,732	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,735	[INFO]	372	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,736	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,739	[INFO]	373	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:33,741	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:33,744	[INFO]	374	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:56:33,745	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:34,544	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:56:34,546	[INFO]	376	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:34,546	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:34,547	[INFO]	377	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:34,548	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:35,492	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:56:35,495	[INFO]	379	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 03:56:35,496	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 03:56:35,497	[INFO]	380	SUCCESS	+4.0	
2020-12-10 03:56:35,498	[DEBUG]	
2020-12-10 03:56:36,450	[INFO]	381	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:56:39,307	[INFO]	382	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:56:39,308	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 03:56:42,231	[INFO]	383	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:56:42,232	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,45 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 03:56:42,233	[INFO]	384	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:56:42,233	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 03:56:42,234	[INFO]	385	SUCCESS	+4.0	
2020-12-10 03:56:42,234	[DEBUG]	
2020-12-10 03:56:43,115	[INFO]	386	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:56:44,064	[INFO]	387	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:56:44,990	[INFO]	388	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:47,983	[INFO]	389	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:56:47,984	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 03:56:47,984	[INFO]	390	SUCCESS	+4.0	
2020-12-10 03:56:47,985	[DEBUG]	
2020-12-10 03:56:48,853	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:56:51,794	[INFO]	392	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:51,796	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:56:54,684	[INFO]	393	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 03:56:54,685	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 29,34 ****
--- 31,37 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:56:54,686	[INFO]	394	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:56:54,686	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:56:54,687	[INFO]	395	SUCCESS	+4.0	
2020-12-10 03:56:54,687	[DEBUG]	
2020-12-10 03:56:55,570	[INFO]	396	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:56:56,494	[INFO]	397	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:56:57,400	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:56:58,315	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:57:01,229	[INFO]	400	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:57:01,230	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 03:57:02,089	[INFO]	401	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:57:02,090	[INFO]	402	SUCCESS	+4.0	
2020-12-10 03:57:02,091	[DEBUG]	
2020-12-10 03:57:04,996	[INFO]	403	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:57:04,998	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 03:57:04,999	[INFO]	404	SUCCESS	+4.0	
2020-12-10 03:57:05,000	[DEBUG]	
2020-12-10 03:57:05,924	[INFO]	405	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:57:06,854	[INFO]	406	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:57:07,792	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:57:08,764	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:57:09,701	[INFO]	409	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:57:09,703	[INFO]	410	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:57:12,585	[INFO]	411	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:57:12,586	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:57:15,451	[INFO]	412	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:57:15,452	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,31 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:57:18,244	[INFO]	413	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:57:18,245	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:57:18,245	[INFO]	414	SUCCESS	+4.0	
2020-12-10 03:57:18,246	[DEBUG]	
2020-12-10 03:57:19,155	[INFO]	415	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:57:19,157	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:57:20,100	[INFO]	417	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:57:21,036	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:57:21,040	[INFO]	419	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:57:21,964	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:57:22,904	[INFO]	421	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:57:23,866	[INFO]	422	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:57:24,803	[INFO]	423	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:57:25,725	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:57:25,727	[INFO]	425	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:57:25,728	[DEBUG]	
2020-12-10 03:57:26,643	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:57:27,557	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:57:27,559	[INFO]	428	SUCCESS	+4.0	
2020-12-10 03:57:27,559	[DEBUG]	
2020-12-10 03:57:28,518	[INFO]	429	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:57:31,433	[INFO]	430	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:57:31,434	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 03:57:31,435	[INFO]	431	SUCCESS	+4.0	
2020-12-10 03:57:31,435	[DEBUG]	
2020-12-10 03:57:32,330	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:57:35,148	[INFO]	433	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 03:57:35,149	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 03:57:35,150	[INFO]	434	SUCCESS	+4.0	
2020-12-10 03:57:35,150	[DEBUG]	
2020-12-10 03:57:36,090	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:57:37,001	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:57:37,935	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:57:38,846	[INFO]	438	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:57:39,808	[INFO]	439	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:57:39,810	[INFO]	440	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:57:39,811	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:57:39,811	[INFO]	441	SUCCESS	+4.0	
2020-12-10 03:57:39,811	[DEBUG]	
2020-12-10 03:57:42,622	[INFO]	442	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 03:57:42,622	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 03:57:43,535	[INFO]	443	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:57:43,537	[INFO]	444	SUCCESS	+4.0	
2020-12-10 03:57:43,537	[DEBUG]	
2020-12-10 03:57:44,463	[INFO]	445	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:57:45,379	[INFO]	446	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 03:57:46,306	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:57:47,223	[INFO]	448	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 03:57:47,224	[INFO]	449	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 03:57:47,225	[DEBUG]	
2020-12-10 03:57:48,177	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:57:48,180	[INFO]	451	SUCCESS	+4.0	
2020-12-10 03:57:48,181	[DEBUG]	
2020-12-10 03:57:49,091	[INFO]	452	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:57:51,984	[INFO]	453	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:57:51,985	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 03:57:52,893	[INFO]	454	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:57:52,895	[INFO]	455	SUCCESS	+4.0	
2020-12-10 03:57:52,895	[DEBUG]	
2020-12-10 03:57:53,835	[INFO]	456	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:57:54,746	[INFO]	457	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:57:55,681	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:57:56,625	[INFO]	459	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:57:59,447	[INFO]	460	SUCCESS	*0.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:57:59,447	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 03:57:59,448	[INFO]	==== END ====
2020-12-10 03:57:59,448	[INFO]	Reason: target fitness reached
2020-12-10 03:57:59,449	[INFO]	
2020-12-10 03:57:59,449	[INFO]	========== EPOCH 3 ==========
2020-12-10 03:57:59,449	[INFO]	==== WARMUP ====
2020-12-10 03:58:02,294	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:58:02,295	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:58:05,185	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:58:05,185	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:58:08,127	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:58:08,128	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:58:11,027	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 03:58:11,028	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:58:11,028	[INFO]	==== START ====
2020-12-10 03:58:11,917	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:58:12,826	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:58:13,761	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:58:14,679	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:58:17,579	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:58:17,581	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 03:58:17,582	[INFO]	6	SUCCESS	+4.0	
2020-12-10 03:58:17,583	[DEBUG]	
2020-12-10 03:58:20,419	[INFO]	7	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:58:20,420	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 03:58:21,320	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 03:58:21,321	[INFO]	9	SUCCESS	+4.0	
2020-12-10 03:58:21,321	[DEBUG]	
2020-12-10 03:58:22,254	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:58:23,209	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:58:24,112	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:58:25,054	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:58:25,982	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:58:26,907	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 03:58:27,859	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:58:28,802	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:58:29,702	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:58:30,629	[INFO]	19	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:58:31,549	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:58:34,405	[INFO]	21	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 03:58:34,406	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 
              }
  
              i++;

2020-12-10 03:58:35,332	[INFO]	22	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 03:58:36,233	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:58:36,235	[INFO]	24	SUCCESS	+4.0	
2020-12-10 03:58:36,235	[DEBUG]	
2020-12-10 03:58:37,155	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:58:38,085	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:58:38,993	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:58:39,931	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:58:40,838	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:58:41,763	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:58:42,665	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:58:43,597	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 03:58:44,534	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:58:45,500	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:58:46,442	[INFO]	35	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 03:58:47,394	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:58:47,397	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:58:48,323	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:58:49,268	[INFO]	39	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:58:50,263	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:58:53,207	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 03:58:53,208	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:58:53,209	[INFO]	42	SUCCESS	+4.0	
2020-12-10 03:58:53,210	[DEBUG]	
2020-12-10 03:58:54,075	[INFO]	43	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 03:58:54,980	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:58:57,901	[INFO]	45	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:58:57,901	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             return longest;
          }
          return longest;
      }

2020-12-10 03:58:58,812	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:58:59,705	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:58:59,706	[INFO]	48	SUCCESS	+4.0	
2020-12-10 03:58:59,707	[DEBUG]	
2020-12-10 03:59:00,640	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:59:03,533	[INFO]	50	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 03:59:03,535	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 03:59:03,536	[INFO]	51	SUCCESS	+4.0	
2020-12-10 03:59:03,537	[DEBUG]	
2020-12-10 03:59:04,468	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 03:59:05,383	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 03:59:06,334	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 03:59:09,218	[INFO]	55	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:59:09,219	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 03:59:10,113	[INFO]	56	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:59:10,114	[INFO]	57	SUCCESS	+4.0	
2020-12-10 03:59:10,114	[DEBUG]	
2020-12-10 03:59:11,087	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:59:12,044	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 03:59:14,915	[INFO]	60	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 03:59:14,916	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 03:59:14,917	[INFO]	==== END ====
2020-12-10 03:59:14,917	[INFO]	Reason: target fitness reached
2020-12-10 03:59:14,918	[INFO]	
2020-12-10 03:59:14,918	[INFO]	========== EPOCH 4 ==========
2020-12-10 03:59:14,918	[INFO]	==== WARMUP ====
2020-12-10 03:59:17,736	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:59:17,736	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:59:20,675	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:59:20,675	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:59:23,540	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 03:59:23,540	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:59:26,383	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 03:59:26,384	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 03:59:26,384	[INFO]	==== START ====
2020-12-10 03:59:29,231	[INFO]	1	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 03:59:29,232	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 03:59:30,149	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 03:59:31,100	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 03:59:32,036	[INFO]	4	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 03:59:32,973	[INFO]	5	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 03:59:33,911	[INFO]	6	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 03:59:33,914	[INFO]	7	SUCCESS	 4.0	
2020-12-10 03:59:36,749	[INFO]	8	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 03:59:37,636	[INFO]	9	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 03:59:38,570	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:59:41,437	[INFO]	11	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:59:42,355	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 03:59:43,309	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 03:59:44,289	[INFO]	14	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 03:59:45,221	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 03:59:46,140	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 03:59:47,079	[INFO]	17	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 03:59:48,032	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 03:59:48,992	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 03:59:49,918	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 03:59:51,031	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 03:59:51,984	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 03:59:54,842	[INFO]	23	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 03:59:55,741	[INFO]	24	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 03:59:56,666	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 03:59:59,585	[INFO]	26	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:00:00,669	[INFO]	27	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:00:01,622	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:00:02,540	[INFO]	29	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:00:05,387	[INFO]	30	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 04:00:05,388	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:05,388	[INFO]	31	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:05,389	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:05,389	[INFO]	32	SUCCESS	 4.0	
2020-12-10 04:00:06,306	[INFO]	33	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:00:09,212	[INFO]	34	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:00:10,094	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:00:11,049	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:00:11,979	[INFO]	37	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:00:12,942	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:00:13,896	[INFO]	39	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:00:14,856	[INFO]	40	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:00:17,738	[INFO]	41	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:00:17,739	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:18,639	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:00:19,590	[INFO]	43	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:00:22,426	[INFO]	44	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:00:23,358	[INFO]	45	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:00:23,359	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:00:24,256	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:00:25,193	[INFO]	48	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:00:25,195	[INFO]	49	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:25,195	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:25,196	[INFO]	50	SUCCESS	 4.0	
2020-12-10 04:00:25,196	[INFO]	51	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:00:25,197	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:28,039	[INFO]	52	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:00:28,966	[INFO]	53	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:00:28,967	[INFO]	54	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:00:28,968	[INFO]	55	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:28,968	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:28,969	[INFO]	56	SUCCESS	 4.0	
2020-12-10 04:00:29,909	[INFO]	57	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:00:32,750	[INFO]	58	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:00:32,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 27,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:32,752	[INFO]	59	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:32,752	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:32,752	[INFO]	60	SUCCESS	 4.0	
2020-12-10 04:00:35,838	[INFO]	61	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:00:37,113	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:00:38,302	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:00:41,283	[INFO]	64	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:00:42,165	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:00:43,098	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:00:44,046	[INFO]	67	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:00:46,960	[INFO]	68	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:00:46,961	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,40 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              i++;

2020-12-10 04:00:49,780	[INFO]	69	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:00:52,645	[INFO]	70	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:00:53,584	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:00:53,588	[INFO]	72	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:53,589	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:56,560	[INFO]	73	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:00:56,562	[INFO]	74	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:00:56,562	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:57,442	[INFO]	75	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:00:57,445	[INFO]	76	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:00:57,446	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:00:57,447	[INFO]	77	SUCCESS	 4.0	
2020-12-10 04:00:58,363	[INFO]	78	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:00:59,272	[INFO]	79	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:01:02,147	[INFO]	80	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:01:03,112	[INFO]	81	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:01:04,016	[INFO]	82	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:01:04,017	[INFO]	83	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:01:04,959	[INFO]	84	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:01:04,963	[INFO]	85	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:01:04,964	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:01:04,965	[INFO]	86	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:01:04,965	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:01:04,966	[INFO]	87	SUCCESS	 4.0	
2020-12-10 04:01:04,968	[INFO]	88	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:01:05,934	[INFO]	89	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:01:08,828	[INFO]	90	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:01:09,729	[INFO]	91	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:01:12,479	[INFO]	92	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:01:13,378	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:01:13,379	[INFO]	94	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:01:14,303	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:01:17,235	[INFO]	96	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 04:01:18,131	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:01:20,966	[INFO]	98	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:01:20,968	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,40 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              i++;

2020-12-10 04:01:21,904	[INFO]	99	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:01:21,906	[INFO]	100	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:01:21,907	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:01:22,858	[INFO]	101	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:01:22,860	[INFO]	102	SUCCESS	 4.0	
2020-12-10 04:01:23,793	[INFO]	103	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:01:24,686	[INFO]	104	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:01:25,626	[INFO]	105	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:01:26,546	[INFO]	106	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:01:29,406	[INFO]	107	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:01:30,316	[INFO]	108	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:01:31,249	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:01:32,161	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:01:33,105	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:01:34,018	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:01:35,013	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:01:37,939	[INFO]	114	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:01:37,940	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:01:38,838	[INFO]	115	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:01:41,690	[INFO]	116	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:01:41,691	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:01:41,691	[INFO]	==== END ====
2020-12-10 04:01:41,691	[INFO]	Reason: target fitness reached
2020-12-10 04:01:41,693	[INFO]	
2020-12-10 04:01:41,693	[INFO]	========== EPOCH 5 ==========
2020-12-10 04:01:41,693	[INFO]	==== WARMUP ====
2020-12-10 04:01:44,536	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:01:44,536	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:01:47,361	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:01:47,362	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:01:50,199	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:01:50,199	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:01:52,985	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:01:52,985	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:01:52,985	[INFO]	==== START ====
2020-12-10 04:01:52,986	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:01:52,987	[DEBUG]	
2020-12-10 04:01:52,987	[INFO]	2	SUCCESS	+4.0	
2020-12-10 04:01:52,988	[DEBUG]	
2020-12-10 04:01:55,817	[INFO]	3	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:01:55,818	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:01:55,819	[INFO]	4	SUCCESS	+4.0	
2020-12-10 04:01:55,819	[DEBUG]	
2020-12-10 04:01:56,712	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:01:57,637	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:01:58,680	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:01:59,641	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:02:00,576	[INFO]	9	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:02:01,513	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:02,335	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:02:03,236	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:02:04,166	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:02:05,149	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:02:08,086	[INFO]	15	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:02:08,087	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:02:08,088	[INFO]	16	SUCCESS	+4.0	
2020-12-10 04:02:08,088	[DEBUG]	
2020-12-10 04:02:08,089	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:02:08,089	[DEBUG]	
2020-12-10 04:02:08,090	[INFO]	18	SUCCESS	+4.0	
2020-12-10 04:02:08,090	[DEBUG]	
2020-12-10 04:02:08,975	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:09,915	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:02:10,828	[INFO]	21	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:02:11,779	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:02:12,731	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:02:13,573	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:02:13,574	[INFO]	25	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:13,574	[DEBUG]	
2020-12-10 04:02:14,477	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:02:15,416	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:15,418	[INFO]	28	SUCCESS	+4.0	
2020-12-10 04:02:15,419	[DEBUG]	
2020-12-10 04:02:16,348	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:02:17,256	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:02:18,171	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:02:19,105	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:02:20,066	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:21,010	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:02:23,853	[INFO]	35	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:02:23,854	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] == val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:02:24,789	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:02:27,631	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:02:27,631	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,32 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] == val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:02:30,550	[INFO]	38	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:02:30,551	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:02:30,552	[INFO]	39	SUCCESS	+4.0	
2020-12-10 04:02:30,552	[DEBUG]	
2020-12-10 04:02:31,468	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:02:32,439	[INFO]	41	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:02:33,377	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:02:34,310	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:02:35,249	[INFO]	44	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:02:36,161	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:02:37,108	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:02:38,036	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:02:38,958	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:02:41,795	[INFO]	49	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:02:41,796	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 prefix_lengths.add(j);
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:02:41,797	[INFO]	50	SUCCESS	+4.0	
2020-12-10 04:02:41,797	[DEBUG]	
2020-12-10 04:02:42,715	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:02:43,621	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:02:44,572	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:02:45,474	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:02:46,378	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:02:49,226	[INFO]	56	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:02:49,228	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:02:52,095	[INFO]	57	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:02:52,096	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,34 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+                 prefix_lengths.add(j);
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:02:53,021	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:02:53,957	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:02:53,959	[INFO]	60	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:02:53,959	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:02:54,908	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:02:54,909	[INFO]	62	SUCCESS	+4.0	
2020-12-10 04:02:54,909	[DEBUG]	
2020-12-10 04:02:55,822	[INFO]	63	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:02:56,745	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:02:59,617	[INFO]	65	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 04:02:59,617	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length != longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:00,496	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:03:00,497	[INFO]	67	SUCCESS	+4.0	
2020-12-10 04:03:00,498	[DEBUG]	
2020-12-10 04:03:03,354	[INFO]	68	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:03:03,355	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:03:04,275	[INFO]	69	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:03:04,277	[INFO]	70	SUCCESS	+4.0	
2020-12-10 04:03:04,278	[DEBUG]	
2020-12-10 04:03:04,280	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:03:05,191	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:03:06,115	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:03:07,068	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:03:07,974	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:03:07,976	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:03:08,896	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:03:11,760	[INFO]	78	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:03:11,762	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:03:12,680	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:03:13,622	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:03:14,552	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:03:14,555	[INFO]	82	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:03:14,556	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:03:15,374	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:03:16,331	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:03:17,247	[INFO]	85	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:03:17,252	[INFO]	86	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:03:17,253	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:03:17,255	[INFO]	87	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:03:17,256	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:03:17,257	[INFO]	88	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:03:17,258	[DEBUG]	
2020-12-10 04:03:17,260	[INFO]	89	SUCCESS	+4.0	
2020-12-10 04:03:17,261	[DEBUG]	
2020-12-10 04:03:17,262	[INFO]	90	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:03:17,263	[DEBUG]	
2020-12-10 04:03:20,160	[INFO]	91	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:03:20,161	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:20,162	[INFO]	92	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:03:20,162	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:20,163	[INFO]	93	SUCCESS	+4.0	
2020-12-10 04:03:20,163	[DEBUG]	
2020-12-10 04:03:21,065	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:03:21,068	[INFO]	95	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:03:21,977	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:03:24,882	[INFO]	97	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:03:24,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 16,21 ****
--- 16,23 ----
  
          int i = 0;
          for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:03:25,771	[INFO]	98	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:03:25,772	[INFO]	99	SUCCESS	+4.0	
2020-12-10 04:03:25,773	[DEBUG]	
2020-12-10 04:03:26,704	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:03:27,657	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:03:28,600	[INFO]	102	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:03:29,533	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:03:30,465	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:03:33,299	[INFO]	105	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:03:33,300	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:36,082	[INFO]	106	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:03:36,986	[INFO]	107	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:03:39,887	[INFO]	108	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:03:39,889	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:40,835	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:03:43,788	[INFO]	110	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:03:43,789	[INFO]	111	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:03:43,789	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:43,790	[INFO]	112	SUCCESS	 4.0	
2020-12-10 04:03:46,585	[INFO]	113	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:03:46,586	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:47,509	[INFO]	114	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:03:47,510	[INFO]	115	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:03:47,511	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:48,418	[INFO]	116	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:03:48,419	[INFO]	117	SUCCESS	 4.0	
2020-12-10 04:03:49,358	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:03:52,267	[INFO]	119	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:03:52,268	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 27,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:53,176	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:03:53,177	[INFO]	121	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:03:53,177	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:03:53,178	[INFO]	122	SUCCESS	 4.0	
2020-12-10 04:03:54,099	[INFO]	123	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:03:55,029	[INFO]	124	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:03:55,947	[INFO]	125	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:03:56,898	[INFO]	126	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:03:57,823	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:03:58,753	[INFO]	128	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:03:58,759	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:03:59,681	[INFO]	130	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:04:00,639	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:04:03,515	[INFO]	132	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:04:03,516	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:03,517	[INFO]	133	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:04:03,517	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:03,518	[INFO]	134	SUCCESS	 4.0	
2020-12-10 04:04:04,413	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:04:05,361	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:04:06,334	[INFO]	137	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:04:07,277	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:04:08,195	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:04:09,141	[INFO]	140	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:04:10,079	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:04:11,023	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:04:11,967	[INFO]	143	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:04:12,882	[INFO]	144	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:04:15,701	[INFO]	145	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:04:15,702	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:15,703	[INFO]	146	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:04:15,703	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:15,704	[INFO]	147	SUCCESS	 4.0	
2020-12-10 04:04:16,608	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:04:17,530	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:04:18,449	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:04:21,308	[INFO]	151	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:04:22,212	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:04:22,213	[INFO]	153	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:04:22,214	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:23,147	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:04:23,149	[INFO]	155	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:04:24,088	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:04:27,009	[INFO]	157	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:04:27,880	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:04:28,835	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:04:28,836	[INFO]	160	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:04:28,836	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:28,837	[INFO]	161	SUCCESS	 4.0	
2020-12-10 04:04:29,787	[INFO]	162	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:04:30,737	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:04:31,685	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:04:31,686	[INFO]	165	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:04:31,687	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:32,612	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:04:32,615	[INFO]	167	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:04:32,616	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:32,618	[INFO]	168	SUCCESS	 4.0	
2020-12-10 04:04:33,524	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:04:36,390	[INFO]	170	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:04:37,286	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:04:38,209	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:04:41,098	[INFO]	173	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:04:41,099	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:41,101	[INFO]	174	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:04:41,102	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:42,000	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:04:42,941	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:04:42,944	[INFO]	177	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:04:42,946	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:43,850	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:04:44,795	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:04:44,798	[INFO]	180	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:04:44,800	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:44,802	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:04:44,804	[INFO]	182	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:04:44,806	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:44,809	[INFO]	183	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:04:44,811	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:47,755	[INFO]	184	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:04:48,645	[INFO]	185	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:04:49,574	[INFO]	186	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:04:50,530	[INFO]	187	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:04:51,452	[INFO]	188	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:04:51,455	[INFO]	189	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:04:51,456	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:04:52,298	[INFO]	190	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:04:53,230	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:04:54,144	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:04:56,999	[INFO]	193	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:04:57,000	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 32,41 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 04:04:59,868	[INFO]	194	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:04:59,869	[INFO]	195	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:04:59,870	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:05:00,746	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:05:01,669	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:05:04,632	[INFO]	198	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 04:05:05,547	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:05:05,550	[INFO]	200	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:05:05,552	[INFO]	201	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:05:05,553	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:05:05,554	[INFO]	202	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:05:06,497	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:05:07,449	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:05:08,378	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:05:11,252	[INFO]	206	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:05:11,253	[INFO]	207	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:05:11,254	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 32,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:05:11,255	[INFO]	208	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:05:12,160	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:05:13,117	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:05:13,120	[INFO]	211	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:05:13,120	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:05:13,121	[INFO]	212	SUCCESS	 4.0	
2020-12-10 04:05:15,920	[INFO]	213	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:05:18,805	[INFO]	214	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:05:18,806	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:19,688	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:05:22,567	[INFO]	216	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:05:23,453	[INFO]	217	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:05:24,423	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:05:27,311	[INFO]	219	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:05:30,200	[INFO]	220	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:05:30,202	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,33 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 23,41 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:31,018	[INFO]	221	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:05:31,957	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:05:31,959	[INFO]	223	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:05:32,886	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:05:33,819	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:05:34,765	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:05:37,974	[INFO]	227	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:05:37,977	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,34 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 23,48 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
+                 longest = length + 1;
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              i++;

2020-12-10 04:05:37,979	[INFO]	228	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:05:37,981	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,33 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 23,41 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:40,883	[INFO]	229	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:05:40,884	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,33 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 23,46 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:40,886	[INFO]	230	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:05:40,887	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,33 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 23,41 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:40,888	[INFO]	231	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:05:40,889	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:05:41,793	[INFO]	232	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:05:44,785	[INFO]	233	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:05:45,708	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:05:46,685	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:05:47,618	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:05:47,619	[INFO]	237	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:05:47,619	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:05:48,542	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:05:49,511	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:05:49,513	[INFO]	240	SUCCESS	 4.0	
2020-12-10 04:05:50,478	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:05:51,408	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:05:52,354	[INFO]	243	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:05:55,250	[INFO]	244	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:05:56,153	[INFO]	245	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:05:57,074	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:05:58,060	[INFO]	247	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:05:59,016	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:05:59,940	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:06:02,766	[INFO]	250	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:06:03,669	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:06:03,671	[INFO]	252	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:03,671	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:03,672	[INFO]	253	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:03,672	[INFO]	254	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:06:03,673	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:04,598	[INFO]	255	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:06:04,599	[INFO]	256	SUCCESS	 4.0	
2020-12-10 04:06:05,522	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:06:06,472	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:06:06,476	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:06:07,404	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:06:08,335	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:06:08,337	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:06:11,190	[INFO]	263	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>='})
2020-12-10 04:06:12,012	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:06:14,824	[INFO]	265	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:06:14,825	[INFO]	266	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:06:14,826	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:15,745	[INFO]	267	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:06:15,746	[INFO]	268	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:06:15,747	[INFO]	269	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:06:15,748	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:18,571	[INFO]	270	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:06:18,572	[INFO]	271	SUCCESS	 4.0	
2020-12-10 04:06:19,510	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:06:20,424	[INFO]	273	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:06:23,334	[INFO]	274	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 04:06:23,335	[INFO]	275	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:06:23,336	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:24,227	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:24,229	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:06:25,160	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:06:25,162	[INFO]	279	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:06:25,163	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:25,163	[INFO]	280	SUCCESS	 4.0	
2020-12-10 04:06:26,042	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:06:28,904	[INFO]	282	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:06:28,905	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:06:29,830	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:06:29,831	[INFO]	284	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:06:29,832	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:06:29,833	[INFO]	285	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:06:29,833	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:30,779	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:06:30,782	[INFO]	287	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:06:30,783	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:31,736	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:06:31,738	[INFO]	289	SUCCESS	 4.0	
2020-12-10 04:06:32,667	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:06:32,671	[INFO]	291	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:06:32,671	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:32,673	[INFO]	292	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:06:32,673	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:32,674	[INFO]	293	SUCCESS	 4.0	
2020-12-10 04:06:33,613	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:06:36,558	[INFO]	295	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='})
2020-12-10 04:06:36,558	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:36,559	[INFO]	296	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='})
2020-12-10 04:06:36,559	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:06:37,475	[INFO]	297	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:06:37,477	[INFO]	298	SUCCESS	 4.0	
2020-12-10 04:06:38,411	[INFO]	299	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:06:39,310	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:06:40,246	[INFO]	301	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:06:41,193	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:06:42,091	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:06:43,017	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:06:43,968	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:06:44,921	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:06:47,768	[INFO]	307	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:06:48,695	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:06:51,616	[INFO]	309	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:06:52,520	[INFO]	310	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:53,461	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:06:54,378	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:55,281	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:06:56,192	[INFO]	314	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:06:59,021	[INFO]	315	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:06:59,942	[INFO]	316	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:07:00,889	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:07:01,825	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:07:02,779	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:07:05,631	[INFO]	320	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:07:06,432	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:07:07,387	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:07:08,352	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:07:11,196	[INFO]	324	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 04:07:11,197	[INFO]	325	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:07:11,197	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:14,011	[INFO]	326	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:07:14,012	[INFO]	327	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='})
2020-12-10 04:07:14,012	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:14,013	[INFO]	328	SUCCESS	 4.0	
2020-12-10 04:07:16,852	[INFO]	329	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:07:17,737	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:07:18,652	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:07:19,601	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:07:20,555	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:07:21,483	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:07:22,440	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:07:23,399	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:07:24,343	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:07:25,328	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:07:26,270	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:07:27,189	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:07:28,165	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:07:29,110	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:07:30,025	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:07:30,980	[INFO]	344	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:07:30,983	[INFO]	345	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:07:30,983	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:31,978	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:07:31,981	[INFO]	347	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='})
2020-12-10 04:07:31,982	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:31,983	[INFO]	348	SUCCESS	 4.0	
2020-12-10 04:07:32,777	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:07:32,778	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:07:35,699	[INFO]	351	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:07:36,581	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:07:37,477	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:07:40,424	[INFO]	354	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:07:40,425	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:43,267	[INFO]	355	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 04:07:43,268	[INFO]	356	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='})
2020-12-10 04:07:43,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:07:43,269	[INFO]	357	SUCCESS	 4.0	
2020-12-10 04:07:43,270	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:07:44,190	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:07:45,120	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:07:46,072	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:07:48,981	[INFO]	362	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:07:49,884	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:07:52,765	[INFO]	364	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:07:53,694	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:07:54,611	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:07:55,527	[INFO]	367	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:07:58,367	[INFO]	368	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:07:58,368	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val >= arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:07:59,278	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:08:02,128	[INFO]	370	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:08:02,129	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val >= arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:08:02,130	[INFO]	==== END ====
2020-12-10 04:08:02,130	[INFO]	Reason: target fitness reached
2020-12-10 04:08:02,131	[INFO]	
2020-12-10 04:08:02,131	[INFO]	========== EPOCH 6 ==========
2020-12-10 04:08:02,131	[INFO]	==== WARMUP ====
2020-12-10 04:08:05,015	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:08:05,015	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:08:07,893	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:08:07,893	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:08:10,673	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:08:10,673	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:08:13,533	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:08:13,533	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:08:13,534	[INFO]	==== START ====
2020-12-10 04:08:14,477	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:08:15,394	[INFO]	2	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:08:18,251	[INFO]	3	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:08:18,252	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:08:21,057	[INFO]	4	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:08:21,058	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,58 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+                 prefix_lengths.add(j);
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:08:23,882	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:08:23,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:08:23,884	[INFO]	6	SUCCESS	+4.0	
2020-12-10 04:08:23,884	[DEBUG]	
2020-12-10 04:08:26,714	[INFO]	7	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:26,715	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:08:29,622	[INFO]	8	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:29,623	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
***************
*** 33,38 ****
--- 35,41 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:08:30,506	[INFO]	9	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:31,536	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:08:31,539	[INFO]	11	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:31,540	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:08:31,541	[INFO]	12	SUCCESS	+4.0	
2020-12-10 04:08:31,542	[DEBUG]	
2020-12-10 04:08:32,490	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:08:33,424	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:08:36,245	[INFO]	15	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:36,247	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:08:36,247	[INFO]	16	SUCCESS	+4.0	
2020-12-10 04:08:36,248	[DEBUG]	
2020-12-10 04:08:36,248	[INFO]	17	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:08:36,249	[DEBUG]	
2020-12-10 04:08:36,249	[INFO]	18	SUCCESS	+4.0	
2020-12-10 04:08:36,249	[DEBUG]	
2020-12-10 04:08:39,046	[INFO]	19	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:08:39,047	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:08:39,980	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:08:39,983	[INFO]	21	SUCCESS	+4.0	
2020-12-10 04:08:39,984	[DEBUG]	
2020-12-10 04:08:40,909	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:08:41,825	[INFO]	23	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:08:44,693	[INFO]	24	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:08:44,693	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 04:08:45,627	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:08:45,629	[INFO]	26	SUCCESS	+4.0	
2020-12-10 04:08:45,629	[DEBUG]	
2020-12-10 04:08:48,451	[INFO]	27	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:08:48,452	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  

2020-12-10 04:08:48,453	[INFO]	28	SUCCESS	+4.0	
2020-12-10 04:08:48,453	[DEBUG]	
2020-12-10 04:08:49,393	[INFO]	29	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:08:50,359	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:08:51,299	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:08:52,264	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:08:53,207	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:08:54,139	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:08:55,073	[INFO]	35	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:08:56,021	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:08:56,956	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:08:57,900	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:08:58,821	[INFO]	39	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:08:59,779	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:09:00,720	[INFO]	41	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:01,656	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:09:04,474	[INFO]	43	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:04,475	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 04:09:04,476	[INFO]	44	SUCCESS	+4.0	
2020-12-10 04:09:04,476	[DEBUG]	
2020-12-10 04:09:05,387	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:09:06,355	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:09:07,261	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:09:07,262	[INFO]	48	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:09:07,262	[DEBUG]	
2020-12-10 04:09:07,263	[INFO]	49	SUCCESS	+4.0	
2020-12-10 04:09:07,263	[DEBUG]	
2020-12-10 04:09:10,227	[INFO]	50	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:10,229	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:09:11,072	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:09:12,003	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:09:12,005	[INFO]	53	SUCCESS	+4.0	
2020-12-10 04:09:12,006	[DEBUG]	
2020-12-10 04:09:14,860	[INFO]	54	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:09:14,863	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 return longest;
              }
  
              i++;

2020-12-10 04:09:14,865	[INFO]	55	SUCCESS	+4.0	
2020-12-10 04:09:14,866	[DEBUG]	
2020-12-10 04:09:15,772	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:09:16,696	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:09:17,609	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:09:18,537	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:09:19,463	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:09:20,366	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:09:21,289	[INFO]	62	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:09:22,185	[INFO]	63	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:09:23,104	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:09:23,106	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:09:23,107	[DEBUG]	
2020-12-10 04:09:24,036	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:09:24,973	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:09:25,901	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:09:26,825	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:09:27,741	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:09:30,702	[INFO]	71	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:30,704	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:09:30,706	[INFO]	72	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:09:30,707	[DEBUG]	
2020-12-10 04:09:31,570	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:09:31,571	[INFO]	74	SUCCESS	+4.0	
2020-12-10 04:09:31,572	[DEBUG]	
2020-12-10 04:09:32,505	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:09:33,446	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:09:34,370	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:09:35,291	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:09:36,213	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:09:37,148	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:09:38,093	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:09:39,013	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:09:41,900	[INFO]	83	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:41,902	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:09:41,904	[INFO]	84	SUCCESS	+4.0	
2020-12-10 04:09:41,905	[DEBUG]	
2020-12-10 04:09:42,803	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:09:43,736	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:09:43,737	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:09:44,692	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:09:45,664	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:09:46,507	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:09:49,392	[INFO]	91	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:09:49,393	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,39 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              }
  
              i++;

2020-12-10 04:09:49,394	[INFO]	92	SUCCESS	+4.0	
2020-12-10 04:09:49,394	[DEBUG]	
2020-12-10 04:09:52,221	[INFO]	93	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:09:52,222	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:09:53,033	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:09:53,034	[INFO]	95	SUCCESS	+4.0	
2020-12-10 04:09:53,034	[DEBUG]	
2020-12-10 04:09:53,035	[INFO]	96	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:09:53,035	[DEBUG]	
2020-12-10 04:09:55,947	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:09:55,949	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:09:55,951	[INFO]	98	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:09:55,952	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:09:58,709	[INFO]	99	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:09:58,711	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
! 
!             
  
              i++;
          }

2020-12-10 04:09:58,713	[INFO]	100	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:09:58,714	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:09:58,715	[INFO]	101	SUCCESS	+4.0	
2020-12-10 04:09:58,716	[DEBUG]	
2020-12-10 04:10:01,547	[INFO]	102	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:10:01,549	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:10:01,551	[INFO]	103	SUCCESS	+4.0	
2020-12-10 04:10:01,552	[DEBUG]	
2020-12-10 04:10:04,442	[INFO]	104	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:10:04,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 16,21 ****
--- 16,23 ----
  
          int i = 0;
          for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:10:04,443	[INFO]	105	SUCCESS	+4.0	
2020-12-10 04:10:04,443	[DEBUG]	
2020-12-10 04:10:05,309	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:10:06,256	[INFO]	107	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:10:09,145	[INFO]	108	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:10:09,146	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:10:10,108	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:10:10,109	[INFO]	110	SUCCESS	+4.0	
2020-12-10 04:10:10,109	[DEBUG]	
2020-12-10 04:10:12,974	[INFO]	111	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:10:12,975	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:10:13,862	[INFO]	112	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:10:14,782	[INFO]	113	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:10:15,717	[INFO]	114	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:10:16,657	[INFO]	115	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:10:16,659	[INFO]	116	SUCCESS	+4.0	
2020-12-10 04:10:16,660	[DEBUG]	
2020-12-10 04:10:17,579	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:10:20,380	[INFO]	118	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:10:20,381	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:10:20,382	[INFO]	119	SUCCESS	 4.0	
2020-12-10 04:10:21,341	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:10:22,293	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:10:23,234	[INFO]	122	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:10:26,117	[INFO]	123	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:10:27,082	[INFO]	124	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:10:28,024	[INFO]	125	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:10:31,006	[INFO]	126	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:10:31,891	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:10:32,799	[INFO]	128	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:10:33,724	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:10:34,678	[INFO]	130	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:10:35,800	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:10:37,110	[INFO]	132	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:10:38,339	[INFO]	133	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:10:39,485	[INFO]	134	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:10:40,722	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:10:41,835	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:10:42,979	[INFO]	137	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:10:44,000	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:10:45,234	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:10:48,177	[INFO]	140	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:10:49,092	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:10:49,926	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:10:50,914	[INFO]	143	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:10:51,866	[INFO]	144	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:10:54,739	[INFO]	145	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:10:55,675	[INFO]	146	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:10:56,599	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:10:57,533	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:10:58,462	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:10:59,543	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:11:00,471	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:11:03,407	[INFO]	152	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:11:04,274	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:11:05,194	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:11:06,129	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:11:07,068	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:11:10,010	[INFO]	157	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:11:10,011	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:10,878	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:11:11,824	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:11:14,714	[INFO]	160	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:11:14,715	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 longest = length + 1;
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:14,716	[INFO]	161	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:11:14,716	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:17,606	[INFO]	162	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:11:18,521	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:11:19,456	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:11:22,424	[INFO]	165	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:11:25,212	[INFO]	166	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:11:25,213	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:25,214	[INFO]	167	SUCCESS	 4.0	
2020-12-10 04:11:26,027	[INFO]	168	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:11:26,946	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:11:27,882	[INFO]	170	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:11:28,841	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:11:29,774	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:11:30,709	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:11:31,645	[INFO]	174	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:11:32,591	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:11:35,470	[INFO]	176	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:11:36,382	[INFO]	177	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:11:37,313	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:11:38,215	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:11:41,035	[INFO]	180	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:11:41,036	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:43,864	[INFO]	181	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:11:43,865	[INFO]	182	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:11:43,866	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:43,866	[INFO]	183	SUCCESS	 4.0	
2020-12-10 04:11:46,759	[INFO]	184	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:11:47,723	[INFO]	185	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:11:50,637	[INFO]	186	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:11:53,528	[INFO]	187	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:11:53,530	[INFO]	188	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:11:53,530	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:53,531	[INFO]	189	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:11:53,532	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:53,532	[INFO]	190	SUCCESS	 4.0	
2020-12-10 04:11:54,413	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:11:55,328	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:11:56,257	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:11:57,196	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:11:58,137	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:11:59,041	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:11:59,045	[INFO]	197	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:11:59,046	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:11:59,977	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:11:59,979	[INFO]	199	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:11:59,981	[INFO]	200	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:11:59,981	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:00,908	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:12:01,839	[INFO]	202	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:12:02,762	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:12:03,688	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:12:04,612	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:04,613	[INFO]	206	SUCCESS	 4.0	
2020-12-10 04:12:05,575	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:12:06,511	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:06,512	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:12:09,372	[INFO]	210	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:12:10,276	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:12:13,123	[INFO]	212	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:12:13,125	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:13,126	[INFO]	213	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:12:13,126	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:13,127	[INFO]	214	SUCCESS	 4.0	
2020-12-10 04:12:15,947	[INFO]	215	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:12:15,947	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:12:18,743	[INFO]	216	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:12:18,744	[INFO]	217	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:12:18,745	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:19,675	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:12:20,573	[INFO]	219	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:12:21,436	[INFO]	220	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:12:21,438	[INFO]	221	SUCCESS	 4.0	
2020-12-10 04:12:21,441	[INFO]	222	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:12:21,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:21,445	[INFO]	223	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:12:21,446	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:22,348	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:12:23,280	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:23,283	[INFO]	226	SUCCESS	 4.0	
2020-12-10 04:12:24,263	[INFO]	227	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:12:25,180	[INFO]	228	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:12:26,136	[INFO]	229	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:27,075	[INFO]	230	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:12:28,001	[INFO]	231	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:12:28,947	[INFO]	232	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:12:29,877	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:12:30,806	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:12:31,766	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:12:32,713	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:12:33,630	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:12:34,532	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:12:35,495	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:12:36,427	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:12:37,349	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:12:38,271	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:39,217	[INFO]	243	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:12:39,219	[INFO]	244	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:12:42,128	[INFO]	245	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:12:43,051	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:12:43,959	[INFO]	247	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:12:44,899	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:12:45,811	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:12:45,813	[INFO]	250	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:12:45,813	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:46,752	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:12:46,754	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:12:47,673	[INFO]	253	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:12:47,675	[INFO]	254	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:12:47,675	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:47,676	[INFO]	255	SUCCESS	 4.0	
2020-12-10 04:12:48,618	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:12:49,552	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:12:50,555	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:12:51,514	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:12:52,447	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:12:53,383	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:12:54,340	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:12:55,265	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:12:56,178	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:12:56,180	[INFO]	265	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:12:56,180	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:56,181	[INFO]	266	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:12:56,181	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:12:56,182	[INFO]	267	SUCCESS	 4.0	
2020-12-10 04:12:58,993	[INFO]	268	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:13:01,881	[INFO]	269	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:13:01,882	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,32 ****
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 24,38 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:01,883	[INFO]	270	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:01,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:01,884	[INFO]	271	SUCCESS	 4.0	
2020-12-10 04:13:02,775	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:13:05,586	[INFO]	273	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:13:08,468	[INFO]	274	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:13:11,297	[INFO]	275	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:13:12,207	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:13:15,135	[INFO]	277	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:13:15,136	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:13:15,137	[INFO]	278	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:15,137	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:15,993	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:13:16,933	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:13:16,935	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:13:16,936	[INFO]	282	SUCCESS	 4.0	
2020-12-10 04:13:17,829	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:13:18,766	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:13:21,771	[INFO]	285	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:13:22,669	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:13:22,670	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:13:23,621	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:13:26,553	[INFO]	289	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:13:29,450	[INFO]	290	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:13:29,452	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:30,332	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:13:30,333	[INFO]	292	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:30,334	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:31,254	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:13:31,258	[INFO]	294	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:13:31,259	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:32,181	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:13:35,005	[INFO]	296	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:13:35,880	[INFO]	297	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:13:35,881	[INFO]	298	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:35,882	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:35,882	[INFO]	299	SUCCESS	 4.0	
2020-12-10 04:13:38,841	[INFO]	300	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:13:41,659	[INFO]	301	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:13:41,663	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:13:42,606	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:13:42,609	[INFO]	304	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:13:42,610	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:42,612	[INFO]	305	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:42,612	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:43,519	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:13:44,448	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:13:45,410	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:13:46,346	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:13:46,347	[INFO]	310	SUCCESS	 4.0	
2020-12-10 04:13:47,250	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:13:50,082	[INFO]	312	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:13:50,083	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:13:51,018	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:13:51,021	[INFO]	314	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:13:51,022	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:13:51,024	[INFO]	315	SUCCESS	 4.0	
2020-12-10 04:13:51,969	[INFO]	316	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:13:52,900	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:13:55,740	[INFO]	318	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:13:58,551	[INFO]	319	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:13:59,491	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:14:00,454	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:14:01,401	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:14:02,299	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:14:03,208	[INFO]	324	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:14:03,211	[INFO]	325	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:14:04,150	[INFO]	326	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:14:05,099	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:14:06,031	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:14:06,955	[INFO]	329	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:14:07,877	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:14:10,840	[INFO]	331	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:14:11,725	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:14:12,661	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:14:13,611	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:14:14,532	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:14:15,451	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:14:16,410	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:14:17,340	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:14:18,255	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:14:19,176	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:14:20,016	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:14:20,981	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:14:21,913	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:14:24,726	[INFO]	344	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:14:25,619	[INFO]	345	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:14:26,470	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:14:29,386	[INFO]	347	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:14:30,303	[INFO]	348	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:14:31,215	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:14:32,177	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:14:33,085	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:14:34,022	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:14:34,026	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:14:34,977	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:14:35,923	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:14:38,810	[INFO]	356	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:14:38,811	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:38,811	[INFO]	357	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:14:38,812	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:39,724	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:14:39,728	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:14:40,646	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:14:40,648	[INFO]	361	SUCCESS	 4.0	
2020-12-10 04:14:41,601	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:14:41,604	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:14:42,597	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:14:43,520	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:14:43,521	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:14:46,379	[INFO]	367	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 04:14:47,293	[INFO]	368	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:14:50,168	[INFO]	369	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:14:50,169	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:51,067	[INFO]	370	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:14:53,940	[INFO]	371	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:14:53,941	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,36 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:53,942	[INFO]	372	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:14:53,942	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:56,767	[INFO]	373	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:14:57,672	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:14:58,485	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:14:59,376	[INFO]	376	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:14:59,378	[INFO]	377	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:14:59,378	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:14:59,379	[INFO]	378	SUCCESS	 4.0	
2020-12-10 04:15:00,304	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:15:01,235	[INFO]	380	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:15:02,153	[INFO]	381	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:15:05,120	[INFO]	382	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:15:06,012	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:15:06,942	[INFO]	384	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:15:07,906	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:15:08,859	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:15:11,773	[INFO]	387	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:15:12,718	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:15:13,651	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:15:14,579	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:15:15,510	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:15:18,410	[INFO]	392	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:15:19,312	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:15:20,245	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:15:21,238	[INFO]	395	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:15:21,242	[INFO]	396	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:15:22,157	[INFO]	397	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:15:23,099	[INFO]	398	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:15:24,007	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:15:24,946	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:15:25,871	[INFO]	401	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:15:26,816	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:15:29,685	[INFO]	403	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:15:30,608	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:15:31,550	[INFO]	405	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:15:34,532	[INFO]	406	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:15:37,460	[INFO]	407	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 04:15:38,388	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:15:39,374	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:15:39,377	[INFO]	410	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:15:40,303	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:15:41,244	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:15:42,186	[INFO]	413	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:15:43,120	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:15:44,091	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:15:45,016	[INFO]	416	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:15:45,930	[INFO]	417	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:15:45,931	[INFO]	418	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:15:46,883	[INFO]	419	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:15:47,738	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:15:48,684	[INFO]	421	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:15:49,632	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:15:50,593	[INFO]	423	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:15:53,528	[INFO]	424	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:15:56,327	[INFO]	425	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:15:56,328	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:15:57,244	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:15:58,194	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:16:01,120	[INFO]	428	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:16:01,121	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,33 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:16:03,932	[INFO]	429	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:16:06,820	[INFO]	430	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:16:06,821	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:16:09,610	[INFO]	431	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:16:09,611	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:09,612	[INFO]	432	SUCCESS	 4.0	
2020-12-10 04:16:12,542	[INFO]	433	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:16:12,543	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:16:12,544	[INFO]	434	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:16:12,544	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:13,473	[INFO]	435	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:16:14,423	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:16:15,346	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:16:16,278	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:16:16,279	[INFO]	439	SUCCESS	 4.0	
2020-12-10 04:16:17,210	[INFO]	440	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:16:20,070	[INFO]	441	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:16:20,071	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,32 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 23,37 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:20,962	[INFO]	442	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:16:23,921	[INFO]	443	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:16:26,725	[INFO]	444	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:16:27,665	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:16:30,606	[INFO]	446	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:16:31,569	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:16:32,502	[INFO]	448	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:16:33,448	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:16:33,451	[INFO]	450	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:33,452	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,32 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 23,37 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:34,375	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:16:34,376	[INFO]	452	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:34,377	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:35,326	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:16:35,328	[INFO]	454	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:38,200	[INFO]	455	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:16:38,201	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,32 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 20,35 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:41,010	[INFO]	456	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:16:41,011	[INFO]	457	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:41,012	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:41,911	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:16:41,913	[INFO]	459	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:41,913	[INFO]	460	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:16:41,914	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:42,858	[INFO]	461	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:16:42,859	[INFO]	462	SUCCESS	 4.0	
2020-12-10 04:16:45,801	[INFO]	463	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:16:46,649	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:16:47,567	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:16:47,568	[INFO]	466	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:16:47,569	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:47,569	[INFO]	467	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:16:47,570	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:16:47,570	[INFO]	468	SUCCESS	 4.0	
2020-12-10 04:16:48,498	[INFO]	469	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:16:49,423	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:16:50,401	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:16:51,323	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:16:52,250	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:16:53,193	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:16:54,119	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:16:55,063	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:16:55,960	[INFO]	477	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:16:56,861	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:16:57,780	[INFO]	479	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:16:58,713	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:16:59,679	[INFO]	481	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:16:59,681	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:17:00,644	[INFO]	483	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:17:01,572	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:17:02,516	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:17:05,302	[INFO]	486	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:17:05,303	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:17:05,303	[INFO]	487	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:17:05,304	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:17:05,304	[INFO]	488	SUCCESS	 4.0	
2020-12-10 04:17:06,243	[INFO]	489	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:17:07,194	[INFO]	490	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:17:08,151	[INFO]	491	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:17:09,082	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:17:09,084	[INFO]	493	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:17:09,084	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:17:11,981	[INFO]	494	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:17:11,982	[INFO]	495	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 04:17:11,982	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:17:11,983	[INFO]	496	SUCCESS	 4.0	
2020-12-10 04:17:12,888	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:17:13,797	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:17:14,722	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:17:15,672	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:17:15,673	[INFO]	==== END ====
2020-12-10 04:17:15,674	[INFO]	Reason: step budget
2020-12-10 04:17:15,676	[INFO]	
2020-12-10 04:17:15,676	[INFO]	========== EPOCH 7 ==========
2020-12-10 04:17:15,676	[INFO]	==== WARMUP ====
2020-12-10 04:17:18,509	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:17:18,510	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:17:21,305	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:17:21,305	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:17:24,125	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:17:24,126	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:17:26,968	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:17:26,968	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:17:26,968	[INFO]	==== START ====
2020-12-10 04:17:26,969	[INFO]	1	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:17:26,969	[DEBUG]	
2020-12-10 04:17:26,970	[INFO]	2	SUCCESS	+4.0	
2020-12-10 04:17:26,970	[DEBUG]	
2020-12-10 04:17:27,875	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:17:28,810	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:17:29,714	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:17:30,638	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:17:31,540	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:17:34,324	[INFO]	8	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:17:34,325	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 return longest;
              }
  
              i++;

2020-12-10 04:17:35,241	[INFO]	9	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:17:35,244	[INFO]	10	SUCCESS	+4.0	
2020-12-10 04:17:35,244	[DEBUG]	
2020-12-10 04:17:35,246	[INFO]	11	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:17:35,247	[DEBUG]	
2020-12-10 04:17:35,248	[INFO]	12	SUCCESS	+4.0	
2020-12-10 04:17:35,248	[DEBUG]	
2020-12-10 04:17:35,250	[INFO]	13	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:17:35,251	[DEBUG]	
2020-12-10 04:17:38,087	[INFO]	14	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:17:38,088	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:17:38,089	[INFO]	15	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:17:38,089	[DEBUG]	
2020-12-10 04:17:38,090	[INFO]	16	SUCCESS	+4.0	
2020-12-10 04:17:38,090	[DEBUG]	
2020-12-10 04:17:40,960	[INFO]	17	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:17:40,961	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:17:43,751	[INFO]	18	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:17:43,754	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,27 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:17:43,758	[INFO]	19	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:17:43,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,27 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:17:44,690	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:17:47,527	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:17:47,528	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:17:47,529	[INFO]	22	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:17:47,530	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:17:48,455	[INFO]	23	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:17:51,342	[INFO]	24	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:17:51,343	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,27 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:17:51,344	[INFO]	25	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:17:51,344	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:17:54,257	[INFO]	26	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:17:54,257	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:17:54,258	[INFO]	27	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:17:54,259	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:17:54,259	[INFO]	28	SUCCESS	+4.0	
2020-12-10 04:17:54,260	[DEBUG]	
2020-12-10 04:17:55,144	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:17:59,129	[INFO]	30	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:17:59,130	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:18:02,695	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:18:02,697	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,58 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+                 return longest;
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:18:03,634	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:18:03,637	[INFO]	33	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:18:03,637	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:18:06,506	[INFO]	34	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:18:06,507	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,21 ****
--- 15,42 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:18:06,509	[INFO]	35	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:18:06,510	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,21 ****
--- 15,42 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:18:07,455	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:18:07,459	[INFO]	37	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:18:07,461	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,21 ****
--- 15,42 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:18:07,463	[INFO]	38	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:18:07,464	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,21 ****
--- 15,42 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             i++;
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {

2020-12-10 04:18:07,466	[INFO]	39	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:18:07,467	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:18:07,469	[INFO]	40	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:18:07,469	[DEBUG]	
2020-12-10 04:18:08,376	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:18:08,377	[INFO]	42	SUCCESS	+4.0	
2020-12-10 04:18:08,377	[DEBUG]	
2020-12-10 04:18:09,271	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:18:10,282	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:18:10,284	[INFO]	45	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:18:10,284	[DEBUG]	
2020-12-10 04:18:13,224	[INFO]	46	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:18:13,225	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:18:13,226	[INFO]	47	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:18:13,226	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:18:13,227	[INFO]	48	SUCCESS	+4.0	
2020-12-10 04:18:13,227	[DEBUG]	
2020-12-10 04:18:14,118	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:18:15,042	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:18:15,972	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:18:16,898	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:18:17,857	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:18:18,771	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:18:21,662	[INFO]	55	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:18:21,663	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:18:21,663	[INFO]	56	SUCCESS	+4.0	
2020-12-10 04:18:21,664	[DEBUG]	
2020-12-10 04:18:22,573	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:18:23,495	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:18:23,497	[INFO]	59	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:18:23,497	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:18:23,498	[INFO]	60	SUCCESS	+4.0	
2020-12-10 04:18:23,499	[DEBUG]	
2020-12-10 04:18:24,369	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:18:25,253	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:18:26,228	[INFO]	63	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:18:29,231	[INFO]	64	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:18:29,231	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             return longest;
          }
          return longest;
      }

2020-12-10 04:18:30,308	[INFO]	65	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:18:31,144	[INFO]	66	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:18:32,054	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:18:32,055	[INFO]	68	SUCCESS	+4.0	
2020-12-10 04:18:32,055	[DEBUG]	
2020-12-10 04:18:34,975	[INFO]	69	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:18:34,976	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:18:35,854	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:18:35,855	[INFO]	71	SUCCESS	+4.0	
2020-12-10 04:18:35,855	[DEBUG]	
2020-12-10 04:18:36,760	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:18:37,698	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:18:40,561	[INFO]	74	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:18:40,562	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 04:18:41,472	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:18:41,474	[INFO]	76	SUCCESS	+4.0	
2020-12-10 04:18:41,475	[DEBUG]	
2020-12-10 04:18:42,409	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:18:43,318	[INFO]	78	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:18:44,246	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:18:45,191	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:18:46,107	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:18:47,025	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:18:49,823	[INFO]	83	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:18:49,824	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:18:50,769	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:18:50,770	[INFO]	85	SUCCESS	+4.0	
2020-12-10 04:18:50,771	[DEBUG]	
2020-12-10 04:18:51,739	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:18:54,588	[INFO]	87	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:18:54,589	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:18:55,489	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:18:56,435	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:18:57,383	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:18:58,291	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:18:59,185	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:19:00,095	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:19:00,100	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:19:00,100	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:19:02,980	[INFO]	95	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:19:02,982	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,27 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 return longest;
+             }
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:19:02,985	[INFO]	96	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:19:02,986	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:19:05,840	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:19:05,841	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,40 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 return longest;
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:19:05,842	[INFO]	98	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:19:05,843	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,40 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 return longest;
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:19:08,759	[INFO]	99	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:19:08,760	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:19:09,667	[INFO]	100	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:19:09,668	[INFO]	101	SUCCESS	+4.0	
2020-12-10 04:19:09,668	[DEBUG]	
2020-12-10 04:19:10,595	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:19:11,511	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:19:14,338	[INFO]	104	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:19:14,339	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
              }
  
              i++;

2020-12-10 04:19:14,340	[INFO]	105	SUCCESS	+4.0	
2020-12-10 04:19:14,340	[DEBUG]	
2020-12-10 04:19:15,257	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:19:16,168	[INFO]	107	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:19:17,078	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:19:19,953	[INFO]	109	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:19:19,954	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:19:19,955	[INFO]	110	SUCCESS	+4.0	
2020-12-10 04:19:19,955	[DEBUG]	
2020-12-10 04:19:20,829	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:19:21,762	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:19:24,757	[INFO]	113	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:19:24,758	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:19:25,711	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:19:26,644	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:19:26,646	[INFO]	116	SUCCESS	+4.0	
2020-12-10 04:19:26,647	[DEBUG]	
2020-12-10 04:19:27,574	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:19:30,497	[INFO]	118	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:19:30,498	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:19:30,499	[INFO]	119	SUCCESS	+4.0	
2020-12-10 04:19:30,499	[DEBUG]	
2020-12-10 04:19:31,404	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:19:32,346	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:19:33,292	[INFO]	122	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:19:34,230	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:19:35,085	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:19:36,008	[INFO]	125	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:19:36,949	[INFO]	126	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:19:37,865	[INFO]	127	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:19:38,793	[INFO]	128	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:19:41,587	[INFO]	129	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:19:41,587	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:19:42,507	[INFO]	130	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:19:43,414	[INFO]	131	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:19:43,415	[INFO]	132	SUCCESS	+4.0	
2020-12-10 04:19:43,416	[DEBUG]	
2020-12-10 04:19:44,343	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:19:45,278	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:19:46,203	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:19:49,129	[INFO]	136	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:19:49,130	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  

2020-12-10 04:19:51,962	[INFO]	137	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:19:51,963	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:19:52,847	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:19:53,757	[INFO]	139	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:19:53,759	[INFO]	140	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:19:53,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  

2020-12-10 04:19:53,760	[INFO]	141	SUCCESS	+4.0	
2020-12-10 04:19:53,760	[DEBUG]	
2020-12-10 04:19:54,666	[INFO]	142	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:19:54,667	[INFO]	143	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:19:54,668	[DEBUG]	
2020-12-10 04:19:54,668	[INFO]	144	SUCCESS	+4.0	
2020-12-10 04:19:54,669	[DEBUG]	
2020-12-10 04:19:55,588	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:19:58,444	[INFO]	146	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:19:58,445	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:19:59,360	[INFO]	147	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:19:59,361	[INFO]	148	SUCCESS	+4.0	
2020-12-10 04:19:59,361	[DEBUG]	
2020-12-10 04:20:02,244	[INFO]	149	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:20:02,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             longest = length + 1;
          }
          return longest;
      }

2020-12-10 04:20:02,248	[INFO]	150	SUCCESS	+4.0	
2020-12-10 04:20:02,248	[DEBUG]	
2020-12-10 04:20:03,151	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:20:04,057	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:20:05,033	[INFO]	153	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:20:06,057	[INFO]	154	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:20:07,019	[INFO]	155	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:20:09,880	[INFO]	156	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:20:09,881	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:20:09,882	[INFO]	157	SUCCESS	+4.0	
2020-12-10 04:20:09,882	[DEBUG]	
2020-12-10 04:20:10,810	[INFO]	158	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:20:11,712	[INFO]	159	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:20:11,713	[INFO]	160	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:20:11,714	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  

2020-12-10 04:20:11,715	[INFO]	161	SUCCESS	+4.0	
2020-12-10 04:20:11,715	[DEBUG]	
2020-12-10 04:20:12,675	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:20:15,580	[INFO]	163	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:15,581	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:20:16,479	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:16,480	[INFO]	165	SUCCESS	+4.0	
2020-12-10 04:20:16,480	[DEBUG]	
2020-12-10 04:20:17,400	[INFO]	166	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:20:20,242	[INFO]	167	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:20,244	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 04:20:21,210	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:20:22,141	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:20:23,064	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:20:23,066	[INFO]	171	SUCCESS	+4.0	
2020-12-10 04:20:23,066	[DEBUG]	
2020-12-10 04:20:23,992	[INFO]	172	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:20:26,803	[INFO]	173	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:20:26,804	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 return longest;
              }
  
              i++;

2020-12-10 04:20:26,806	[INFO]	174	SUCCESS	+4.0	
2020-12-10 04:20:26,806	[DEBUG]	
2020-12-10 04:20:27,733	[INFO]	175	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:20:28,622	[INFO]	176	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:20:31,314	[INFO]	177	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:20:31,315	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:31,316	[INFO]	178	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:20:31,316	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:31,317	[INFO]	179	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:20:31,317	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:31,318	[INFO]	180	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:20:31,319	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:31,320	[INFO]	181	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:20:31,321	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,193	[INFO]	182	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:20:32,196	[INFO]	183	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:20:32,197	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,199	[INFO]	184	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:20:32,200	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,202	[INFO]	185	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:20:32,204	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,206	[INFO]	186	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:20:32,208	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,210	[INFO]	187	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:20:32,212	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,215	[INFO]	188	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:20:32,216	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,219	[INFO]	189	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:20:32,220	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,223	[INFO]	190	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:20:32,224	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,227	[INFO]	191	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:20:32,228	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,230	[INFO]	192	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:20:32,231	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,233	[INFO]	193	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:20:32,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,237	[INFO]	194	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:20:32,238	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,241	[INFO]	195	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:20:32,242	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,244	[INFO]	196	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:32,244	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:32,246	[INFO]	197	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:32,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:33,145	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:20:33,149	[INFO]	199	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:20:33,150	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:20:33,151	[INFO]	200	SUCCESS	+4.0	
2020-12-10 04:20:33,152	[DEBUG]	
2020-12-10 04:20:36,307	[INFO]	201	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:20:36,308	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:20:36,309	[INFO]	202	SUCCESS	+4.0	
2020-12-10 04:20:36,310	[DEBUG]	
2020-12-10 04:20:37,547	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:20:40,861	[INFO]	204	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:20:40,862	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:20:43,738	[INFO]	205	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:20:43,739	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 27,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:20:46,617	[INFO]	206	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:20:46,618	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:20:46,618	[INFO]	207	SUCCESS	+4.0	
2020-12-10 04:20:46,619	[DEBUG]	
2020-12-10 04:20:47,542	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:20:48,492	[INFO]	209	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:20:51,390	[INFO]	210	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 04:20:51,391	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j <= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:20:52,252	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:20:52,253	[INFO]	212	SUCCESS	+4.0	
2020-12-10 04:20:52,254	[DEBUG]	
2020-12-10 04:20:53,321	[INFO]	213	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:20:54,259	[INFO]	214	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:20:55,214	[INFO]	215	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:20:56,144	[INFO]	216	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:20:56,976	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:20:56,977	[INFO]	218	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:20:56,978	[DEBUG]	
2020-12-10 04:20:59,890	[INFO]	219	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:20:59,891	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:21:00,760	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:21:01,725	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:21:02,666	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:21:05,544	[INFO]	223	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:21:05,546	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,35 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
+ 
+             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:21:08,376	[INFO]	224	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:21:08,376	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:21:09,315	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:21:10,257	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:21:10,259	[INFO]	227	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:21:10,260	[DEBUG]	
2020-12-10 04:21:11,175	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:21:12,137	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:21:12,139	[INFO]	230	SUCCESS	+4.0	
2020-12-10 04:21:12,140	[DEBUG]	
2020-12-10 04:21:13,035	[INFO]	231	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:21:14,011	[INFO]	232	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:21:14,952	[INFO]	233	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:21:15,882	[INFO]	234	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:21:15,886	[INFO]	235	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:21:15,887	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:21:15,889	[INFO]	236	SUCCESS	+4.0	
2020-12-10 04:21:15,889	[DEBUG]	
2020-12-10 04:21:16,925	[INFO]	237	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:21:17,858	[INFO]	238	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:21:20,721	[INFO]	239	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:21:20,722	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  

2020-12-10 04:21:21,672	[INFO]	240	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:21:22,597	[INFO]	241	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:21:23,532	[INFO]	242	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:21:23,534	[INFO]	243	SUCCESS	+4.0	
2020-12-10 04:21:23,535	[DEBUG]	
2020-12-10 04:21:26,437	[INFO]	244	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:21:26,438	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 04:21:26,440	[INFO]	245	SUCCESS	+4.0	
2020-12-10 04:21:26,441	[DEBUG]	
2020-12-10 04:21:27,360	[INFO]	246	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:21:28,300	[INFO]	247	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:21:29,241	[INFO]	248	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:21:30,183	[INFO]	249	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:21:30,980	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:21:33,839	[INFO]	251	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:21:33,841	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:21:33,843	[INFO]	252	SUCCESS	+4.0	
2020-12-10 04:21:33,844	[DEBUG]	
2020-12-10 04:21:34,753	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:21:35,675	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:21:38,596	[INFO]	255	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:21:38,597	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 04:21:38,599	[INFO]	256	SUCCESS	+4.0	
2020-12-10 04:21:38,599	[DEBUG]	
2020-12-10 04:21:39,503	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:21:40,457	[INFO]	258	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:21:41,435	[INFO]	259	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:21:42,388	[INFO]	260	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:21:42,389	[INFO]	261	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:21:42,389	[DEBUG]	
2020-12-10 04:21:43,326	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:21:44,256	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:21:45,064	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:21:45,065	[INFO]	265	SUCCESS	+4.0	
2020-12-10 04:21:45,065	[DEBUG]	
2020-12-10 04:21:45,066	[INFO]	266	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:21:45,997	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:21:48,862	[INFO]	268	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:21:48,862	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:21:49,788	[INFO]	269	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:21:49,791	[INFO]	270	SUCCESS	+4.0	
2020-12-10 04:21:49,792	[DEBUG]	
2020-12-10 04:21:52,639	[INFO]	271	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 04:21:52,640	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:21:53,554	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:21:53,555	[INFO]	273	SUCCESS	+4.0	
2020-12-10 04:21:53,555	[DEBUG]	
2020-12-10 04:21:54,490	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:21:55,427	[INFO]	275	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:21:58,359	[INFO]	276	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:21:58,361	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:21:59,255	[INFO]	277	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:22:00,187	[INFO]	278	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:22:00,191	[INFO]	279	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:22:00,192	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:22:00,195	[INFO]	280	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:22:03,004	[INFO]	281	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:22:03,005	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 04:22:03,006	[INFO]	282	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:22:03,007	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 04:22:03,007	[INFO]	283	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:22:03,008	[DEBUG]	
2020-12-10 04:22:03,009	[INFO]	284	SUCCESS	+4.0	
2020-12-10 04:22:03,009	[DEBUG]	
2020-12-10 04:22:03,010	[INFO]	285	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:22:05,924	[INFO]	286	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:22:05,925	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:22:06,816	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:22:06,817	[INFO]	288	SUCCESS	+4.0	
2020-12-10 04:22:06,818	[DEBUG]	
2020-12-10 04:22:09,713	[INFO]	289	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:22:09,713	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:22:09,714	[INFO]	290	SUCCESS	+4.0	
2020-12-10 04:22:09,715	[DEBUG]	
2020-12-10 04:22:10,627	[INFO]	291	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:22:13,469	[INFO]	292	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:22:13,470	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] == val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:22:13,471	[INFO]	293	SUCCESS	+4.0	
2020-12-10 04:22:13,471	[DEBUG]	
2020-12-10 04:22:14,374	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:22:15,305	[INFO]	295	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:22:15,308	[INFO]	296	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:22:16,224	[INFO]	297	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:22:17,180	[INFO]	298	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:18,096	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:22:19,028	[INFO]	300	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:22:21,969	[INFO]	301	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:22:21,971	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:22:24,753	[INFO]	302	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:22:24,756	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 33,43 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:22:27,609	[INFO]	303	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:22:27,612	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 33,45 ----
              }
  
              i++;
+ 
+             i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:22:27,614	[INFO]	304	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:22:27,615	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 33,43 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:22:27,617	[INFO]	305	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:22:27,618	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:22:27,619	[INFO]	306	SUCCESS	+4.0	
2020-12-10 04:22:27,620	[DEBUG]	
2020-12-10 04:22:28,607	[INFO]	307	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:22:29,526	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:22:29,528	[INFO]	309	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:30,462	[INFO]	310	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:31,432	[INFO]	311	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:22:32,395	[INFO]	312	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:32,399	[INFO]	313	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:33,355	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:22:34,271	[INFO]	315	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:22:34,274	[INFO]	316	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:22:34,275	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:22:34,276	[INFO]	317	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:22:34,277	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:22:35,186	[INFO]	318	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:22:35,992	[INFO]	319	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:22:35,993	[INFO]	320	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:22:35,993	[DEBUG]	
2020-12-10 04:22:35,994	[INFO]	321	SUCCESS	+4.0	
2020-12-10 04:22:35,994	[DEBUG]	
2020-12-10 04:22:36,942	[INFO]	322	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:22:37,875	[INFO]	323	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:22:40,583	[INFO]	324	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:22:40,585	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 04:22:40,586	[INFO]	325	SUCCESS	+4.0	
2020-12-10 04:22:40,586	[DEBUG]	
2020-12-10 04:22:41,517	[INFO]	326	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:22:42,459	[INFO]	327	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:22:45,424	[INFO]	328	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:22:45,427	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:22:46,292	[INFO]	329	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:22:46,293	[INFO]	330	SUCCESS	+4.0	
2020-12-10 04:22:46,293	[DEBUG]	
2020-12-10 04:22:46,295	[INFO]	331	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:22:49,187	[INFO]	332	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:49,188	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:22:49,189	[INFO]	333	SUCCESS	+4.0	
2020-12-10 04:22:49,190	[DEBUG]	
2020-12-10 04:22:52,098	[INFO]	334	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:22:52,098	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:22:53,001	[INFO]	335	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:22:53,935	[INFO]	336	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:22:53,936	[INFO]	337	SUCCESS	+4.0	
2020-12-10 04:22:53,936	[DEBUG]	
2020-12-10 04:22:54,774	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:22:55,702	[INFO]	339	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:22:55,704	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:22:56,615	[INFO]	341	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:22:57,594	[INFO]	342	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:22:58,522	[INFO]	343	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:22:59,483	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:23:00,392	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:23:01,302	[INFO]	346	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:23:02,269	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:23:03,179	[INFO]	348	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:23:04,084	[INFO]	349	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:23:05,033	[INFO]	350	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:23:07,799	[INFO]	351	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:23:07,800	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:23:08,652	[INFO]	352	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:23:11,489	[INFO]	353	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:23:11,490	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,32 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 20,33 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     i++;
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:23:14,392	[INFO]	354	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:23:14,392	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     i++;
                  }
              }
  

2020-12-10 04:23:15,279	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:23:16,213	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:23:16,215	[INFO]	357	SUCCESS	+4.0	
2020-12-10 04:23:16,215	[DEBUG]	
2020-12-10 04:23:17,133	[INFO]	358	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:23:18,062	[INFO]	359	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:23:20,934	[INFO]	360	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:23:20,934	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:23:20,935	[INFO]	361	SUCCESS	+4.0	
2020-12-10 04:23:20,935	[DEBUG]	
2020-12-10 04:23:21,840	[INFO]	362	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:23:22,869	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:23:25,739	[INFO]	364	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:23:25,739	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:23:28,597	[INFO]	365	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:23:28,598	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,51 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:23:29,526	[INFO]	366	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:23:29,528	[INFO]	367	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:23:29,529	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,51 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:23:30,465	[INFO]	368	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:23:33,382	[INFO]	369	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:23:33,383	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,52 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+                 ends.put(length+1, i);
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:23:36,279	[INFO]	370	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:23:36,280	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,53 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 ends.put(length+1, i);
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:23:36,281	[INFO]	371	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:23:36,282	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,53 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 ends.put(length+1, i);
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:23:39,124	[INFO]	372	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:23:39,127	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:23:39,128	[INFO]	373	SUCCESS	+4.0	
2020-12-10 04:23:39,129	[DEBUG]	
2020-12-10 04:23:40,091	[INFO]	374	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:23:40,994	[INFO]	375	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:23:41,933	[INFO]	376	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:23:44,854	[INFO]	377	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:23:44,856	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:23:44,857	[INFO]	378	SUCCESS	+4.0	
2020-12-10 04:23:44,857	[DEBUG]	
2020-12-10 04:23:45,772	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:23:48,586	[INFO]	380	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:23:48,587	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:23:49,538	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:23:52,462	[INFO]	382	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:23:52,463	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,37 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 28,44 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
+             }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:23:53,272	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:23:53,273	[INFO]	384	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:23:53,273	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:23:54,210	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:23:54,212	[INFO]	386	SUCCESS	+4.0	
2020-12-10 04:23:54,213	[DEBUG]	
2020-12-10 04:23:55,143	[INFO]	387	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:23:56,066	[INFO]	388	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:23:56,992	[INFO]	389	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:23:57,913	[INFO]	390	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:23:58,827	[INFO]	391	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:24:01,678	[INFO]	392	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:24:01,679	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:24:01,679	[INFO]	393	SUCCESS	+4.0	
2020-12-10 04:24:01,680	[DEBUG]	
2020-12-10 04:24:02,603	[INFO]	394	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:24:03,459	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:24:04,358	[INFO]	396	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:24:05,286	[INFO]	397	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:24:06,213	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:24:09,047	[INFO]	399	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:24:09,049	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:24:09,051	[INFO]	400	SUCCESS	+4.0	
2020-12-10 04:24:09,051	[DEBUG]	
2020-12-10 04:24:09,982	[INFO]	401	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:24:10,920	[INFO]	402	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:24:13,748	[INFO]	403	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:24:13,749	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:24:13,750	[INFO]	404	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:24:13,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:24:16,646	[INFO]	405	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:24:16,647	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
--- 27,39 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:24:17,533	[INFO]	406	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:24:17,535	[INFO]	407	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:24:17,535	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:24:17,536	[INFO]	408	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:24:17,537	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:24:18,448	[INFO]	409	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:24:18,449	[INFO]	410	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:24:21,444	[INFO]	411	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:24:21,445	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:24:21,446	[INFO]	412	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:24:21,446	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:24:24,260	[INFO]	413	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:24:24,261	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 26,35 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              i++;

2020-12-10 04:24:24,262	[INFO]	414	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:24:24,263	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 26,35 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              i++;

2020-12-10 04:24:25,167	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:24:25,168	[INFO]	416	SUCCESS	+4.0	
2020-12-10 04:24:25,168	[DEBUG]	
2020-12-10 04:24:26,080	[INFO]	417	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:24:27,026	[INFO]	418	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:24:27,894	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:24:28,837	[INFO]	420	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:24:29,780	[INFO]	421	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:24:30,685	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:24:33,505	[INFO]	423	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:24:33,506	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 04:24:33,506	[INFO]	424	SUCCESS	+4.0	
2020-12-10 04:24:33,507	[DEBUG]	
2020-12-10 04:24:34,419	[INFO]	425	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:24:35,343	[INFO]	426	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:24:36,276	[INFO]	427	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:24:37,190	[INFO]	428	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:24:38,145	[INFO]	429	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:24:38,149	[INFO]	430	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:24:39,046	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:24:41,935	[INFO]	432	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:24:41,936	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     return longest;
                  }
              }
  

2020-12-10 04:24:41,937	[INFO]	433	SUCCESS	+4.0	
2020-12-10 04:24:41,937	[DEBUG]	
2020-12-10 04:24:42,851	[INFO]	434	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:24:43,789	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:24:44,741	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:24:45,703	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:24:46,613	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:24:47,585	[INFO]	439	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:24:50,521	[INFO]	440	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:24:50,522	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:24:50,522	[INFO]	441	SUCCESS	+4.0	
2020-12-10 04:24:50,523	[DEBUG]	
2020-12-10 04:24:53,401	[INFO]	442	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:24:53,403	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:24:54,338	[INFO]	443	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:24:55,260	[INFO]	444	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:24:55,261	[INFO]	445	SUCCESS	+4.0	
2020-12-10 04:24:55,261	[DEBUG]	
2020-12-10 04:24:56,234	[INFO]	446	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:24:59,129	[INFO]	447	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:24:59,130	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:25:00,053	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:25:02,927	[INFO]	449	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:25:02,928	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 17,22 ****
--- 17,24 ----
          int i = 0;
          for (int val : arr) {
  
+             i++;
+ 
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 33,42 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:25:02,929	[INFO]	450	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:25:02,930	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:25:02,931	[INFO]	451	SUCCESS	+4.0	
2020-12-10 04:25:02,931	[DEBUG]	
2020-12-10 04:25:03,880	[INFO]	452	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:25:04,812	[INFO]	453	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:25:07,681	[INFO]	454	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:25:07,682	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:25:08,608	[INFO]	455	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:25:09,532	[INFO]	456	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:25:09,534	[INFO]	457	SUCCESS	+4.0	
2020-12-10 04:25:09,535	[DEBUG]	
2020-12-10 04:25:10,431	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:25:11,352	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:25:12,296	[INFO]	460	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:25:13,263	[INFO]	461	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:25:16,135	[INFO]	462	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:25:16,136	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:25:17,044	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:25:17,046	[INFO]	464	SUCCESS	+4.0	
2020-12-10 04:25:17,047	[DEBUG]	
2020-12-10 04:25:17,050	[INFO]	465	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:25:17,052	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:25:18,021	[INFO]	466	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:25:18,953	[INFO]	467	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:25:21,929	[INFO]	468	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:25:21,930	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,34 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+                 i++;
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:25:24,735	[INFO]	469	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:25:24,736	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:25:24,737	[INFO]	470	SUCCESS	+4.0	
2020-12-10 04:25:24,737	[DEBUG]	
2020-12-10 04:25:24,738	[INFO]	471	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:25:24,739	[DEBUG]	
2020-12-10 04:25:25,521	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:25:25,522	[INFO]	473	SUCCESS	+4.0	
2020-12-10 04:25:25,522	[DEBUG]	
2020-12-10 04:25:26,528	[INFO]	474	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:25:27,497	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:25:28,450	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:25:29,406	[INFO]	477	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:25:30,361	[INFO]	478	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:25:33,222	[INFO]	479	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:25:33,225	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             longest = length + 1;
          }
          return longest;
      }

2020-12-10 04:25:34,101	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:25:34,924	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:25:34,925	[INFO]	482	SUCCESS	+4.0	
2020-12-10 04:25:34,925	[DEBUG]	
2020-12-10 04:25:35,982	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:25:38,842	[INFO]	484	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:25:38,843	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:25:39,783	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:25:39,785	[INFO]	486	SUCCESS	+4.0	
2020-12-10 04:25:39,785	[DEBUG]	
2020-12-10 04:25:40,716	[INFO]	487	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:25:41,659	[INFO]	488	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:25:42,585	[INFO]	489	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:25:43,515	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:25:43,517	[INFO]	491	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:25:43,517	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:25:43,518	[INFO]	492	SUCCESS	+4.0	
2020-12-10 04:25:43,518	[DEBUG]	
2020-12-10 04:25:44,444	[INFO]	493	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:25:47,274	[INFO]	494	SUCCESS	*3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:25:47,275	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:25:48,196	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:25:48,198	[INFO]	496	SUCCESS	 4.0	
2020-12-10 04:25:49,044	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:25:49,949	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:25:52,860	[INFO]	499	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:25:52,861	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:25:52,862	[INFO]	500	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:25:52,862	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:25:52,863	[INFO]	==== END ====
2020-12-10 04:25:52,863	[INFO]	Reason: step budget
2020-12-10 04:25:52,863	[INFO]	
2020-12-10 04:25:52,863	[INFO]	========== EPOCH 8 ==========
2020-12-10 04:25:52,864	[INFO]	==== WARMUP ====
2020-12-10 04:25:55,740	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:25:55,740	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:25:58,514	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:25:58,515	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:26:01,318	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:26:01,318	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:26:04,207	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:26:04,207	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:26:04,207	[INFO]	==== START ====
2020-12-10 04:26:05,062	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:26:08,058	[INFO]	2	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='})
2020-12-10 04:26:08,059	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j != longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:26:09,012	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:26:09,013	[INFO]	4	SUCCESS	+4.0	
2020-12-10 04:26:09,014	[DEBUG]	
2020-12-10 04:26:09,957	[INFO]	5	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:26:10,910	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:26:11,857	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:26:12,788	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:26:15,741	[INFO]	9	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:26:15,743	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:26:15,745	[INFO]	10	SUCCESS	+4.0	
2020-12-10 04:26:15,746	[DEBUG]	
2020-12-10 04:26:16,622	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:26:17,554	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:26:20,433	[INFO]	13	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:26:20,433	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             return longest;
          }
          return longest;
      }

2020-12-10 04:26:20,434	[INFO]	14	SUCCESS	+4.0	
2020-12-10 04:26:20,434	[DEBUG]	
2020-12-10 04:26:21,313	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:26:22,305	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:26:23,226	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:26:24,200	[INFO]	18	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:26:25,172	[INFO]	19	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:26:26,120	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:26:27,052	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:26:29,872	[INFO]	22	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:26:29,873	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:26:29,874	[INFO]	23	SUCCESS	+4.0	
2020-12-10 04:26:29,874	[DEBUG]	
2020-12-10 04:26:32,812	[INFO]	24	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:26:32,813	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:26:32,814	[INFO]	25	SUCCESS	+4.0	
2020-12-10 04:26:32,814	[DEBUG]	
2020-12-10 04:26:33,711	[INFO]	26	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:26:34,630	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:26:35,511	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:26:36,429	[INFO]	29	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:26:37,348	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:26:40,307	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:26:40,308	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:26:41,156	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:26:42,071	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:26:42,993	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:26:42,994	[INFO]	35	SUCCESS	+4.0	
2020-12-10 04:26:42,994	[DEBUG]	
2020-12-10 04:26:43,924	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:26:44,856	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:26:45,807	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:26:46,751	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:26:47,691	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:26:48,618	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:26:49,553	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:26:50,515	[INFO]	43	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:26:51,446	[INFO]	44	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:26:52,378	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:26:53,331	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:26:54,258	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:26:55,207	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:26:56,137	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:26:57,064	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:27:00,019	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:27:00,019	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:27:00,889	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:27:03,702	[INFO]	53	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:27:03,703	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:27:04,610	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:27:05,504	[INFO]	55	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:27:05,505	[INFO]	56	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:27:05,506	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:27:05,507	[INFO]	57	SUCCESS	+4.0	
2020-12-10 04:27:05,507	[DEBUG]	
2020-12-10 04:27:05,508	[INFO]	58	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:27:05,508	[DEBUG]	
2020-12-10 04:27:05,509	[INFO]	59	SUCCESS	+4.0	
2020-12-10 04:27:05,509	[DEBUG]	
2020-12-10 04:27:06,467	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:27:07,337	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:27:10,427	[INFO]	62	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:27:10,428	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:27:10,429	[INFO]	63	SUCCESS	+4.0	
2020-12-10 04:27:10,429	[DEBUG]	
2020-12-10 04:27:11,371	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:27:14,215	[INFO]	65	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:27:14,216	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:27:17,052	[INFO]	66	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 04:27:17,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,30 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 18,32 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:27:17,954	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:27:17,955	[INFO]	68	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:27:17,956	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:27:17,956	[INFO]	69	SUCCESS	+4.0	
2020-12-10 04:27:17,957	[DEBUG]	
2020-12-10 04:27:20,936	[INFO]	70	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:27:20,937	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:27:21,845	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:27:21,847	[INFO]	72	SUCCESS	+4.0	
2020-12-10 04:27:21,848	[DEBUG]	
2020-12-10 04:27:22,782	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:27:23,707	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:27:24,628	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:27:25,553	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:27:26,496	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:27:27,443	[INFO]	78	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:27:28,381	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:27:29,322	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:27:32,313	[INFO]	81	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:27:32,314	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:27:33,186	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:27:34,164	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:27:37,070	[INFO]	84	SUCCESS	*3.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:27:37,071	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:27:37,966	[INFO]	85	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:27:38,764	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:27:39,577	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:27:42,453	[INFO]	88	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:27:42,455	[INFO]	89	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:27:45,314	[INFO]	90	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:27:45,315	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:27:46,220	[INFO]	91	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:27:46,222	[INFO]	92	SUCCESS	 4.0	
2020-12-10 04:27:47,162	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:27:50,091	[INFO]	94	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:27:51,022	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:27:51,956	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:27:52,868	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:27:53,785	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:27:54,743	[INFO]	99	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:27:55,694	[INFO]	100	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:27:58,413	[INFO]	101	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:27:59,309	[INFO]	102	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:28:00,282	[INFO]	103	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:28:01,249	[INFO]	104	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:28:04,174	[INFO]	105	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 04:28:05,041	[INFO]	106	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:28:07,869	[INFO]	107	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 04:28:08,804	[INFO]	108	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:28:09,719	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:28:10,657	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:28:13,492	[INFO]	111	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:28:16,335	[INFO]	112	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:28:16,336	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:28:17,196	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:28:17,199	[INFO]	114	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:28:17,200	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:28:18,126	[INFO]	115	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:28:18,127	[INFO]	116	SUCCESS	 4.0	
2020-12-10 04:28:21,003	[INFO]	117	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:28:21,912	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:28:22,844	[INFO]	119	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:28:23,775	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:28:24,684	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:28:27,528	[INFO]	122	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 04:28:27,528	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,32 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:28:28,468	[INFO]	123	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:28:29,403	[INFO]	124	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:28:30,344	[INFO]	125	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:28:31,288	[INFO]	126	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:28:32,141	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:28:32,142	[INFO]	128	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:28:32,142	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:28:33,049	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:28:34,002	[INFO]	130	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:28:36,874	[INFO]	131	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:28:36,875	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,33 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:28:37,826	[INFO]	132	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:28:38,738	[INFO]	133	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:28:39,697	[INFO]	134	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:28:40,623	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:28:41,580	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:28:42,524	[INFO]	137	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:28:42,527	[INFO]	138	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:28:42,528	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:28:43,464	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:28:43,465	[INFO]	140	SUCCESS	 4.0	
2020-12-10 04:28:44,403	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:28:45,367	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:28:46,292	[INFO]	143	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:28:46,296	[INFO]	144	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:28:46,297	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:28:47,200	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:28:47,201	[INFO]	146	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:28:48,104	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:28:48,105	[INFO]	148	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:28:48,106	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:28:49,028	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:28:49,029	[INFO]	150	SUCCESS	 4.0	
2020-12-10 04:28:49,954	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:28:52,835	[INFO]	152	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:28:53,767	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:28:54,685	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:28:55,638	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:28:56,568	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:28:57,477	[INFO]	157	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:28:58,418	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:28:59,322	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:29:00,269	[INFO]	160	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:29:01,210	[INFO]	161	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:29:02,151	[INFO]	162	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:29:03,081	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:29:04,008	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:29:06,861	[INFO]	165	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:29:07,761	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:29:08,579	[INFO]	167	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:29:09,533	[INFO]	168	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:29:10,483	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:29:13,355	[INFO]	170	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:29:14,230	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:29:15,176	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:18,010	[INFO]	173	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:29:18,845	[INFO]	174	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:29:19,801	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:20,747	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:29:21,662	[INFO]	177	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:29:22,591	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:29:23,566	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:29:26,513	[INFO]	180	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:29:26,514	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:29:26,515	[INFO]	181	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:29:26,515	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:29,371	[INFO]	182	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:29:29,372	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:29:32,219	[INFO]	183	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:29:32,221	[INFO]	184	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:29:32,221	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:32,222	[INFO]	185	SUCCESS	 4.0	
2020-12-10 04:29:35,058	[INFO]	186	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:35,060	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:35,063	[INFO]	187	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 04:29:35,064	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:35,066	[INFO]	188	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:35,068	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:35,070	[INFO]	189	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:35,071	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:35,075	[INFO]	190	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:35,077	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:37,844	[INFO]	191	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:38,750	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:29:39,678	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:29:39,682	[INFO]	194	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:39,683	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:39,687	[INFO]	195	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:29:39,688	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:39,690	[INFO]	196	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:39,692	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:39,696	[INFO]	197	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:39,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:42,553	[INFO]	198	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:42,554	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:45,357	[INFO]	199	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:45,360	[INFO]	200	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:29:45,361	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:45,362	[INFO]	201	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:29:45,363	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:45,364	[INFO]	202	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:29:45,365	[INFO]	203	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 04:29:45,366	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:46,298	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:29:46,302	[INFO]	205	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 04:29:46,303	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:46,307	[INFO]	206	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:29:46,309	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:46,313	[INFO]	207	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:29:46,315	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:46,319	[INFO]	208	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:29:46,322	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:46,326	[INFO]	209	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:29:46,329	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,252	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:29:47,254	[INFO]	211	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:29:47,255	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,257	[INFO]	212	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:29:47,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,259	[INFO]	213	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:29:47,260	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,262	[INFO]	214	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:47,263	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,265	[INFO]	215	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:47,266	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,268	[INFO]	216	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:47,268	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,270	[INFO]	217	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:29:47,271	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,273	[INFO]	218	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:29:47,274	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,275	[INFO]	219	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:29:47,276	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,278	[INFO]	220	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:29:47,279	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,281	[INFO]	221	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:29:47,282	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,284	[INFO]	222	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:29:47,285	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,286	[INFO]	223	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:29:47,287	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:47,288	[INFO]	224	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:29:47,289	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:47,290	[INFO]	225	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:29:47,291	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:47,292	[INFO]	226	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:29:47,293	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:47,295	[INFO]	227	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:29:47,295	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:48,263	[INFO]	228	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:29:51,167	[INFO]	229	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:29:51,169	[INFO]	230	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:29:51,170	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:51,172	[INFO]	231	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:29:51,173	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:52,082	[INFO]	232	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:29:52,084	[INFO]	233	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:29:52,085	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:52,087	[INFO]	234	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:29:52,088	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:52,089	[INFO]	235	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:29:52,090	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:52,091	[INFO]	236	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:29:52,092	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:52,093	[INFO]	237	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:29:52,094	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:29:53,031	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:29:53,033	[INFO]	239	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:53,034	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,036	[INFO]	240	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:53,037	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,039	[INFO]	241	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:53,039	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,041	[INFO]	242	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:53,042	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,043	[INFO]	243	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:53,044	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,046	[INFO]	244	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:29:53,047	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,049	[INFO]	245	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:29:53,050	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,051	[INFO]	246	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:29:53,052	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:53,053	[INFO]	247	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:29:53,054	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,008	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:29:54,012	[INFO]	249	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:29:54,014	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,018	[INFO]	250	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:29:54,020	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,966	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:29:54,970	[INFO]	252	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:29:54,971	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,975	[INFO]	253	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:29:54,976	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,981	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:29:54,985	[INFO]	255	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:29:54,987	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:54,990	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:29:54,993	[INFO]	257	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 04:29:54,995	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:55,970	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:56,890	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:57,816	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:29:57,819	[INFO]	261	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 04:29:57,820	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:58,752	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:29:59,682	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:59,684	[INFO]	264	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 04:29:59,685	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,686	[INFO]	265	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:29:59,687	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,689	[INFO]	266	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 04:29:59,689	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,691	[INFO]	267	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:59,692	[INFO]	268	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:59,694	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,695	[INFO]	269	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:29:59,696	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,698	[INFO]	270	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,699	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,700	[INFO]	271	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:29:59,701	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,703	[INFO]	272	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:29:59,704	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,706	[INFO]	273	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:29:59,707	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,709	[INFO]	274	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:59,711	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,712	[INFO]	275	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:29:59,713	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,715	[INFO]	276	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:29:59,716	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,718	[INFO]	277	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:29:59,719	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,720	[INFO]	278	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:59,721	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,723	[INFO]	279	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:59,724	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,726	[INFO]	280	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,727	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,728	[INFO]	281	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,729	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,731	[INFO]	282	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,732	[INFO]	283	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,733	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,735	[INFO]	284	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:29:59,736	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,738	[INFO]	285	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:29:59,739	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,740	[INFO]	286	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:29:59,741	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:29:59,744	[INFO]	287	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:29:59,745	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 34,40 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:02,617	[INFO]	288	SUCCESS	*2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:30:02,618	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:02,621	[INFO]	289	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:30:02,622	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:02,624	[INFO]	290	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:30:02,625	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:02,626	[INFO]	291	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:02,628	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:03,534	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:30:03,539	[INFO]	293	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:30:03,542	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,674	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:30:04,677	[INFO]	295	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:04,679	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,681	[INFO]	296	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:04,682	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,684	[INFO]	297	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:04,685	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,687	[INFO]	298	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:04,689	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,692	[INFO]	299	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:04,694	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,696	[INFO]	300	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:04,697	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:04,699	[INFO]	301	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:04,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:05,668	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:30:05,673	[INFO]	303	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:05,676	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:05,680	[INFO]	304	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:05,683	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,611	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:06,616	[INFO]	306	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:06,619	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,623	[INFO]	307	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:06,624	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,627	[INFO]	308	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:06,628	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,631	[INFO]	309	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:30:06,632	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,634	[INFO]	310	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:06,636	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,637	[INFO]	311	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:06,640	[INFO]	312	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:06,642	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:06,643	[INFO]	313	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:06,644	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:09,467	[INFO]	314	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:10,368	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:10,370	[INFO]	316	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:30:10,371	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,326	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:11,331	[INFO]	318	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:11,333	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,336	[INFO]	319	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:30:11,337	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,340	[INFO]	320	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:30:11,342	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,344	[INFO]	321	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:30:11,345	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,347	[INFO]	322	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:11,348	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,350	[INFO]	323	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:11,351	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:11,353	[INFO]	324	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:11,355	[INFO]	325	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:11,356	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:12,273	[INFO]	326	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:12,277	[INFO]	327	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:12,279	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:13,251	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:13,254	[INFO]	329	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:13,256	[INFO]	330	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:30:13,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:13,260	[INFO]	331	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:13,261	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:30:16,053	[INFO]	332	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:16,054	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:16,056	[INFO]	333	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:16,057	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:16,869	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:16,871	[INFO]	335	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:16,872	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:16,874	[INFO]	336	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:16,875	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:16,876	[INFO]	337	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:16,877	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:16,879	[INFO]	338	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:16,880	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:19,920	[INFO]	339	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:19,922	[INFO]	340	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:19,923	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:19,925	[INFO]	341	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:19,927	[INFO]	342	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:30:19,928	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:20,848	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:30:20,850	[INFO]	344	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:20,852	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:20,854	[INFO]	345	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:20,856	[INFO]	346	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:30:20,857	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:21,710	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:30:21,712	[INFO]	348	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:30:21,713	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:21,715	[INFO]	349	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:21,716	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:21,718	[INFO]	350	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:21,719	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:21,720	[INFO]	351	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:21,721	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:21,723	[INFO]	352	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:21,724	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:22,663	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:30:23,519	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:23,521	[INFO]	355	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:23,523	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,524	[INFO]	356	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:23,525	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,527	[INFO]	357	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:30:23,528	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,530	[INFO]	358	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:23,531	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,533	[INFO]	359	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:23,534	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,536	[INFO]	360	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:23,537	[INFO]	361	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:30:23,538	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,541	[INFO]	362	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:30:23,542	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,543	[INFO]	363	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:30:23,544	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,546	[INFO]	364	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:30:23,547	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,549	[INFO]	365	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:23,550	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,552	[INFO]	366	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:30:23,553	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:23,555	[INFO]	367	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:30:23,556	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:24,502	[INFO]	368	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:24,508	[INFO]	369	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:24,511	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:24,514	[INFO]	370	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:24,517	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:24,520	[INFO]	371	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:30:24,524	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:24,528	[INFO]	372	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:30:24,530	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:24,533	[INFO]	373	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:30:24,535	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,459	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:30:25,462	[INFO]	375	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:25,463	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,465	[INFO]	376	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:25,467	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,469	[INFO]	377	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:25,470	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,472	[INFO]	378	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:25,473	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,475	[INFO]	379	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:25,476	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:25,478	[INFO]	380	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:25,479	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,403	[INFO]	381	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:30:26,407	[INFO]	382	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:26,408	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,411	[INFO]	383	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:26,413	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,416	[INFO]	384	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:26,417	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,419	[INFO]	385	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:26,420	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,422	[INFO]	386	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:26,424	[INFO]	387	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:26,425	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:26,427	[INFO]	388	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:26,428	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:27,364	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:27,369	[INFO]	390	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:27,372	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,504	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:30:28,506	[INFO]	392	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:28,507	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,509	[INFO]	393	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:28,510	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,512	[INFO]	394	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:30:28,513	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,515	[INFO]	395	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,516	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,519	[INFO]	396	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,520	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,522	[INFO]	397	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,523	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,525	[INFO]	398	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,526	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,528	[INFO]	399	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,529	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,531	[INFO]	400	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:30:28,533	[INFO]	401	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:28,534	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,535	[INFO]	402	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:28,537	[INFO]	403	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:28,538	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,540	[INFO]	404	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:28,541	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,543	[INFO]	405	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:30:28,544	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,546	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:30:28,547	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:28,549	[INFO]	407	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:30:29,610	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:29,612	[INFO]	409	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:30:29,614	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:29,616	[INFO]	410	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:30:29,617	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:29,618	[INFO]	411	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:30:29,619	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:29,621	[INFO]	412	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:29,622	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:29,624	[INFO]	413	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:29,625	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:29,627	[INFO]	414	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:29,628	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:30,582	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:30:30,585	[INFO]	416	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:30,586	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:31,511	[INFO]	417	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:32,432	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:32,438	[INFO]	419	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:30:32,440	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:32,444	[INFO]	420	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:30:32,447	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:33,388	[INFO]	421	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:30:33,392	[INFO]	422	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:30:33,394	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,322	[INFO]	423	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:30:34,327	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:30:34,329	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,333	[INFO]	425	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:34,335	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,340	[INFO]	426	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:34,343	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,346	[INFO]	427	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:34,348	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,354	[INFO]	428	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:34,356	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,360	[INFO]	429	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:30:34,362	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,365	[INFO]	430	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,366	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,369	[INFO]	431	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,371	[INFO]	432	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,372	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,374	[INFO]	433	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,375	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,377	[INFO]	434	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,378	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:34,380	[INFO]	435	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:30:34,381	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:35,380	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:30:35,384	[INFO]	437	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:35,386	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,684	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:30:36,686	[INFO]	439	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:36,687	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,689	[INFO]	440	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:30:36,690	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,691	[INFO]	441	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:30:36,692	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,694	[INFO]	442	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:30:36,696	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,697	[INFO]	443	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:30:36,699	[INFO]	444	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:30:36,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,703	[INFO]	445	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:36,704	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,706	[INFO]	446	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:30:36,708	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,711	[INFO]	447	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:30:36,712	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,715	[INFO]	448	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:36,716	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:36,719	[INFO]	449	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:36,720	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,001	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:30:38,006	[INFO]	451	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:30:38,008	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,012	[INFO]	452	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:30:38,015	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,019	[INFO]	453	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:30:38,022	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,026	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:30:38,028	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,032	[INFO]	455	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:38,035	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,039	[INFO]	456	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:38,041	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,045	[INFO]	457	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:38,047	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,051	[INFO]	458	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:38,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:38,057	[INFO]	459	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:30:38,059	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,793	[INFO]	460	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:41,796	[INFO]	461	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:30:41,798	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,802	[INFO]	462	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:41,804	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,807	[INFO]	463	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:41,809	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,813	[INFO]	464	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:41,814	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,818	[INFO]	465	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:30:41,820	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,823	[INFO]	466	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:41,825	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,829	[INFO]	467	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:41,832	[INFO]	468	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:41,834	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,837	[INFO]	469	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:41,839	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,843	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:41,845	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,847	[INFO]	471	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:41,849	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,852	[INFO]	472	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:30:41,854	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,857	[INFO]	473	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:41,859	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,862	[INFO]	474	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:30:41,864	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,867	[INFO]	475	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:30:41,869	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:41,873	[INFO]	476	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:41,875	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:42,957	[INFO]	477	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:30:42,959	[INFO]	478	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:42,960	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:42,962	[INFO]	479	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:42,963	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:43,945	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:30:43,947	[INFO]	481	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:43,949	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,225	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:30:45,228	[INFO]	483	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:45,229	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,231	[INFO]	484	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:45,233	[INFO]	485	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:30:45,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,237	[INFO]	486	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:30:45,239	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,242	[INFO]	487	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:30:45,243	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,245	[INFO]	488	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:30:45,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,249	[INFO]	489	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:45,250	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,252	[INFO]	490	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:30:45,254	[INFO]	491	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:30:45,255	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,257	[INFO]	492	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:45,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,260	[INFO]	493	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:45,262	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:45,264	[INFO]	494	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:45,265	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:48,364	[INFO]	495	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:48,366	[INFO]	496	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:30:48,367	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:48,369	[INFO]	497	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 04:30:48,369	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:48,371	[INFO]	498	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:30:48,372	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:48,373	[INFO]	499	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:30:48,374	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:30:49,313	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:30:49,314	[INFO]	==== END ====
2020-12-10 04:30:49,314	[INFO]	Reason: step budget
2020-12-10 04:30:49,316	[INFO]	
2020-12-10 04:30:49,316	[INFO]	========== EPOCH 9 ==========
2020-12-10 04:30:49,316	[INFO]	==== WARMUP ====
2020-12-10 04:30:52,226	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:30:52,227	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:30:55,143	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:30:55,144	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:30:58,059	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:30:58,059	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:31:00,865	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:31:00,866	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:31:00,866	[INFO]	==== START ====
2020-12-10 04:31:01,768	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:31:04,707	[INFO]	2	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:31:04,707	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:31:04,708	[INFO]	3	SUCCESS	+4.0	
2020-12-10 04:31:04,708	[DEBUG]	
2020-12-10 04:31:05,609	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:31:06,514	[INFO]	5	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:31:09,376	[INFO]	6	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:31:09,377	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:31:09,378	[INFO]	7	SUCCESS	+4.0	
2020-12-10 04:31:09,378	[DEBUG]	
2020-12-10 04:31:12,213	[INFO]	8	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:31:12,214	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:31:13,155	[INFO]	9	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:31:13,156	[INFO]	10	SUCCESS	+4.0	
2020-12-10 04:31:13,157	[DEBUG]	
2020-12-10 04:31:15,983	[INFO]	11	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:31:15,984	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:31:15,985	[INFO]	12	SUCCESS	+4.0	
2020-12-10 04:31:15,985	[DEBUG]	
2020-12-10 04:31:16,927	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:31:17,876	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:31:18,781	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:31:19,744	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:31:20,659	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:31:21,622	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:31:22,553	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:31:23,475	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:31:24,409	[INFO]	21	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:31:25,315	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:31:28,184	[INFO]	23	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:31:28,185	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:31:28,186	[INFO]	24	SUCCESS	+4.0	
2020-12-10 04:31:28,186	[DEBUG]	
2020-12-10 04:31:29,137	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:31:30,071	[INFO]	26	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:31:30,980	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:31:31,926	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:31:32,848	[INFO]	29	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:31:33,784	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:31:34,743	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:31:35,674	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:31:36,605	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:31:39,490	[INFO]	34	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:31:39,491	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:31:39,491	[INFO]	35	SUCCESS	+4.0	
2020-12-10 04:31:39,492	[DEBUG]	
2020-12-10 04:31:40,295	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:31:41,206	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:31:41,207	[INFO]	38	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:31:41,207	[DEBUG]	
2020-12-10 04:31:44,034	[INFO]	39	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:31:44,035	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     
                  }
              }
  

2020-12-10 04:31:46,836	[INFO]	40	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:31:46,837	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     
                  }
              }
  
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:31:47,676	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:31:48,602	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:31:51,529	[INFO]	43	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:31:51,530	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:31:52,456	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:31:53,389	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:31:53,392	[INFO]	46	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:31:53,393	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:31:53,395	[INFO]	47	SUCCESS	+4.0	
2020-12-10 04:31:53,395	[DEBUG]	
2020-12-10 04:31:56,235	[INFO]	48	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:31:56,236	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:31:56,237	[INFO]	49	SUCCESS	+4.0	
2020-12-10 04:31:56,238	[DEBUG]	
2020-12-10 04:31:57,162	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:31:58,090	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:31:58,980	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:31:59,924	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:32:02,805	[INFO]	54	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:32:02,808	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:32:02,809	[INFO]	55	SUCCESS	+4.0	
2020-12-10 04:32:02,810	[DEBUG]	
2020-12-10 04:32:03,699	[INFO]	56	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:32:04,593	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:32:05,510	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:32:06,428	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:32:09,324	[INFO]	60	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:32:09,325	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:32:09,326	[INFO]	61	SUCCESS	+4.0	
2020-12-10 04:32:09,326	[DEBUG]	
2020-12-10 04:32:10,130	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:32:11,063	[INFO]	63	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:32:11,958	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:32:11,960	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:32:11,960	[DEBUG]	
2020-12-10 04:32:11,961	[INFO]	66	SUCCESS	+4.0	
2020-12-10 04:32:11,961	[DEBUG]	
2020-12-10 04:32:12,886	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:32:13,849	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:32:14,742	[INFO]	69	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:32:15,666	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:32:16,596	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:32:17,527	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:32:18,456	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:32:19,369	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:32:20,284	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:32:21,225	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:32:22,162	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:32:23,087	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:32:24,031	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:32:24,971	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:32:27,814	[INFO]	81	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:32:27,815	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:32:30,761	[INFO]	82	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:32:30,762	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,34 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:30,763	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:32:31,639	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:32:34,544	[INFO]	85	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:32:34,547	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:35,426	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:32:38,244	[INFO]	87	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:32:38,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,40 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:38,247	[INFO]	88	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:32:38,247	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:39,160	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:32:42,014	[INFO]	90	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:32:42,016	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,35 ****
--- 21,40 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 04:32:42,930	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:32:42,932	[INFO]	92	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:32:42,932	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:45,791	[INFO]	93	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:32:45,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,34 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:46,703	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:32:46,704	[INFO]	95	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:32:46,705	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
--- 21,34 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:32:46,706	[INFO]	96	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:32:46,706	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:32:46,707	[INFO]	97	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:32:46,708	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:32:47,761	[INFO]	98	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:32:47,763	[INFO]	99	SUCCESS	+4.0	
2020-12-10 04:32:47,763	[DEBUG]	
2020-12-10 04:32:48,698	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:32:49,647	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:32:50,634	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:32:51,566	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:32:52,516	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:32:53,468	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:32:54,409	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:32:55,219	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:32:56,122	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:32:57,066	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:32:57,069	[INFO]	110	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:32:57,069	[DEBUG]	
2020-12-10 04:32:58,041	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:32:58,986	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:32:58,988	[INFO]	113	SUCCESS	+4.0	
2020-12-10 04:32:58,989	[DEBUG]	
2020-12-10 04:32:59,911	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:33:00,820	[INFO]	115	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:33:01,791	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:33:02,763	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:33:05,614	[INFO]	118	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:33:05,615	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:33:08,422	[INFO]	119	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:33:08,423	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 29,34 ****
--- 27,36 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:33:11,339	[INFO]	120	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:33:11,342	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 29,34 ****
--- 27,41 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:33:14,178	[INFO]	121	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:33:14,180	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,43 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:33:17,031	[INFO]	122	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:33:17,032	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  
***************
*** 29,34 ****
--- 30,44 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:33:19,915	[INFO]	123	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:33:19,917	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  
***************
*** 29,34 ****
--- 30,40 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              }
  
              i++;

2020-12-10 04:33:22,743	[INFO]	124	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:33:22,744	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:33:22,745	[INFO]	125	SUCCESS	+4.0	
2020-12-10 04:33:22,745	[DEBUG]	
2020-12-10 04:33:23,595	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:33:23,598	[INFO]	127	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:33:23,599	[DEBUG]	
2020-12-10 04:33:26,468	[INFO]	128	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:33:26,469	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
                  longest = length + 1;
              }
  

2020-12-10 04:33:29,341	[INFO]	129	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:33:29,343	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,35 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
--- 27,41 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
                  longest = length + 1;
              }
+ 
+             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:33:30,260	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:33:33,087	[INFO]	131	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:33:33,088	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:33:34,019	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:33:34,022	[INFO]	133	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:33:34,023	[DEBUG]	
2020-12-10 04:33:34,023	[INFO]	134	SUCCESS	+4.0	
2020-12-10 04:33:34,024	[DEBUG]	
2020-12-10 04:33:34,953	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:33:37,921	[INFO]	136	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:33:37,922	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:33:37,923	[INFO]	137	SUCCESS	+4.0	
2020-12-10 04:33:37,923	[DEBUG]	
2020-12-10 04:33:38,777	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:33:41,633	[INFO]	139	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:33:41,634	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     
                  }
              }
  

2020-12-10 04:33:42,565	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:33:42,568	[INFO]	141	SUCCESS	+4.0	
2020-12-10 04:33:42,569	[DEBUG]	
2020-12-10 04:33:45,488	[INFO]	142	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:33:45,488	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:33:45,490	[INFO]	143	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:33:45,490	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:33:46,372	[INFO]	144	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:33:47,322	[INFO]	145	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:33:47,323	[INFO]	146	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:33:47,324	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:33:47,324	[INFO]	147	SUCCESS	+4.0	
2020-12-10 04:33:47,325	[DEBUG]	
2020-12-10 04:33:50,245	[INFO]	148	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:33:50,247	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:33:51,127	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:33:52,049	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:33:52,983	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:33:53,920	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:33:54,850	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:33:55,775	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:33:56,717	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:33:57,653	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:33:57,656	[INFO]	157	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:33:57,657	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:33:58,571	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:33:59,517	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:33:59,520	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:34:02,394	[INFO]	161	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:34:02,396	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,26 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:34:02,399	[INFO]	162	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:34:02,401	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,26 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:34:03,313	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:34:04,227	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:34:05,109	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:34:07,935	[INFO]	166	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:34:07,936	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:34:07,937	[INFO]	167	SUCCESS	+4.0	
2020-12-10 04:34:07,937	[DEBUG]	
2020-12-10 04:34:08,877	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:34:11,734	[INFO]	169	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:34:11,734	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:34:11,735	[INFO]	170	SUCCESS	+4.0	
2020-12-10 04:34:11,735	[DEBUG]	
2020-12-10 04:34:12,650	[INFO]	171	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:34:13,568	[INFO]	172	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:34:14,412	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:34:15,334	[INFO]	174	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:34:16,243	[INFO]	175	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:34:16,245	[INFO]	176	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:34:16,246	[DEBUG]	
2020-12-10 04:34:16,247	[INFO]	177	SUCCESS	+4.0	
2020-12-10 04:34:16,247	[DEBUG]	
2020-12-10 04:34:17,198	[INFO]	178	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:34:18,134	[INFO]	179	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:34:19,064	[INFO]	180	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:34:20,013	[INFO]	181	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:34:22,866	[INFO]	182	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:34:22,868	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 04:34:23,800	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:34:23,802	[INFO]	184	SUCCESS	+4.0	
2020-12-10 04:34:23,803	[DEBUG]	
2020-12-10 04:34:24,718	[INFO]	185	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:34:24,722	[INFO]	186	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:34:25,676	[INFO]	187	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:34:26,616	[INFO]	188	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:34:29,435	[INFO]	189	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:34:29,436	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:34:29,437	[INFO]	190	SUCCESS	+4.0	
2020-12-10 04:34:29,437	[DEBUG]	
2020-12-10 04:34:30,357	[INFO]	191	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:34:33,208	[INFO]	192	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:34:33,209	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:34:33,210	[INFO]	193	SUCCESS	+4.0	
2020-12-10 04:34:33,211	[DEBUG]	
2020-12-10 04:34:34,133	[INFO]	194	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:34:35,058	[INFO]	195	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:34:36,001	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:34:36,967	[INFO]	197	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:34:39,958	[INFO]	198	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:34:39,960	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:34:39,962	[INFO]	199	SUCCESS	+4.0	
2020-12-10 04:34:39,962	[DEBUG]	
2020-12-10 04:34:42,722	[INFO]	200	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:34:42,723	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:34:42,724	[INFO]	201	SUCCESS	+4.0	
2020-12-10 04:34:42,724	[DEBUG]	
2020-12-10 04:34:43,654	[INFO]	202	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:34:46,538	[INFO]	203	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:34:46,538	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:34:47,436	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:34:47,437	[INFO]	205	SUCCESS	+4.0	
2020-12-10 04:34:47,437	[DEBUG]	
2020-12-10 04:34:47,438	[INFO]	206	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:34:48,356	[INFO]	207	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:34:49,351	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:34:50,317	[INFO]	209	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:34:51,236	[INFO]	210	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:34:52,105	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:34:53,040	[INFO]	212	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:34:53,043	[INFO]	213	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:34:53,970	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:34:54,902	[INFO]	215	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:34:55,838	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:34:56,764	[INFO]	217	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:34:57,679	[INFO]	218	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:34:58,591	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:34:59,529	[INFO]	220	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:35:02,439	[INFO]	221	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:35:02,439	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:35:02,440	[INFO]	222	SUCCESS	+4.0	
2020-12-10 04:35:02,440	[DEBUG]	
2020-12-10 04:35:03,304	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:35:06,233	[INFO]	224	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:35:06,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:35:07,077	[INFO]	225	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:35:08,013	[INFO]	226	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:35:08,015	[INFO]	227	SUCCESS	+4.0	
2020-12-10 04:35:08,016	[DEBUG]	
2020-12-10 04:35:08,974	[INFO]	228	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:35:08,976	[INFO]	229	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:35:08,977	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:35:08,979	[INFO]	230	SUCCESS	+4.0	
2020-12-10 04:35:08,979	[DEBUG]	
2020-12-10 04:35:11,743	[INFO]	231	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:11,745	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 04:35:11,746	[INFO]	232	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:35:11,747	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 04:35:11,748	[INFO]	233	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:11,749	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 04:35:11,750	[INFO]	234	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 04:35:11,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 04:35:14,615	[INFO]	235	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 04:35:14,616	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val <= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:35:17,479	[INFO]	236	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:35:17,480	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val <= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:35:20,395	[INFO]	237	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:35:20,397	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:35:23,233	[INFO]	238	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:35:23,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,35 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:35:26,059	[INFO]	239	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:35:26,060	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 04:35:26,061	[INFO]	240	SUCCESS	+4.0	
2020-12-10 04:35:26,061	[DEBUG]	
2020-12-10 04:35:26,951	[INFO]	241	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:35:27,814	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:28,871	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:35:29,802	[INFO]	244	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:35:30,734	[INFO]	245	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:35:31,699	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:35:34,655	[INFO]	247	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:35:34,656	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:35:35,558	[INFO]	248	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:35:35,559	[INFO]	249	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:35:35,560	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:35:35,561	[INFO]	250	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:35:35,561	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:35:38,492	[INFO]	251	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:38,493	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,30 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:35:39,395	[INFO]	252	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:35:40,331	[INFO]	253	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:35:41,292	[INFO]	254	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:35:44,120	[INFO]	255	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:44,122	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:35:45,045	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:35:45,047	[INFO]	257	SUCCESS	+4.0	
2020-12-10 04:35:45,048	[DEBUG]	
2020-12-10 04:35:47,890	[INFO]	258	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 04:35:47,891	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length > longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:35:47,892	[INFO]	259	SUCCESS	+4.0	
2020-12-10 04:35:47,892	[DEBUG]	
2020-12-10 04:35:48,816	[INFO]	260	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:35:49,766	[INFO]	261	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:35:50,732	[INFO]	262	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:35:51,662	[INFO]	263	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:35:54,482	[INFO]	264	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:35:54,483	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:35:55,358	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:35:55,360	[INFO]	266	SUCCESS	+4.0	
2020-12-10 04:35:55,361	[DEBUG]	
2020-12-10 04:35:56,278	[INFO]	267	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:35:57,184	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:36:00,054	[INFO]	269	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:36:00,055	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:00,056	[INFO]	270	SUCCESS	+4.0	
2020-12-10 04:36:00,056	[DEBUG]	
2020-12-10 04:36:00,973	[INFO]	271	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:36:01,894	[INFO]	272	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:36:02,822	[INFO]	273	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:03,734	[INFO]	274	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:36:04,655	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:36:05,592	[INFO]	276	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:36:06,537	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:36:07,482	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:36:08,428	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:36:11,282	[INFO]	280	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:36:11,283	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:36:11,284	[INFO]	281	SUCCESS	+4.0	
2020-12-10 04:36:11,284	[DEBUG]	
2020-12-10 04:36:12,086	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:36:12,992	[INFO]	283	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:36:13,939	[INFO]	284	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:36:16,819	[INFO]	285	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:36:16,820	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:36:17,741	[INFO]	286	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:17,743	[INFO]	287	SUCCESS	+4.0	
2020-12-10 04:36:17,744	[DEBUG]	
2020-12-10 04:36:18,711	[INFO]	288	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:36:18,714	[INFO]	289	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:36:19,630	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:36:19,632	[INFO]	291	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:19,632	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:20,582	[INFO]	292	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:36:20,585	[INFO]	293	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:36:20,587	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:20,589	[INFO]	294	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:36:20,591	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:20,593	[INFO]	295	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:36:20,594	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:21,519	[INFO]	296	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:36:22,457	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:36:25,393	[INFO]	298	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:36:25,395	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:25,396	[INFO]	299	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:25,396	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:28,304	[INFO]	300	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:36:28,305	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,36 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:31,151	[INFO]	301	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:36:31,152	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,37 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 22,46 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:36:32,009	[INFO]	302	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:32,942	[INFO]	303	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:33,881	[INFO]	304	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:36:33,884	[INFO]	305	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:36:33,886	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,37 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 22,46 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:36:36,734	[INFO]	306	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:36:36,735	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,37 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 22,45 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:36:36,736	[INFO]	307	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:36,737	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:37,650	[INFO]	308	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:38,570	[INFO]	309	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:38,572	[INFO]	310	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:36:38,573	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:38,574	[INFO]	311	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:38,575	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,35 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:38,576	[INFO]	312	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:39,505	[INFO]	313	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:36:40,428	[INFO]	314	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:36:40,430	[INFO]	315	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:36:40,431	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:43,384	[INFO]	316	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:36:43,385	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,30 ****
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:44,190	[INFO]	317	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:36:45,067	[INFO]	318	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:36:46,022	[INFO]	319	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:36:46,027	[INFO]	320	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:46,028	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,30 ****
--- 21,33 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             longest = length + 1;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:36:46,975	[INFO]	321	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:46,979	[INFO]	322	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:46,980	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:47,911	[INFO]	323	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:48,832	[INFO]	324	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:36:48,836	[INFO]	325	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:48,837	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:48,839	[INFO]	326	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:48,840	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:48,842	[INFO]	327	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:36:48,844	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:49,792	[INFO]	328	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:36:50,765	[INFO]	329	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:36:51,674	[INFO]	330	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:36:51,676	[INFO]	331	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:36:51,676	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:36:51,677	[INFO]	332	SUCCESS	+4.0	
2020-12-10 04:36:51,677	[DEBUG]	
2020-12-10 04:36:52,579	[INFO]	333	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:36:52,580	[INFO]	334	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:36:52,581	[DEBUG]	
2020-12-10 04:36:53,525	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:36:53,526	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:36:56,349	[INFO]	337	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 04:36:56,350	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:36:57,257	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:36:57,258	[INFO]	339	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 04:36:57,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:36:57,259	[INFO]	340	SUCCESS	+4.0	
2020-12-10 04:36:57,259	[DEBUG]	
2020-12-10 04:36:58,201	[INFO]	341	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:37:01,030	[INFO]	342	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:37:01,031	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:37:01,032	[INFO]	343	SUCCESS	+4.0	
2020-12-10 04:37:01,032	[DEBUG]	
2020-12-10 04:37:01,952	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:37:02,877	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:37:03,822	[INFO]	346	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:37:04,742	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:37:05,701	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:37:06,624	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:37:07,564	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:37:08,496	[INFO]	351	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:37:09,470	[INFO]	352	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:37:10,399	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:13,335	[INFO]	354	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:37:13,337	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:37:13,339	[INFO]	355	SUCCESS	+4.0	
2020-12-10 04:37:13,340	[DEBUG]	
2020-12-10 04:37:14,246	[INFO]	356	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:37:15,204	[INFO]	357	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:37:18,066	[INFO]	358	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:37:18,067	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:37:18,068	[INFO]	359	SUCCESS	+4.0	
2020-12-10 04:37:18,068	[DEBUG]	
2020-12-10 04:37:18,948	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:21,790	[INFO]	361	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:37:21,791	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:37:21,791	[INFO]	362	SUCCESS	+4.0	
2020-12-10 04:37:21,792	[DEBUG]	
2020-12-10 04:37:22,716	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:37:22,717	[INFO]	364	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:37:22,718	[DEBUG]	
2020-12-10 04:37:22,718	[INFO]	365	SUCCESS	+4.0	
2020-12-10 04:37:22,719	[DEBUG]	
2020-12-10 04:37:23,670	[INFO]	366	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:37:24,591	[INFO]	367	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:37:25,500	[INFO]	368	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:37:26,424	[INFO]	369	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:37:27,289	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:37:28,252	[INFO]	371	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:37:31,158	[INFO]	372	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:37:31,160	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:37:32,097	[INFO]	373	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:37:32,098	[INFO]	374	SUCCESS	+4.0	
2020-12-10 04:37:32,098	[DEBUG]	
2020-12-10 04:37:33,021	[INFO]	375	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:37:33,952	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:37:34,881	[INFO]	377	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:37:37,809	[INFO]	378	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:37:37,810	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:37:38,752	[INFO]	379	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:37:39,708	[INFO]	380	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:37:40,676	[INFO]	381	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:37:43,548	[INFO]	382	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:37:43,550	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,56 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:37:44,479	[INFO]	383	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:37:45,431	[INFO]	384	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:37:45,433	[INFO]	385	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:37:45,434	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,56 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:37:45,435	[INFO]	386	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:37:45,436	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,56 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:37:48,371	[INFO]	387	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:37:48,373	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:37:48,375	[INFO]	388	SUCCESS	+4.0	
2020-12-10 04:37:48,376	[DEBUG]	
2020-12-10 04:37:51,252	[INFO]	389	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:37:51,253	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:37:51,254	[INFO]	390	SUCCESS	+4.0	
2020-12-10 04:37:51,254	[DEBUG]	
2020-12-10 04:37:52,173	[INFO]	391	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:37:53,081	[INFO]	392	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:37:55,940	[INFO]	393	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:37:55,941	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,942	[INFO]	394	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:55,943	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,944	[INFO]	395	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:37:55,944	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,945	[INFO]	396	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:55,946	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,947	[INFO]	397	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:37:55,947	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,948	[INFO]	398	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:55,949	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:55,950	[INFO]	399	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:37:55,950	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:56,869	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:37:56,872	[INFO]	401	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:56,873	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:57,805	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:37:57,807	[INFO]	403	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:37:57,807	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:58,756	[INFO]	404	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:37:58,760	[INFO]	405	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:37:58,761	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:59,722	[INFO]	406	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:37:59,724	[INFO]	407	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:37:59,724	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:37:59,725	[INFO]	408	SUCCESS	+4.0	
2020-12-10 04:37:59,725	[DEBUG]	
2020-12-10 04:38:00,684	[INFO]	409	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:38:01,607	[INFO]	410	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:38:04,588	[INFO]	411	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:38:04,588	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:38:05,432	[INFO]	412	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:38:05,433	[INFO]	413	SUCCESS	+4.0	
2020-12-10 04:38:05,433	[DEBUG]	
2020-12-10 04:38:08,278	[INFO]	414	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:38:08,279	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:38:08,280	[INFO]	415	SUCCESS	+4.0	
2020-12-10 04:38:08,280	[DEBUG]	
2020-12-10 04:38:09,203	[INFO]	416	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:38:10,134	[INFO]	417	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:38:13,015	[INFO]	418	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:38:13,016	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:38:13,017	[INFO]	419	SUCCESS	+4.0	
2020-12-10 04:38:13,018	[DEBUG]	
2020-12-10 04:38:13,909	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:38:14,796	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:38:15,703	[INFO]	422	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:38:16,638	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:38:17,590	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:38:18,520	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:38:19,474	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:38:20,397	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:38:21,347	[INFO]	428	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:38:24,275	[INFO]	429	SUCCESS	*3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:38:24,276	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:38:25,136	[INFO]	430	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:38:25,138	[INFO]	431	SUCCESS	 4.0	
2020-12-10 04:38:26,050	[INFO]	432	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:38:26,971	[INFO]	433	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:38:27,954	[INFO]	434	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:38:28,931	[INFO]	435	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:38:31,764	[INFO]	436	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:38:31,767	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:38:34,653	[INFO]	437	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:38:34,654	[INFO]	438	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:38:34,655	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:38:35,540	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:38:36,479	[INFO]	440	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:38:37,418	[INFO]	441	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:38:37,419	[INFO]	442	SUCCESS	 4.0	
2020-12-10 04:38:37,420	[INFO]	443	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:38:37,421	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:38:37,421	[INFO]	444	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:38:38,371	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:38:38,374	[INFO]	446	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:38:38,375	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:38:39,325	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:38:39,328	[INFO]	448	SUCCESS	 4.0	
2020-12-10 04:38:40,252	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:38:41,191	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:38:42,116	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:38:43,051	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:38:43,967	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:38:46,873	[INFO]	454	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:38:47,800	[INFO]	455	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:38:50,670	[INFO]	456	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 04:38:51,595	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:38:52,499	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:38:55,333	[INFO]	459	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:38:56,243	[INFO]	460	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:38:57,094	[INFO]	461	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:38:58,034	[INFO]	462	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:38:58,959	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:39:01,903	[INFO]	464	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:39:01,904	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:39:02,793	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:39:03,714	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:39:04,676	[INFO]	467	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:39:07,611	[INFO]	468	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:39:10,400	[INFO]	469	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:39:11,331	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:39:12,275	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:39:12,277	[INFO]	472	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:39:12,277	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:39:13,153	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:39:14,055	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:39:14,057	[INFO]	475	SUCCESS	 4.0	
2020-12-10 04:39:14,984	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:39:15,892	[INFO]	477	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:39:16,822	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:39:19,704	[INFO]	479	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:39:20,635	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:39:21,567	[INFO]	481	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:39:22,507	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:39:23,441	[INFO]	483	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:39:26,348	[INFO]	484	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:39:27,259	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:39:28,173	[INFO]	486	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:39:29,157	[INFO]	487	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:39:29,161	[INFO]	488	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:39:29,162	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:39:30,069	[INFO]	489	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:39:30,071	[INFO]	490	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:39:30,072	[INFO]	491	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 04:39:30,073	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:39:30,074	[INFO]	492	SUCCESS	 4.0	
2020-12-10 04:39:31,021	[INFO]	493	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:39:31,958	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:39:32,798	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:39:35,646	[INFO]	496	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:39:36,573	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:39:37,496	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:39:38,434	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:39:39,358	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:39:39,359	[INFO]	==== END ====
2020-12-10 04:39:39,360	[INFO]	Reason: step budget
2020-12-10 04:39:39,362	[INFO]	
2020-12-10 04:39:39,362	[INFO]	========== EPOCH 10 ==========
2020-12-10 04:39:39,363	[INFO]	==== WARMUP ====
2020-12-10 04:39:42,238	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:39:42,238	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:39:45,098	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:39:45,099	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:39:47,993	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:39:47,993	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:39:50,878	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:39:50,878	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:39:50,879	[INFO]	==== START ====
2020-12-10 04:39:53,777	[INFO]	1	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:39:53,779	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             i++;
  
              i++;
          }

2020-12-10 04:39:53,780	[INFO]	2	SUCCESS	+4.0	
2020-12-10 04:39:53,781	[DEBUG]	
2020-12-10 04:39:54,663	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:39:55,591	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:39:56,519	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:39:57,361	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:39:58,325	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:39:59,251	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:40:02,239	[INFO]	9	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:40:02,240	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 04:40:02,240	[INFO]	10	SUCCESS	+4.0	
2020-12-10 04:40:02,241	[DEBUG]	
2020-12-10 04:40:03,112	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:40:04,117	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:40:04,969	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:40:05,884	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:40:06,715	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:40:06,717	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:40:07,677	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:40:08,623	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:40:11,464	[INFO]	19	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:40:11,464	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:40:11,465	[INFO]	20	SUCCESS	+4.0	
2020-12-10 04:40:11,465	[DEBUG]	
2020-12-10 04:40:14,354	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:40:14,356	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  }
              }
  
+             i++;
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:40:15,268	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:40:16,233	[INFO]	23	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:40:16,235	[INFO]	24	SUCCESS	+4.0	
2020-12-10 04:40:16,235	[DEBUG]	
2020-12-10 04:40:19,146	[INFO]	25	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:40:19,147	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     
                  }
              }
  

2020-12-10 04:40:20,025	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:40:20,978	[INFO]	27	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:40:20,980	[INFO]	28	SUCCESS	+4.0	
2020-12-10 04:40:20,981	[DEBUG]	
2020-12-10 04:40:23,921	[INFO]	29	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:40:23,922	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:40:23,922	[INFO]	30	SUCCESS	+4.0	
2020-12-10 04:40:23,923	[DEBUG]	
2020-12-10 04:40:24,781	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:40:25,716	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:40:26,642	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:40:26,643	[INFO]	34	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:40:26,644	[DEBUG]	
2020-12-10 04:40:27,560	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:40:30,444	[INFO]	36	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:40:30,445	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:40:30,446	[INFO]	37	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:40:30,446	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:40:30,447	[INFO]	38	SUCCESS	+4.0	
2020-12-10 04:40:30,447	[DEBUG]	
2020-12-10 04:40:31,356	[INFO]	39	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:40:34,245	[INFO]	40	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:40:34,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 04:40:35,204	[INFO]	41	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:40:35,205	[INFO]	42	SUCCESS	+4.0	
2020-12-10 04:40:35,205	[DEBUG]	
2020-12-10 04:40:36,560	[INFO]	43	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:40:37,874	[INFO]	44	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:40:38,929	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:40:41,902	[INFO]	46	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:40:41,903	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:40:41,904	[INFO]	47	SUCCESS	+4.0	
2020-12-10 04:40:41,904	[DEBUG]	
2020-12-10 04:40:44,713	[INFO]	48	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:40:44,715	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:40:44,716	[INFO]	49	SUCCESS	+4.0	
2020-12-10 04:40:44,716	[DEBUG]	
2020-12-10 04:40:45,597	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:40:46,499	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:40:47,461	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:40:48,390	[INFO]	53	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:40:49,330	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:40:50,215	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:40:51,136	[INFO]	56	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:40:52,074	[INFO]	57	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:40:52,977	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:40:53,905	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:40:54,845	[INFO]	60	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:40:55,803	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:40:56,739	[INFO]	62	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:40:59,572	[INFO]	63	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:40:59,573	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 04:40:59,574	[INFO]	64	SUCCESS	+4.0	
2020-12-10 04:40:59,574	[DEBUG]	
2020-12-10 04:41:02,446	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:41:02,447	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:41:02,448	[INFO]	66	SUCCESS	+4.0	
2020-12-10 04:41:02,448	[DEBUG]	
2020-12-10 04:41:03,327	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:41:06,227	[INFO]	68	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:41:06,230	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 return longest;
              }
  
              i++;

2020-12-10 04:41:06,232	[INFO]	69	SUCCESS	+4.0	
2020-12-10 04:41:06,233	[DEBUG]	
2020-12-10 04:41:07,144	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:41:07,983	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:41:10,876	[INFO]	72	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:41:10,877	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:41:13,845	[INFO]	73	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:41:13,847	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
***************
*** 28,33 ****
--- 31,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:41:13,849	[INFO]	74	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:41:13,851	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:41:13,852	[INFO]	75	SUCCESS	+4.0	
2020-12-10 04:41:13,853	[DEBUG]	
2020-12-10 04:41:14,781	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:41:15,765	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:41:18,709	[INFO]	78	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:41:18,711	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:41:18,712	[INFO]	79	SUCCESS	+4.0	
2020-12-10 04:41:18,713	[DEBUG]	
2020-12-10 04:41:19,676	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:41:20,617	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:41:21,557	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:41:22,486	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:41:23,411	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:41:24,355	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:41:24,356	[INFO]	86	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:41:24,356	[DEBUG]	
2020-12-10 04:41:24,357	[INFO]	87	SUCCESS	+4.0	
2020-12-10 04:41:24,357	[DEBUG]	
2020-12-10 04:41:25,298	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:41:26,253	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:41:27,159	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:41:28,093	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:41:29,068	[INFO]	92	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:41:29,070	[INFO]	93	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:41:29,070	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:41:29,071	[INFO]	94	SUCCESS	+4.0	
2020-12-10 04:41:29,071	[DEBUG]	
2020-12-10 04:41:30,006	[INFO]	95	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:41:30,953	[INFO]	96	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:41:31,913	[INFO]	97	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:41:32,841	[INFO]	98	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:41:35,741	[INFO]	99	SUCCESS	*0.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:41:35,742	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:41:35,743	[INFO]	==== END ====
2020-12-10 04:41:35,743	[INFO]	Reason: target fitness reached
2020-12-10 04:41:35,744	[INFO]	
2020-12-10 04:41:35,744	[INFO]	========== EPOCH 11 ==========
2020-12-10 04:41:35,744	[INFO]	==== WARMUP ====
2020-12-10 04:41:38,652	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:41:38,652	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:41:41,564	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:41:41,564	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:41:44,443	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:41:44,443	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:41:47,248	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:41:47,248	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:41:47,249	[INFO]	==== START ====
2020-12-10 04:41:50,058	[INFO]	1	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:41:50,059	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:41:52,834	[INFO]	2	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:41:52,836	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:41:53,756	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:41:53,760	[INFO]	4	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:41:53,762	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:41:53,763	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:41:53,764	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:41:54,677	[INFO]	6	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:41:54,679	[INFO]	7	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:41:54,679	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:41:55,628	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:41:55,630	[INFO]	9	SUCCESS	+4.0	
2020-12-10 04:41:55,631	[DEBUG]	
2020-12-10 04:41:56,552	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:41:57,462	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:41:58,413	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:41:59,379	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:42:00,257	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:42:01,207	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:42:04,114	[INFO]	16	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:42:04,115	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:42:04,116	[INFO]	17	SUCCESS	+4.0	
2020-12-10 04:42:04,117	[DEBUG]	
2020-12-10 04:42:04,118	[INFO]	18	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:42:06,911	[INFO]	19	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:42:06,912	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:42:09,841	[INFO]	20	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:42:09,844	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,61 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:42:09,847	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:42:09,848	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:42:09,850	[INFO]	22	SUCCESS	+4.0	
2020-12-10 04:42:09,851	[DEBUG]	
2020-12-10 04:42:10,761	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:42:11,699	[INFO]	24	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:42:12,645	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:42:13,595	[INFO]	26	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:42:13,598	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:42:14,520	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:42:14,522	[INFO]	29	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:42:14,523	[DEBUG]	
2020-12-10 04:42:15,459	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:42:15,462	[INFO]	31	SUCCESS	+4.0	
2020-12-10 04:42:15,463	[DEBUG]	
2020-12-10 04:42:16,369	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:42:19,232	[INFO]	33	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:42:19,233	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:42:19,234	[INFO]	34	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:42:19,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:42:20,145	[INFO]	35	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:42:20,147	[INFO]	36	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:42:20,147	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:42:21,096	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:42:21,100	[INFO]	38	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:42:21,101	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:42:23,940	[INFO]	39	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:42:23,941	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:42:24,844	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:42:24,846	[INFO]	41	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:42:24,846	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:42:25,771	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:42:26,680	[INFO]	43	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:42:27,601	[INFO]	44	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:42:28,528	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:42:28,530	[INFO]	46	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:42:28,530	[DEBUG]	
2020-12-10 04:42:28,531	[INFO]	47	SUCCESS	+4.0	
2020-12-10 04:42:28,531	[DEBUG]	
2020-12-10 04:42:29,459	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:42:30,397	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:42:33,350	[INFO]	50	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:42:33,351	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:42:33,352	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:42:33,352	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:42:33,353	[INFO]	52	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:42:33,353	[DEBUG]	
2020-12-10 04:42:34,257	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:42:34,258	[INFO]	54	SUCCESS	+4.0	
2020-12-10 04:42:34,258	[DEBUG]	
2020-12-10 04:42:37,051	[INFO]	55	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:42:37,052	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:42:37,970	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:42:37,973	[INFO]	57	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:42:37,974	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:42:37,976	[INFO]	58	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:42:37,977	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:42:37,978	[INFO]	59	SUCCESS	+4.0	
2020-12-10 04:42:37,979	[DEBUG]	
2020-12-10 04:42:38,882	[INFO]	60	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:42:39,854	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:42:42,838	[INFO]	62	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:42:42,839	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:42:43,770	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:42:43,772	[INFO]	64	SUCCESS	+4.0	
2020-12-10 04:42:43,773	[DEBUG]	
2020-12-10 04:42:44,717	[INFO]	65	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:42:47,580	[INFO]	66	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:42:47,581	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:42:48,496	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:42:49,481	[INFO]	68	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:42:52,446	[INFO]	69	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 04:42:52,447	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j == longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:42:52,448	[INFO]	70	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:42:52,448	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:42:53,332	[INFO]	71	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:42:53,334	[INFO]	72	SUCCESS	+4.0	
2020-12-10 04:42:53,335	[DEBUG]	
2020-12-10 04:42:54,236	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:42:55,143	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:42:57,999	[INFO]	75	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='})
2020-12-10 04:42:58,000	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val != arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:42:58,002	[INFO]	76	SUCCESS	+4.0	
2020-12-10 04:42:58,003	[DEBUG]	
2020-12-10 04:42:58,910	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:42:58,912	[INFO]	78	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:42:58,912	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:42:58,913	[INFO]	79	SUCCESS	+4.0	
2020-12-10 04:42:58,913	[DEBUG]	
2020-12-10 04:42:59,846	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:43:00,688	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:43:03,584	[INFO]	82	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:43:03,585	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 04:43:03,587	[INFO]	83	SUCCESS	+4.0	
2020-12-10 04:43:03,588	[DEBUG]	
2020-12-10 04:43:04,522	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:43:05,416	[INFO]	85	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:43:06,362	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:43:07,293	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:43:08,217	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:43:09,147	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:43:12,019	[INFO]	90	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:43:12,020	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:43:12,950	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:43:12,952	[INFO]	92	SUCCESS	+4.0	
2020-12-10 04:43:12,953	[DEBUG]	
2020-12-10 04:43:13,876	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:43:14,778	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:43:15,735	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:43:18,642	[INFO]	96	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:43:18,644	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:43:18,646	[INFO]	97	SUCCESS	+4.0	
2020-12-10 04:43:18,647	[DEBUG]	
2020-12-10 04:43:18,649	[INFO]	98	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:43:19,548	[INFO]	99	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:43:20,487	[INFO]	100	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:43:21,441	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:43:22,354	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:43:23,277	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:43:24,206	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:43:25,128	[INFO]	105	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:43:28,031	[INFO]	106	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:43:28,034	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:43:30,915	[INFO]	107	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:43:30,916	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,56 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 04:43:31,881	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:43:34,801	[INFO]	109	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:43:34,802	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:43:34,803	[INFO]	110	SUCCESS	+4.0	
2020-12-10 04:43:34,803	[DEBUG]	
2020-12-10 04:43:34,804	[INFO]	111	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:43:34,804	[DEBUG]	
2020-12-10 04:43:34,804	[INFO]	112	SUCCESS	+4.0	
2020-12-10 04:43:34,805	[DEBUG]	
2020-12-10 04:43:35,684	[INFO]	113	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:43:36,630	[INFO]	114	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:43:37,535	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:43:40,453	[INFO]	116	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:43:40,454	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 04:43:40,454	[INFO]	117	SUCCESS	+4.0	
2020-12-10 04:43:40,455	[DEBUG]	
2020-12-10 04:43:41,348	[INFO]	118	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:43:42,297	[INFO]	119	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:43:45,167	[INFO]	120	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:43:45,168	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:43:46,073	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:43:46,074	[INFO]	122	SUCCESS	+4.0	
2020-12-10 04:43:46,075	[DEBUG]	
2020-12-10 04:43:47,014	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:43:49,919	[INFO]	124	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:43:49,920	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
                  longest = length + 1;
              }
  

2020-12-10 04:43:49,921	[INFO]	125	SUCCESS	+4.0	
2020-12-10 04:43:49,921	[DEBUG]	
2020-12-10 04:43:50,845	[INFO]	126	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:43:51,794	[INFO]	127	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:43:52,730	[INFO]	128	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:43:53,667	[INFO]	129	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:43:54,590	[INFO]	130	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:43:55,505	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:43:56,442	[INFO]	132	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:43:57,378	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:43:57,382	[INFO]	134	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:43:57,383	[DEBUG]	
2020-12-10 04:44:00,224	[INFO]	135	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:44:00,227	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:44:00,229	[INFO]	136	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:44:00,230	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:44:03,081	[INFO]	137	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:44:03,082	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 i++;
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:44:03,978	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:44:06,879	[INFO]	139	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:44:06,880	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:44:06,881	[INFO]	140	SUCCESS	+4.0	
2020-12-10 04:44:06,881	[DEBUG]	
2020-12-10 04:44:09,696	[INFO]	141	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:44:09,697	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:44:12,560	[INFO]	142	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:44:12,563	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:44:12,565	[INFO]	143	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:44:12,566	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:44:13,477	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:44:13,478	[INFO]	145	SUCCESS	+4.0	
2020-12-10 04:44:13,478	[DEBUG]	
2020-12-10 04:44:14,403	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:44:17,267	[INFO]	147	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:44:17,268	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:44:17,268	[INFO]	148	SUCCESS	+4.0	
2020-12-10 04:44:17,269	[DEBUG]	
2020-12-10 04:44:18,186	[INFO]	149	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:44:19,038	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:44:20,000	[INFO]	151	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:44:20,966	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:44:21,877	[INFO]	153	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:44:22,802	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:44:25,696	[INFO]	155	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:44:25,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:44:26,610	[INFO]	156	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:44:27,535	[INFO]	157	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:44:27,537	[INFO]	158	SUCCESS	+4.0	
2020-12-10 04:44:27,538	[DEBUG]	
2020-12-10 04:44:30,476	[INFO]	159	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:44:30,477	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:44:30,478	[INFO]	160	SUCCESS	+4.0	
2020-12-10 04:44:30,478	[DEBUG]	
2020-12-10 04:44:33,297	[INFO]	161	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:44:33,298	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:44:34,192	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:44:34,194	[INFO]	163	SUCCESS	+4.0	
2020-12-10 04:44:34,195	[DEBUG]	
2020-12-10 04:44:35,132	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:44:37,943	[INFO]	165	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:44:37,944	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:44:37,944	[INFO]	==== END ====
2020-12-10 04:44:37,945	[INFO]	Reason: target fitness reached
2020-12-10 04:44:37,945	[INFO]	
2020-12-10 04:44:37,945	[INFO]	========== EPOCH 12 ==========
2020-12-10 04:44:37,946	[INFO]	==== WARMUP ====
2020-12-10 04:44:40,782	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:44:40,783	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:44:43,598	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:44:43,598	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:44:46,432	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:44:46,433	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:44:49,296	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:44:49,296	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:44:49,296	[INFO]	==== START ====
2020-12-10 04:44:52,255	[INFO]	1	SUCCESS	*3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:44:52,256	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:44:53,139	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:44:53,140	[INFO]	3	SUCCESS	 4.0	
2020-12-10 04:44:54,074	[INFO]	4	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:44:54,998	[INFO]	5	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:44:55,946	[INFO]	6	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:44:58,846	[INFO]	7	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:44:59,766	[INFO]	8	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:45:02,570	[INFO]	9	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:45:05,418	[INFO]	10	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:45:08,274	[INFO]	11	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:45:08,275	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:45:11,078	[INFO]	12	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:45:12,010	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:45:12,011	[INFO]	14	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:45:12,012	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:13,003	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:45:13,959	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:45:14,884	[INFO]	17	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:45:14,886	[INFO]	18	SUCCESS	 4.0	
2020-12-10 04:45:15,847	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:45:16,769	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:45:19,689	[INFO]	21	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:45:19,689	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,28 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
!                     if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:22,487	[INFO]	22	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:45:23,411	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:45:23,414	[INFO]	24	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:45:23,415	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:24,366	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:45:24,368	[INFO]	26	SUCCESS	 4.0	
2020-12-10 04:45:27,300	[INFO]	27	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:45:28,215	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:45:29,210	[INFO]	29	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:45:32,093	[INFO]	30	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:45:34,898	[INFO]	31	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:45:36,056	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:45:37,060	[INFO]	33	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:45:40,024	[INFO]	34	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:45:40,026	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:45:40,026	[INFO]	36	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:45:40,027	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:40,948	[INFO]	37	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:45:40,949	[INFO]	38	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:45:40,950	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:41,875	[INFO]	39	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:45:41,878	[INFO]	40	SUCCESS	 4.0	
2020-12-10 04:45:42,844	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:45:43,776	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:45:44,739	[INFO]	43	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:45:45,621	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:45:46,545	[INFO]	45	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:45:47,471	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:45:48,401	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:45:49,341	[INFO]	48	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:45:50,186	[INFO]	49	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:45:51,149	[INFO]	50	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:45:52,074	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:45:53,006	[INFO]	52	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:45:55,915	[INFO]	53	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:45:58,698	[INFO]	54	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:45:58,699	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:45:58,700	[INFO]	55	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:45:58,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:45:58,701	[INFO]	56	SUCCESS	 4.0	
2020-12-10 04:46:01,583	[INFO]	57	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:46:02,516	[INFO]	58	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:46:03,452	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:46:06,291	[INFO]	60	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:46:07,210	[INFO]	61	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:46:08,176	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:46:09,105	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:46:10,068	[INFO]	64	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:46:11,052	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:46:11,987	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:46:12,917	[INFO]	67	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:46:13,848	[INFO]	68	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:46:14,793	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:46:15,766	[INFO]	70	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:46:16,694	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:46:17,606	[INFO]	72	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:46:20,531	[INFO]	73	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:46:23,470	[INFO]	74	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:46:23,472	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,26 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:46:26,242	[INFO]	75	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:46:27,211	[INFO]	76	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:46:27,215	[INFO]	77	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:46:27,216	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:46:28,123	[INFO]	78	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:46:28,124	[INFO]	79	SUCCESS	 4.0	
2020-12-10 04:46:31,058	[INFO]	80	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:46:31,059	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:46:33,831	[INFO]	81	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:46:34,736	[INFO]	82	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:46:34,738	[INFO]	83	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:46:34,738	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:46:34,739	[INFO]	84	SUCCESS	 4.0	
2020-12-10 04:46:35,669	[INFO]	85	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:46:36,549	[INFO]	86	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:46:37,455	[INFO]	87	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:46:38,403	[INFO]	88	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:46:41,403	[INFO]	89	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:46:41,404	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:46:44,176	[INFO]	90	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:46:44,178	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,35 ****
--- 28,42 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 04:46:46,978	[INFO]	91	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:46:49,880	[INFO]	92	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:46:49,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,35 ****
--- 27,43 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 04:46:52,777	[INFO]	93	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:46:52,778	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,33 ****
--- 27,39 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:46:53,769	[INFO]	94	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:46:54,733	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:46:55,674	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:46:58,509	[INFO]	97	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:46:59,455	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:47:00,397	[INFO]	99	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:47:01,369	[INFO]	100	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:47:04,195	[INFO]	101	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:47:04,198	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 longest = length + 1;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:05,086	[INFO]	102	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:47:05,992	[INFO]	103	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:47:08,844	[INFO]	104	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:47:08,845	[INFO]	105	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:47:08,846	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:47:08,846	[INFO]	106	SUCCESS	 4.0	
2020-12-10 04:47:09,758	[INFO]	107	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:47:10,703	[INFO]	108	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:47:11,658	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:47:12,595	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:47:15,567	[INFO]	111	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:47:16,478	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:47:17,364	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:47:18,284	[INFO]	114	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:47:19,224	[INFO]	115	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:47:22,230	[INFO]	116	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:47:23,134	[INFO]	117	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:47:24,069	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:47:24,993	[INFO]	119	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:47:25,949	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:47:26,884	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:47:27,815	[INFO]	122	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:47:30,811	[INFO]	123	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:30,812	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:30,814	[INFO]	124	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:47:30,814	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:33,636	[INFO]	125	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:47:33,638	[INFO]	126	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:33,638	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:36,480	[INFO]	127	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:47:36,481	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,40 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:47:36,482	[INFO]	128	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:36,482	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:39,327	[INFO]	129	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:39,329	[INFO]	130	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:47:39,329	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:40,199	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:47:40,200	[INFO]	132	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:40,201	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:40,201	[INFO]	133	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:41,148	[INFO]	134	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:47:44,008	[INFO]	135	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:47:46,821	[INFO]	136	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:47:46,822	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,33 ****
--- 27,39 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 04:47:46,823	[INFO]	137	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:46,823	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:47:46,824	[INFO]	138	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:47:46,825	[INFO]	139	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:47:46,825	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:47:46,826	[INFO]	140	SUCCESS	 4.0	
2020-12-10 04:47:47,728	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:47:48,664	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:47:49,610	[INFO]	143	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:47:50,569	[INFO]	144	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:47:51,418	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:47:52,359	[INFO]	146	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:47:53,309	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:47:56,161	[INFO]	148	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:47:56,162	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:47:56,163	[INFO]	149	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:47:56,163	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:47:56,164	[INFO]	150	SUCCESS	 4.0	
2020-12-10 04:47:57,057	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:47:57,989	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:47:58,912	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:47:59,883	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:48:00,802	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:48:01,714	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:48:02,656	[INFO]	157	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:48:03,599	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:48:04,571	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:48:05,509	[INFO]	160	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:48:08,373	[INFO]	161	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:48:09,280	[INFO]	162	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:48:10,198	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:48:11,134	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:48:12,054	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:48:12,895	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:48:13,819	[INFO]	167	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:48:14,758	[INFO]	168	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:48:15,686	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:48:18,516	[INFO]	170	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:48:18,517	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:48:21,665	[INFO]	171	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:48:22,550	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:48:23,454	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:48:23,455	[INFO]	174	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:23,456	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:24,383	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:48:24,384	[INFO]	176	SUCCESS	 4.0	
2020-12-10 04:48:27,289	[INFO]	177	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:48:28,212	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:48:29,276	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:48:30,214	[INFO]	180	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:48:33,048	[INFO]	181	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:48:33,049	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,26 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
!                     prefix_lengths.add(j);
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:35,861	[INFO]	182	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:48:35,862	[INFO]	183	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:35,862	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:35,863	[INFO]	184	SUCCESS	 4.0	
2020-12-10 04:48:38,758	[INFO]	185	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:48:38,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:48:38,760	[INFO]	186	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:38,761	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:38,761	[INFO]	187	SUCCESS	 4.0	
2020-12-10 04:48:39,634	[INFO]	188	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:48:40,583	[INFO]	189	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:48:43,435	[INFO]	190	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:48:43,436	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,26 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:43,437	[INFO]	191	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:43,437	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:43,438	[INFO]	192	SUCCESS	 4.0	
2020-12-10 04:48:44,342	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:48:45,266	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:48:48,142	[INFO]	195	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:48:49,050	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:48:50,011	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:48:50,983	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:48:51,925	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:48:52,866	[INFO]	200	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:48:52,868	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:48:53,826	[INFO]	202	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:48:54,761	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:48:54,765	[INFO]	204	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:48:54,766	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:54,767	[INFO]	205	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:54,767	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:57,624	[INFO]	206	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:48:58,502	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:48:58,503	[INFO]	208	SUCCESS	 4.0	
2020-12-10 04:48:58,504	[INFO]	209	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:48:58,505	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:58,505	[INFO]	210	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:48:58,506	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:48:59,478	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:48:59,480	[INFO]	212	SUCCESS	 4.0	
2020-12-10 04:49:00,406	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:49:01,364	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:49:02,276	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:49:03,185	[INFO]	216	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:06,008	[INFO]	217	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:49:06,950	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:49:07,869	[INFO]	219	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:49:10,729	[INFO]	220	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:49:11,625	[INFO]	221	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:12,543	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:49:15,437	[INFO]	223	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:49:15,439	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:49:15,440	[INFO]	224	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:49:15,441	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:49:15,443	[INFO]	225	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:49:15,444	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:49:15,446	[INFO]	226	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:49:15,448	[INFO]	227	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:49:18,376	[INFO]	228	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:18,378	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:49:21,228	[INFO]	229	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:21,230	[INFO]	230	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:21,230	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:49:21,231	[INFO]	231	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:24,033	[INFO]	232	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:49:24,035	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:49:24,037	[INFO]	233	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:49:24,038	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:49:24,875	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:49:25,800	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:49:25,801	[INFO]	236	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:49:25,801	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:49:25,802	[INFO]	237	SUCCESS	 4.0	
2020-12-10 04:49:26,736	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:49:27,646	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:49:28,632	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:49:29,564	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:49:30,514	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:49:31,474	[INFO]	243	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:49:32,409	[INFO]	244	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:49:35,218	[INFO]	245	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:49:36,144	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:49:38,989	[INFO]	247	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 04:49:39,913	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:49:40,824	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:49:40,826	[INFO]	250	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:49:41,742	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:49:42,694	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:49:43,613	[INFO]	253	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:49:44,546	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:49:47,408	[INFO]	255	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:49:48,328	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:49:49,274	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:49:50,195	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:49:51,152	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:49:52,076	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:49:52,995	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:49:53,942	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:49:54,800	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:49:55,714	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:49:56,640	[INFO]	265	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:49:59,461	[INFO]	266	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:50:02,378	[INFO]	267	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:50:03,271	[INFO]	268	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:50:04,196	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:50:05,133	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:50:06,083	[INFO]	271	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:50:07,049	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:50:09,936	[INFO]	273	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:50:10,820	[INFO]	274	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:50:11,746	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:50:14,633	[INFO]	276	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:50:14,634	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:50:17,529	[INFO]	277	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:50:17,530	[INFO]	278	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:50:17,531	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:18,423	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:50:18,425	[INFO]	280	SUCCESS	 4.0	
2020-12-10 04:50:21,260	[INFO]	281	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:50:22,189	[INFO]	282	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:50:23,127	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:50:24,064	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:50:24,991	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:50:25,920	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:50:25,924	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:50:25,926	[INFO]	288	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:50:25,927	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:50:25,929	[INFO]	289	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:50:26,853	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:50:26,855	[INFO]	291	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:50:26,855	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:26,856	[INFO]	292	SUCCESS	 4.0	
2020-12-10 04:50:27,772	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:50:28,749	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:50:29,686	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:50:30,639	[INFO]	296	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:50:31,571	[INFO]	297	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:50:32,467	[INFO]	298	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:50:32,468	[INFO]	299	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 04:50:33,405	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:50:34,342	[INFO]	301	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:50:35,444	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:50:36,690	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:50:37,985	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:50:39,306	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:50:40,437	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:50:41,568	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:50:44,880	[INFO]	308	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:50:44,881	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:50:44,883	[INFO]	309	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:50:44,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:44,884	[INFO]	310	SUCCESS	 4.0	
2020-12-10 04:50:45,873	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:50:46,801	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:50:47,704	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:50:48,641	[INFO]	314	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:50:49,576	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:50:50,562	[INFO]	316	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:50:50,564	[INFO]	317	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:50:50,564	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:50:50,565	[INFO]	318	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:50:50,566	[INFO]	319	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:50:50,566	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:50,567	[INFO]	320	SUCCESS	 4.0	
2020-12-10 04:50:51,476	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:50:52,430	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:50:53,275	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:50:56,173	[INFO]	324	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:50:56,174	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,26 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
!                     prefix_lengths.add(j);
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:57,098	[INFO]	325	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:50:57,101	[INFO]	326	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:50:57,102	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:50:58,036	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:50:58,038	[INFO]	328	SUCCESS	 4.0	
2020-12-10 04:50:58,991	[INFO]	329	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:50:59,868	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:51:02,749	[INFO]	331	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:51:02,751	[INFO]	332	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:51:02,752	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:02,753	[INFO]	333	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:02,753	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:03,681	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:51:06,542	[INFO]	335	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:51:06,543	[INFO]	336	SUCCESS	 4.0	
2020-12-10 04:51:07,473	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:51:08,390	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:51:09,317	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:51:10,262	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:51:11,214	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:51:12,152	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:51:13,063	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:51:15,914	[INFO]	344	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:51:15,915	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,32 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             ends.put(length+1, i);
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:51:15,916	[INFO]	345	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:15,916	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:15,917	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:51:16,827	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:51:17,739	[INFO]	348	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:51:18,709	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:51:19,673	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:51:19,675	[INFO]	351	SUCCESS	 4.0	
2020-12-10 04:51:20,541	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:51:21,478	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:51:22,466	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:51:23,418	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:51:26,304	[INFO]	356	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:51:26,306	[INFO]	357	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:51:26,306	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:27,101	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:51:27,102	[INFO]	359	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:27,102	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:27,103	[INFO]	360	SUCCESS	 4.0	
2020-12-10 04:51:27,974	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:51:28,912	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:51:29,831	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:51:30,777	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:51:30,780	[INFO]	365	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:51:30,781	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:30,783	[INFO]	366	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:30,784	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:30,786	[INFO]	367	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:51:30,787	[INFO]	368	SUCCESS	 4.0	
2020-12-10 04:51:30,789	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:51:31,729	[INFO]	370	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:51:32,665	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:51:33,633	[INFO]	372	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:51:33,636	[INFO]	373	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 04:51:33,637	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:36,471	[INFO]	374	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:51:36,472	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:51:37,394	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:51:38,341	[INFO]	376	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:51:41,241	[INFO]	377	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:51:41,243	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,35 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
+ 
+             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:51:42,178	[INFO]	378	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:51:43,109	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:51:44,029	[INFO]	380	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:51:44,034	[INFO]	381	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:51:44,036	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,35 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
+ 
+             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:51:44,038	[INFO]	382	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:51:44,040	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 04:51:45,001	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:51:45,004	[INFO]	384	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:45,005	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:45,006	[INFO]	385	SUCCESS	 4.0	
2020-12-10 04:51:45,940	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:51:46,870	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:51:47,793	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:51:48,753	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:51:49,710	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:51:50,663	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:51:51,587	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:51:52,508	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:51:53,488	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:51:56,328	[INFO]	395	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:51:56,329	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:51:57,250	[INFO]	396	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:51:57,254	[INFO]	397	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:51:57,255	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:51:57,257	[INFO]	398	SUCCESS	 4.0	
2020-12-10 04:51:58,176	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:51:59,081	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:52:00,010	[INFO]	401	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:52:00,954	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:52:03,870	[INFO]	403	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:52:04,785	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:52:05,699	[INFO]	405	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:52:06,647	[INFO]	406	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:52:06,650	[INFO]	407	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:52:07,584	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:52:08,485	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:52:09,416	[INFO]	410	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:52:10,371	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:52:11,309	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:52:14,163	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:52:15,078	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:52:16,009	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:52:16,013	[INFO]	416	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:52:16,014	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:52:16,015	[INFO]	417	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:52:18,924	[INFO]	418	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:52:18,925	[INFO]	419	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:52:18,925	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:52:18,926	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:52:18,927	[INFO]	421	SUCCESS	 4.0	
2020-12-10 04:52:19,867	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:52:20,803	[INFO]	423	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:52:21,737	[INFO]	424	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:52:24,593	[INFO]	425	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:52:25,549	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:52:26,474	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:52:27,381	[INFO]	428	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:52:28,342	[INFO]	429	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:52:31,108	[INFO]	430	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:52:31,966	[INFO]	431	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:52:32,896	[INFO]	432	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:52:35,763	[INFO]	433	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:52:36,666	[INFO]	434	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:52:39,601	[INFO]	435	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:52:40,482	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:52:43,362	[INFO]	437	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:52:44,281	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:52:45,197	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:52:48,050	[INFO]	440	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:52:48,051	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:52:48,978	[INFO]	441	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:52:51,897	[INFO]	442	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:52:52,814	[INFO]	443	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:52:53,751	[INFO]	444	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:52:53,753	[INFO]	445	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:52:53,753	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:52:54,691	[INFO]	446	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:52:55,663	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:52:55,665	[INFO]	448	SUCCESS	 4.0	
2020-12-10 04:52:56,591	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:52:59,475	[INFO]	450	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:52:59,476	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:53:00,399	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:53:00,401	[INFO]	452	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:53:00,402	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:00,403	[INFO]	453	SUCCESS	 4.0	
2020-12-10 04:53:00,405	[INFO]	454	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:53:03,237	[INFO]	455	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:53:03,238	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:53:06,023	[INFO]	456	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:53:06,930	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:53:07,872	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:53:07,875	[INFO]	459	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:53:07,876	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:08,860	[INFO]	460	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:53:09,838	[INFO]	461	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:53:12,695	[INFO]	462	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 04:53:12,696	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,32 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:53:12,696	[INFO]	463	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:53:12,697	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:13,616	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:53:16,473	[INFO]	465	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:53:16,474	[INFO]	466	SUCCESS	 4.0	
2020-12-10 04:53:19,349	[INFO]	467	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:53:19,350	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,32 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             ends.put(length+1, i);
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:53:19,351	[INFO]	468	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:53:19,351	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:19,352	[INFO]	469	SUCCESS	 4.0	
2020-12-10 04:53:20,229	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:53:21,162	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:53:22,068	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:53:23,018	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:53:23,948	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:53:26,874	[INFO]	475	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:53:27,725	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:53:30,629	[INFO]	477	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:53:30,630	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,27 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:31,549	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:53:32,479	[INFO]	479	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:53:35,334	[INFO]	480	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:53:38,140	[INFO]	481	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:38,141	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,30 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
- 
-             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 15,38 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:53:39,069	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:53:41,996	[INFO]	483	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:41,998	[INFO]	484	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:53:41,999	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,30 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
- 
-             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 15,38 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:53:42,870	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:53:42,872	[INFO]	486	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:42,873	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,30 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
- 
-             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 15,38 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:53:42,874	[INFO]	487	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:43,822	[INFO]	488	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:53:46,711	[INFO]	489	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:46,712	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 04:53:49,587	[INFO]	490	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:53:50,519	[INFO]	491	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:53:51,397	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:53:51,400	[INFO]	493	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:53:51,401	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:53:52,355	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:53:53,310	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:53:53,311	[INFO]	496	SUCCESS	 4.0	
2020-12-10 04:53:54,257	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:53:55,212	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:53:56,147	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:53:57,100	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:53:57,101	[INFO]	==== END ====
2020-12-10 04:53:57,101	[INFO]	Reason: step budget
2020-12-10 04:53:57,104	[INFO]	
2020-12-10 04:53:57,105	[INFO]	========== EPOCH 13 ==========
2020-12-10 04:53:57,106	[INFO]	==== WARMUP ====
2020-12-10 04:54:00,012	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:54:00,013	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:54:02,838	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:54:02,839	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:54:05,635	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:54:05,635	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:54:08,465	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:54:08,466	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:54:08,466	[INFO]	==== START ====
2020-12-10 04:54:09,337	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:54:10,292	[INFO]	2	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:54:11,217	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:54:12,251	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:54:13,155	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:54:15,950	[INFO]	6	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:54:15,952	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 04:54:15,953	[INFO]	7	SUCCESS	+4.0	
2020-12-10 04:54:15,953	[DEBUG]	
2020-12-10 04:54:16,875	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:54:19,852	[INFO]	9	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:54:19,853	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:20,727	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:54:20,732	[INFO]	11	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:54:20,733	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:21,697	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:54:21,700	[INFO]	13	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:54:21,702	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:22,581	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:54:23,409	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:54:23,411	[INFO]	16	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:54:23,411	[DEBUG]	
2020-12-10 04:54:23,412	[INFO]	17	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:54:23,412	[DEBUG]	
2020-12-10 04:54:23,413	[INFO]	18	SUCCESS	+4.0	
2020-12-10 04:54:23,413	[DEBUG]	
2020-12-10 04:54:26,257	[INFO]	19	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:54:26,258	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:29,082	[INFO]	20	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:54:29,083	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,42 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 04:54:29,084	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:54:29,085	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:31,920	[INFO]	22	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:54:31,921	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:31,923	[INFO]	23	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:54:31,924	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:32,850	[INFO]	24	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:54:33,794	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:54:34,706	[INFO]	26	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:54:35,657	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:54:36,586	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:54:36,587	[INFO]	29	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:54:36,588	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:37,546	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:54:38,486	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:54:39,411	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:54:39,416	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:54:39,420	[INFO]	34	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:54:39,421	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:39,423	[INFO]	35	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:54:39,425	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:40,336	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:54:41,266	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:54:41,268	[INFO]	38	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:54:41,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 32,41 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:42,201	[INFO]	39	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:54:45,050	[INFO]	40	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:54:45,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:45,055	[INFO]	41	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:54:45,057	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:54:45,058	[INFO]	42	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:54:45,059	[DEBUG]	
2020-12-10 04:54:45,061	[INFO]	43	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:54:45,061	[DEBUG]	
2020-12-10 04:54:47,951	[INFO]	44	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:54:47,952	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:54:47,953	[INFO]	45	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 04:54:47,953	[DEBUG]	
2020-12-10 04:54:47,954	[INFO]	46	SUCCESS	+4.0	
2020-12-10 04:54:47,954	[DEBUG]	
2020-12-10 04:54:48,876	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:54:49,818	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:54:49,822	[INFO]	49	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:54:49,823	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:54:49,825	[INFO]	50	SUCCESS	+4.0	
2020-12-10 04:54:49,825	[DEBUG]	
2020-12-10 04:54:52,931	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:54:52,932	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:54:52,933	[INFO]	52	SUCCESS	+4.0	
2020-12-10 04:54:52,933	[DEBUG]	
2020-12-10 04:54:55,782	[INFO]	53	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:54:55,783	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:54:55,784	[INFO]	54	SUCCESS	+4.0	
2020-12-10 04:54:55,784	[DEBUG]	
2020-12-10 04:54:56,703	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:54:57,616	[INFO]	56	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:54:58,541	[INFO]	57	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:54:59,454	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:55:00,365	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:55:01,315	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:55:02,248	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:55:03,196	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:55:06,030	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:55:06,032	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:55:06,872	[INFO]	64	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:55:07,774	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:55:08,709	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:55:08,710	[INFO]	67	SUCCESS	+4.0	
2020-12-10 04:55:08,710	[DEBUG]	
2020-12-10 04:55:11,614	[INFO]	68	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:55:11,615	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 04:55:12,520	[INFO]	69	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:55:13,458	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:55:14,405	[INFO]	71	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:55:14,406	[INFO]	72	SUCCESS	+4.0	
2020-12-10 04:55:14,406	[DEBUG]	
2020-12-10 04:55:15,366	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:55:16,283	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:55:17,231	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:55:18,168	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:55:19,070	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:55:19,072	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:55:20,018	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:55:22,868	[INFO]	80	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:55:22,869	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:55:22,870	[INFO]	81	SUCCESS	+4.0	
2020-12-10 04:55:22,870	[DEBUG]	
2020-12-10 04:55:23,788	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:55:24,707	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:55:27,596	[INFO]	84	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:55:27,597	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     i++;
                  }
              }
  

2020-12-10 04:55:28,546	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:55:28,548	[INFO]	86	SUCCESS	+4.0	
2020-12-10 04:55:28,548	[DEBUG]	
2020-12-10 04:55:29,462	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:55:30,403	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:55:31,330	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:55:32,269	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:55:33,182	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:55:34,115	[INFO]	92	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:55:35,143	[INFO]	93	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:55:35,145	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:55:35,145	[DEBUG]	
2020-12-10 04:55:36,145	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:55:36,149	[INFO]	96	SUCCESS	+4.0	
2020-12-10 04:55:36,150	[DEBUG]	
2020-12-10 04:55:37,090	[INFO]	97	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:55:37,091	[INFO]	98	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:55:37,092	[DEBUG]	
2020-12-10 04:55:37,092	[INFO]	99	SUCCESS	+4.0	
2020-12-10 04:55:37,093	[DEBUG]	
2020-12-10 04:55:38,079	[INFO]	100	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:55:39,017	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:55:39,973	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:55:40,923	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:55:41,852	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:55:44,758	[INFO]	105	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:55:44,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:55:45,705	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:55:45,707	[INFO]	107	SUCCESS	+4.0	
2020-12-10 04:55:45,708	[DEBUG]	
2020-12-10 04:55:46,625	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:55:47,603	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:55:48,535	[INFO]	110	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:55:49,492	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:55:50,420	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:55:51,345	[INFO]	113	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:55:52,302	[INFO]	114	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:55:53,221	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:55:54,134	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:55:55,017	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:55:57,918	[INFO]	118	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>='})
2020-12-10 04:55:57,918	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j >= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:56:00,758	[INFO]	119	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:56:00,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j >= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 04:56:00,760	[INFO]	120	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>='})
2020-12-10 04:56:00,760	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j >= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:56:00,760	[INFO]	121	SUCCESS	+4.0	
2020-12-10 04:56:00,761	[DEBUG]	
2020-12-10 04:56:01,625	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:56:01,626	[INFO]	123	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:56:01,627	[DEBUG]	
2020-12-10 04:56:01,627	[INFO]	124	SUCCESS	+4.0	
2020-12-10 04:56:01,627	[DEBUG]	
2020-12-10 04:56:02,554	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:56:03,467	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:56:04,418	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:56:05,349	[INFO]	128	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:56:08,300	[INFO]	129	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 04:56:08,301	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] == val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:56:08,302	[INFO]	130	SUCCESS	+4.0	
2020-12-10 04:56:08,302	[DEBUG]	
2020-12-10 04:56:08,303	[INFO]	131	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:56:08,303	[DEBUG]	
2020-12-10 04:56:08,304	[INFO]	132	SUCCESS	+4.0	
2020-12-10 04:56:08,304	[DEBUG]	
2020-12-10 04:56:11,081	[INFO]	133	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:56:11,082	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 04:56:11,082	[INFO]	==== END ====
2020-12-10 04:56:11,082	[INFO]	Reason: target fitness reached
2020-12-10 04:56:11,083	[INFO]	
2020-12-10 04:56:11,083	[INFO]	========== EPOCH 14 ==========
2020-12-10 04:56:11,083	[INFO]	==== WARMUP ====
2020-12-10 04:56:13,938	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:56:13,938	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:56:16,820	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:56:16,820	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:56:19,699	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 04:56:19,699	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:56:22,521	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 04:56:22,522	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 04:56:22,522	[INFO]	==== START ====
2020-12-10 04:56:22,523	[INFO]	1	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:56:22,523	[DEBUG]	
2020-12-10 04:56:23,386	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:56:24,316	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:56:24,317	[INFO]	4	SUCCESS	+4.0	
2020-12-10 04:56:24,318	[DEBUG]	
2020-12-10 04:56:27,117	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:56:27,118	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:56:28,038	[INFO]	6	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:56:28,040	[INFO]	7	SUCCESS	+4.0	
2020-12-10 04:56:28,041	[DEBUG]	
2020-12-10 04:56:29,009	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:56:29,927	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:56:30,869	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:56:31,779	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:56:32,728	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:56:33,690	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:56:34,630	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:56:35,543	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:56:36,500	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:56:37,428	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:56:38,384	[INFO]	18	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:56:39,317	[INFO]	19	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:56:40,261	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:56:41,226	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:56:42,128	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:56:44,978	[INFO]	23	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:56:44,979	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 04:56:44,980	[INFO]	24	SUCCESS	+4.0	
2020-12-10 04:56:44,980	[DEBUG]	
2020-12-10 04:56:45,890	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:56:46,715	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:56:47,633	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:56:50,535	[INFO]	28	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:56:50,536	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 04:56:50,537	[INFO]	29	SUCCESS	+4.0	
2020-12-10 04:56:50,537	[DEBUG]	
2020-12-10 04:56:51,461	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:56:52,377	[INFO]	31	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:56:53,320	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:56:53,324	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:56:54,253	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:56:55,161	[INFO]	35	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:56:56,099	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 04:56:59,134	[INFO]	37	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:56:59,135	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 04:56:59,980	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:56:59,981	[INFO]	39	SUCCESS	+4.0	
2020-12-10 04:56:59,981	[DEBUG]	
2020-12-10 04:57:00,912	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:57:01,830	[INFO]	41	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:57:04,744	[INFO]	42	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:57:04,745	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 04:57:07,644	[INFO]	43	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 04:57:07,645	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:57:10,465	[INFO]	44	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:57:10,466	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  
***************
*** 32,37 ****
--- 32,48 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 04:57:11,383	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:57:12,350	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:57:15,262	[INFO]	47	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:57:15,264	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 04:57:15,265	[INFO]	48	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:57:15,265	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 04:57:15,266	[INFO]	49	SUCCESS	+4.0	
2020-12-10 04:57:15,266	[DEBUG]	
2020-12-10 04:57:16,134	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:57:17,064	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:57:17,981	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:57:18,883	[INFO]	53	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:57:21,822	[INFO]	54	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:57:21,823	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:57:22,692	[INFO]	55	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:57:23,610	[INFO]	56	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 04:57:26,476	[INFO]	57	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:57:26,477	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,28 ****
--- 20,30 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:57:29,400	[INFO]	58	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:57:29,401	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 04:57:30,273	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:57:30,273	[INFO]	60	SUCCESS	+4.0	
2020-12-10 04:57:30,274	[DEBUG]	
2020-12-10 04:57:31,190	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 04:57:31,191	[INFO]	62	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:57:32,136	[INFO]	63	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:57:33,068	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:57:35,925	[INFO]	65	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:57:35,926	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 
              }
  
              i++;

2020-12-10 04:57:35,927	[INFO]	66	SUCCESS	+4.0	
2020-12-10 04:57:35,927	[DEBUG]	
2020-12-10 04:57:38,799	[INFO]	67	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:57:38,799	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 04:57:38,800	[INFO]	68	SUCCESS	+4.0	
2020-12-10 04:57:38,800	[DEBUG]	
2020-12-10 04:57:39,710	[INFO]	69	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:57:40,641	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:57:41,554	[INFO]	71	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 04:57:42,505	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:57:43,410	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:57:44,333	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:57:45,282	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:57:46,217	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:57:47,133	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:57:48,092	[INFO]	78	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:57:49,039	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 04:57:49,953	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:57:50,933	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:57:51,845	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:57:52,781	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:57:53,729	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:57:53,732	[INFO]	85	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:57:56,601	[INFO]	86	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:57:56,602	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 04:57:57,510	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:57:57,512	[INFO]	88	SUCCESS	+4.0	
2020-12-10 04:57:57,513	[DEBUG]	
2020-12-10 04:57:58,457	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:58:01,388	[INFO]	90	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:58:01,388	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 04:58:01,389	[INFO]	91	SUCCESS	+4.0	
2020-12-10 04:58:01,389	[DEBUG]	
2020-12-10 04:58:04,191	[INFO]	92	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:58:04,192	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:58:04,193	[INFO]	93	SUCCESS	+4.0	
2020-12-10 04:58:04,193	[DEBUG]	
2020-12-10 04:58:04,194	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:58:04,194	[DEBUG]	
2020-12-10 04:58:04,195	[INFO]	95	SUCCESS	+4.0	
2020-12-10 04:58:04,195	[DEBUG]	
2020-12-10 04:58:07,014	[INFO]	96	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:58:07,015	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 04:58:09,919	[INFO]	97	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:58:09,921	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,63 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 04:58:12,795	[INFO]	98	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 04:58:12,797	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:58:12,798	[INFO]	99	SUCCESS	+4.0	
2020-12-10 04:58:12,799	[DEBUG]	
2020-12-10 04:58:13,713	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:58:16,754	[INFO]	101	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:58:16,755	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 04:58:16,756	[INFO]	102	SUCCESS	+4.0	
2020-12-10 04:58:16,756	[DEBUG]	
2020-12-10 04:58:17,556	[INFO]	103	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:58:20,466	[INFO]	104	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 04:58:20,467	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:58:20,468	[INFO]	105	SUCCESS	+4.0	
2020-12-10 04:58:20,468	[DEBUG]	
2020-12-10 04:58:21,386	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:58:22,309	[INFO]	107	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:58:23,235	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:58:24,149	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:58:25,067	[INFO]	110	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:58:26,016	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:58:26,951	[INFO]	112	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:58:26,952	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:58:29,892	[INFO]	114	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:58:29,894	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 04:58:29,895	[INFO]	115	SUCCESS	+4.0	
2020-12-10 04:58:29,896	[DEBUG]	
2020-12-10 04:58:30,849	[INFO]	116	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:58:31,763	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 04:58:32,675	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:58:33,601	[INFO]	119	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 04:58:34,520	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:58:37,449	[INFO]	121	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:58:37,452	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  

2020-12-10 04:58:37,453	[INFO]	122	SUCCESS	+4.0	
2020-12-10 04:58:37,454	[DEBUG]	
2020-12-10 04:58:38,341	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 04:58:41,189	[INFO]	124	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 04:58:41,190	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:58:44,062	[INFO]	125	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 04:58:44,063	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length != longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:58:44,905	[INFO]	126	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:58:45,836	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:58:45,838	[INFO]	128	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 04:58:45,839	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length != longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 04:58:45,841	[INFO]	129	SUCCESS	+4.0	
2020-12-10 04:58:45,841	[DEBUG]	
2020-12-10 04:58:48,654	[INFO]	130	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 04:58:48,655	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 04:58:48,656	[INFO]	131	SUCCESS	+4.0	
2020-12-10 04:58:48,656	[DEBUG]	
2020-12-10 04:58:49,568	[INFO]	132	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:58:50,567	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:58:51,505	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 04:58:52,459	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 04:58:53,374	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 04:58:54,208	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 04:58:55,129	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 04:58:56,089	[INFO]	139	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:58:57,051	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 04:58:57,983	[INFO]	141	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:58:58,914	[INFO]	142	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:58:59,858	[INFO]	143	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 04:59:00,805	[INFO]	144	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:59:01,753	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:59:02,561	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:59:03,455	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:59:06,382	[INFO]	148	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 04:59:06,383	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:59:06,384	[INFO]	149	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:59:06,384	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 04:59:09,149	[INFO]	150	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 04:59:09,150	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,30 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:59:10,075	[INFO]	151	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:59:10,076	[INFO]	152	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:59:10,077	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,30 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 04:59:11,012	[INFO]	153	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:59:13,903	[INFO]	154	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:59:13,904	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] > val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:16,726	[INFO]	155	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:59:16,727	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:16,729	[INFO]	156	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 04:59:16,729	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:17,657	[INFO]	157	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:59:18,595	[INFO]	158	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:59:18,598	[INFO]	159	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:59:18,600	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:19,555	[INFO]	160	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:59:19,557	[INFO]	161	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:59:19,558	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:20,462	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:59:23,392	[INFO]	163	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:59:23,393	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:24,306	[INFO]	164	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:59:24,308	[INFO]	165	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:59:24,308	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:24,309	[INFO]	166	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 04:59:24,310	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:27,140	[INFO]	167	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:59:27,142	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 29,34 ****
--- 35,41 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:59:27,144	[INFO]	168	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:59:27,145	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 29,34 ****
--- 35,41 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:59:28,060	[INFO]	169	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 04:59:29,021	[INFO]	170	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 04:59:29,024	[INFO]	171	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:59:29,025	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 29,34 ****
--- 35,41 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 04:59:29,941	[INFO]	172	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 04:59:29,943	[INFO]	173	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 04:59:29,943	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 04:59:32,783	[INFO]	174	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:59:32,784	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 32,37 ****
--- 38,45 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:59:32,786	[INFO]	175	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:59:32,787	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
***************
*** 32,37 ****
--- 38,45 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:59:35,651	[INFO]	176	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 04:59:35,652	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:59:38,454	[INFO]	177	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 04:59:38,457	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 04:59:39,351	[INFO]	178	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 04:59:42,222	[INFO]	179	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 04:59:42,223	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 04:59:42,225	[INFO]	180	SUCCESS	+4.0	
2020-12-10 04:59:42,226	[DEBUG]	
2020-12-10 04:59:43,174	[INFO]	181	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 04:59:43,177	[INFO]	182	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 04:59:43,178	[DEBUG]	
2020-12-10 04:59:44,067	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 04:59:44,069	[INFO]	184	SUCCESS	+4.0	
2020-12-10 04:59:44,069	[DEBUG]	
2020-12-10 04:59:45,001	[INFO]	185	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:59:45,923	[INFO]	186	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:59:46,817	[INFO]	187	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:59:49,710	[INFO]	188	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 04:59:49,710	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 04:59:50,632	[INFO]	189	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 04:59:51,550	[INFO]	190	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 04:59:51,551	[INFO]	191	SUCCESS	+4.0	
2020-12-10 04:59:51,552	[DEBUG]	
2020-12-10 04:59:51,553	[INFO]	192	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='})
2020-12-10 04:59:51,553	[DEBUG]	
2020-12-10 04:59:52,474	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 04:59:53,353	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 04:59:54,280	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 04:59:55,216	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 04:59:55,217	[INFO]	197	SUCCESS	+4.0	
2020-12-10 04:59:55,217	[DEBUG]	
2020-12-10 04:59:56,147	[INFO]	198	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 04:59:57,083	[INFO]	199	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 04:59:58,040	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 04:59:58,991	[INFO]	201	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 04:59:58,994	[INFO]	202	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 04:59:59,959	[INFO]	203	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:00:00,903	[INFO]	204	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:00:01,812	[INFO]	205	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:00:02,749	[INFO]	206	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:00:02,752	[INFO]	207	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:00:02,752	[DEBUG]	
2020-12-10 05:00:02,753	[INFO]	208	SUCCESS	+4.0	
2020-12-10 05:00:02,754	[DEBUG]	
2020-12-10 05:00:03,671	[INFO]	209	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:00:04,592	[INFO]	210	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:00:07,725	[INFO]	211	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 05:00:07,725	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length != longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:00:07,726	[INFO]	212	SUCCESS	+4.0	
2020-12-10 05:00:07,726	[DEBUG]	
2020-12-10 05:00:10,637	[INFO]	213	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:00:10,639	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 05:00:13,541	[INFO]	214	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:00:13,542	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,35 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 05:00:14,401	[INFO]	215	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:00:17,252	[INFO]	216	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:00:17,253	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 05:00:18,198	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:00:19,096	[INFO]	218	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:00:19,098	[INFO]	219	SUCCESS	+4.0	
2020-12-10 05:00:19,098	[DEBUG]	
2020-12-10 05:00:20,151	[INFO]	220	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:00:21,058	[INFO]	221	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:00:21,976	[INFO]	222	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:00:24,905	[INFO]	223	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:00:24,906	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:00:24,906	[INFO]	224	SUCCESS	+4.0	
2020-12-10 05:00:24,907	[DEBUG]	
2020-12-10 05:00:25,797	[INFO]	225	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:00:28,749	[INFO]	226	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:00:28,750	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:00:31,485	[INFO]	227	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:00:31,486	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 29,35 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 05:00:34,319	[INFO]	228	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:00:34,320	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 28,34 ****
--- 29,39 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:00:35,378	[INFO]	229	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:00:36,356	[INFO]	230	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:00:36,358	[INFO]	231	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:00:36,358	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 29,35 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 05:00:36,359	[INFO]	232	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:00:36,360	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:00:36,361	[INFO]	233	SUCCESS	+4.0	
2020-12-10 05:00:36,361	[DEBUG]	
2020-12-10 05:00:37,268	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:00:40,129	[INFO]	235	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:00:40,131	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 05:00:40,132	[INFO]	236	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:00:40,132	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 05:00:40,133	[INFO]	237	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:00:40,133	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 05:00:41,055	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:00:41,057	[INFO]	239	SUCCESS	+4.0	
2020-12-10 05:00:41,058	[DEBUG]	
2020-12-10 05:00:41,061	[INFO]	240	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'})
2020-12-10 05:00:41,062	[DEBUG]	
2020-12-10 05:00:42,018	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:00:42,941	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:00:43,883	[INFO]	243	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:00:46,929	[INFO]	244	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:00:46,931	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 05:00:46,933	[INFO]	245	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:00:46,934	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,23 ****
--- 18,29 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);

2020-12-10 05:00:47,881	[INFO]	246	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:00:48,811	[INFO]	247	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:00:48,812	[INFO]	248	SUCCESS	+4.0	
2020-12-10 05:00:48,813	[DEBUG]	
2020-12-10 05:00:51,794	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:00:51,796	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:00:52,622	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:00:52,624	[INFO]	251	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:00:52,625	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:00:52,625	[INFO]	252	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:00:52,626	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:00:53,474	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:00:56,211	[INFO]	254	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:00:56,212	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!         i++;
          return longest;
      }
  }

2020-12-10 05:00:56,213	[INFO]	255	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:00:56,214	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:00:56,214	[INFO]	256	SUCCESS	+4.0	
2020-12-10 05:00:56,214	[DEBUG]	
2020-12-10 05:00:58,992	[INFO]	257	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:00:58,993	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:00:59,928	[INFO]	258	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:01:00,909	[INFO]	259	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:01:03,750	[INFO]	260	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:01:03,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,43 ----
                  longest = length + 1;
              }
  
!             longest = length + 1;
! 
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 05:01:03,752	[INFO]	261	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:01:03,753	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:01:03,753	[INFO]	262	SUCCESS	+4.0	
2020-12-10 05:01:03,754	[DEBUG]	
2020-12-10 05:01:04,678	[INFO]	263	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:01:05,587	[INFO]	264	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:01:06,540	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:01:07,485	[INFO]	266	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:01:10,316	[INFO]	267	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:01:10,317	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:01:11,257	[INFO]	268	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:01:12,190	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:01:13,105	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:01:13,106	[INFO]	271	SUCCESS	 4.0	
2020-12-10 05:01:15,955	[INFO]	272	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:01:16,881	[INFO]	273	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:01:19,751	[INFO]	274	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:01:19,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:01:20,665	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:01:23,536	[INFO]	276	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:01:24,532	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:01:24,535	[INFO]	278	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:01:24,536	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:01:25,490	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:01:26,453	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:01:26,456	[INFO]	281	SUCCESS	 4.0	
2020-12-10 05:01:27,405	[INFO]	282	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:01:30,344	[INFO]	283	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:01:33,209	[INFO]	284	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:01:33,210	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 05:01:33,210	[INFO]	285	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:01:33,211	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:01:33,212	[INFO]	286	SUCCESS	 4.0	
2020-12-10 05:01:36,055	[INFO]	287	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:01:37,013	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:01:38,061	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:01:38,980	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:01:39,939	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:01:40,913	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:01:41,835	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:01:44,697	[INFO]	294	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:01:44,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:01:44,699	[INFO]	295	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:01:44,699	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:01:44,700	[INFO]	296	SUCCESS	 4.0	
2020-12-10 05:01:47,564	[INFO]	297	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:01:48,487	[INFO]	298	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:01:49,440	[INFO]	299	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:01:50,468	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:01:51,420	[INFO]	301	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:01:52,532	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:01:52,534	[INFO]	303	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 05:01:53,504	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:01:54,576	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:01:55,597	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:01:56,563	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:01:56,565	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:01:57,526	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:02:00,459	[INFO]	310	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:02:00,460	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,32 ****
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 22,33 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:02:01,402	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:02:04,352	[INFO]	312	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:02:05,287	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:02:06,267	[INFO]	314	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:02:06,269	[INFO]	315	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:02:06,269	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:02:06,270	[INFO]	316	SUCCESS	 4.0	
2020-12-10 05:02:07,255	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:02:08,197	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:02:09,125	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:02:10,101	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:02:11,077	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:02:13,997	[INFO]	322	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:02:14,907	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:02:15,843	[INFO]	324	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:02:16,808	[INFO]	325	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:02:19,791	[INFO]	326	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:02:19,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,32 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 23,37 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:02:22,801	[INFO]	327	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:02:23,727	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:02:23,730	[INFO]	329	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:02:23,730	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:02:23,732	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:02:23,733	[INFO]	331	SUCCESS	 4.0	
2020-12-10 05:02:24,649	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:02:27,474	[INFO]	333	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:02:28,397	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:02:29,404	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:02:30,376	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:02:31,364	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:02:32,317	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:02:33,256	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:02:34,234	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:02:35,193	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:02:38,104	[INFO]	342	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:02:39,038	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:02:39,990	[INFO]	344	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:02:40,931	[INFO]	345	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:02:41,875	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:02:42,820	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:02:45,792	[INFO]	348	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:02:46,734	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:02:47,678	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:02:48,618	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:02:51,545	[INFO]	352	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:02:52,482	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:02:53,430	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:02:54,339	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:02:57,328	[INFO]	356	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:02:57,329	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,32 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 23,37 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:02:58,235	[INFO]	357	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:03:01,101	[INFO]	358	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 05:03:03,995	[INFO]	359	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:03:03,996	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,38 ****
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 23,44 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:03:04,941	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:03:07,832	[INFO]	361	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:03:07,834	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:03:08,759	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:03:11,770	[INFO]	363	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:03:13,400	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:03:13,404	[INFO]	365	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:03:15,254	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:03:15,261	[INFO]	367	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:03:15,261	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:15,263	[INFO]	368	SUCCESS	 4.0	
2020-12-10 05:03:17,207	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:03:18,523	[INFO]	370	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:03:19,917	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:03:20,940	[INFO]	372	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:03:24,462	[INFO]	373	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:03:25,692	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:03:28,726	[INFO]	375	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:03:28,727	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 27,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:28,728	[INFO]	376	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:03:28,729	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:31,597	[INFO]	377	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:03:31,598	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,38 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:03:31,599	[INFO]	378	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:03:31,599	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:31,600	[INFO]	379	SUCCESS	 4.0	
2020-12-10 05:03:32,548	[INFO]	380	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:03:35,616	[INFO]	381	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 05:03:36,535	[INFO]	382	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:03:36,537	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:03:37,700	[INFO]	384	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:03:40,844	[INFO]	385	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:03:43,750	[INFO]	386	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:03:43,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,32 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 20,35 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:46,662	[INFO]	387	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:03:46,663	[INFO]	388	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:03:46,663	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:03:46,664	[INFO]	389	SUCCESS	 4.0	
2020-12-10 05:03:49,497	[INFO]	390	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:03:50,385	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:03:51,326	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:03:52,243	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:03:53,149	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:03:56,312	[INFO]	395	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:03:57,254	[INFO]	396	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:03:58,108	[INFO]	397	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:03:59,029	[INFO]	398	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:03:59,977	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:04:00,905	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:04:01,833	[INFO]	401	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:04:02,765	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:04:03,702	[INFO]	403	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:04:04,634	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:04:07,612	[INFO]	405	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:04:07,613	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:04:10,381	[INFO]	406	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:04:11,314	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:04:11,317	[INFO]	408	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:04:11,318	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:04:12,247	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:04:13,186	[INFO]	410	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:04:13,189	[INFO]	411	SUCCESS	 4.0	
2020-12-10 05:04:14,127	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:04:15,034	[INFO]	413	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:04:15,995	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:04:18,893	[INFO]	415	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:04:19,769	[INFO]	416	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:04:22,695	[INFO]	417	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:04:22,697	[INFO]	418	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:04:22,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:04:22,699	[INFO]	419	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:04:23,592	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:04:23,595	[INFO]	421	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:04:23,596	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:04:23,597	[INFO]	422	SUCCESS	 4.0	
2020-12-10 05:04:24,539	[INFO]	423	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:04:25,462	[INFO]	424	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:04:26,404	[INFO]	425	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:04:27,343	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:04:28,293	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:04:29,248	[INFO]	428	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:04:30,155	[INFO]	429	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:04:31,006	[INFO]	430	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:04:31,936	[INFO]	431	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:04:32,873	[INFO]	432	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:04:35,808	[INFO]	433	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:04:36,673	[INFO]	434	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:04:37,581	[INFO]	435	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:04:38,562	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:04:39,495	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:04:40,407	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:04:41,323	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:04:42,284	[INFO]	440	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:04:43,219	[INFO]	441	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:04:44,151	[INFO]	442	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:04:45,093	[INFO]	443	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:04:47,992	[INFO]	444	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:04:48,895	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:04:48,897	[INFO]	446	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:04:49,846	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:04:52,725	[INFO]	448	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:04:53,634	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:04:54,579	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:04:55,518	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:04:56,452	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:04:59,482	[INFO]	453	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:04:59,483	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,34 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 05:05:02,272	[INFO]	454	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:05:02,276	[INFO]	455	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:05:03,216	[INFO]	456	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:05:04,165	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:05:05,189	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:05:08,103	[INFO]	459	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:05:08,104	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:05:08,105	[INFO]	460	SUCCESS	 4.0	
2020-12-10 05:05:08,988	[INFO]	461	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:05:09,967	[INFO]	462	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:05:10,913	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:05:11,844	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:05:12,853	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:05:13,713	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:05:14,639	[INFO]	467	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:05:15,587	[INFO]	468	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:05:16,502	[INFO]	469	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:05:17,460	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:05:18,427	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:05:21,291	[INFO]	472	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:05:22,206	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:05:25,047	[INFO]	474	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:05:25,942	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:05:26,890	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:05:27,871	[INFO]	477	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:05:28,818	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:05:29,783	[INFO]	479	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:05:30,729	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:05:31,638	[INFO]	481	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:05:32,585	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:05:33,514	[INFO]	483	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:05:34,461	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:05:35,528	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:05:36,478	[INFO]	486	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:05:37,434	[INFO]	487	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:05:37,435	[INFO]	488	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:05:38,416	[INFO]	489	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:05:41,297	[INFO]	490	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 05:05:42,200	[INFO]	491	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:05:43,143	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:05:44,086	[INFO]	493	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:05:46,889	[INFO]	494	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:05:49,701	[INFO]	495	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:05:50,653	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:05:51,567	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:05:52,438	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:05:53,356	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:05:54,315	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:05:54,316	[INFO]	==== END ====
2020-12-10 05:05:54,316	[INFO]	Reason: step budget
2020-12-10 05:05:54,319	[INFO]	
2020-12-10 05:05:54,319	[INFO]	========== EPOCH 15 ==========
2020-12-10 05:05:54,320	[INFO]	==== WARMUP ====
2020-12-10 05:05:57,159	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:05:57,159	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:06:00,016	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:06:00,016	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:06:02,910	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:06:02,910	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:06:05,697	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:06:05,698	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:06:05,698	[INFO]	==== START ====
2020-12-10 05:06:08,546	[INFO]	1	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:06:08,547	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:06:08,549	[INFO]	2	SUCCESS	+4.0	
2020-12-10 05:06:08,549	[DEBUG]	
2020-12-10 05:06:09,479	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:06:10,352	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:06:13,241	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:06:13,242	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:06:14,184	[INFO]	6	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:06:14,185	[INFO]	7	SUCCESS	+4.0	
2020-12-10 05:06:14,185	[DEBUG]	
2020-12-10 05:06:15,114	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:06:16,054	[INFO]	9	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:06:16,991	[INFO]	10	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:06:17,920	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:06:18,848	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:06:21,707	[INFO]	13	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:06:21,708	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     
                  }
              }
  

2020-12-10 05:06:21,708	[INFO]	14	SUCCESS	+4.0	
2020-12-10 05:06:21,709	[DEBUG]	
2020-12-10 05:06:22,613	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:06:23,597	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:06:24,521	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:06:27,390	[INFO]	18	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:06:27,390	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:06:27,391	[INFO]	19	SUCCESS	+4.0	
2020-12-10 05:06:27,391	[DEBUG]	
2020-12-10 05:06:28,310	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:06:31,189	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:06:31,190	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:06:32,084	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:06:32,085	[INFO]	23	SUCCESS	+4.0	
2020-12-10 05:06:32,086	[DEBUG]	
2020-12-10 05:06:35,006	[INFO]	24	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:06:35,008	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:06:35,010	[INFO]	25	SUCCESS	+4.0	
2020-12-10 05:06:35,010	[DEBUG]	
2020-12-10 05:06:35,917	[INFO]	26	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:06:36,825	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:06:39,661	[INFO]	28	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='})
2020-12-10 05:06:39,662	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j != longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:06:42,586	[INFO]	29	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:06:42,587	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j != longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:06:43,480	[INFO]	30	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:06:46,422	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:06:46,423	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:06:47,325	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:06:47,327	[INFO]	33	SUCCESS	+4.0	
2020-12-10 05:06:47,327	[DEBUG]	
2020-12-10 05:06:50,399	[INFO]	34	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:06:50,400	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:06:51,332	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:06:51,335	[INFO]	36	SUCCESS	+4.0	
2020-12-10 05:06:51,336	[DEBUG]	
2020-12-10 05:06:52,269	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:06:53,166	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:06:54,045	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:06:54,979	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:06:55,919	[INFO]	41	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:06:56,849	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:06:57,769	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:06:58,715	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:06:59,648	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:07:00,584	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:07:01,509	[INFO]	47	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:07:02,430	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:07:02,431	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:07:03,376	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:07:04,292	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:07:05,224	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:07:06,144	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:07:07,042	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:07:08,000	[INFO]	55	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:07:08,842	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:07:09,777	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:07:10,691	[INFO]	58	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:07:11,614	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:07:12,527	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:07:13,466	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:07:14,290	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:07:15,247	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:07:16,175	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:07:17,118	[INFO]	65	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:07:18,066	[INFO]	66	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:07:18,989	[INFO]	67	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:07:21,894	[INFO]	68	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:07:21,895	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:07:21,897	[INFO]	69	SUCCESS	+4.0	
2020-12-10 05:07:21,897	[DEBUG]	
2020-12-10 05:07:22,804	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:07:25,631	[INFO]	71	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:07:25,633	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:07:25,634	[INFO]	72	SUCCESS	+4.0	
2020-12-10 05:07:25,635	[DEBUG]	
2020-12-10 05:07:26,450	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:07:27,380	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:07:28,337	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:07:28,339	[INFO]	76	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:07:29,259	[INFO]	77	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:07:30,203	[INFO]	78	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:07:31,119	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:07:32,053	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:07:34,902	[INFO]	81	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:07:34,903	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:07:35,787	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:07:36,713	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:07:37,690	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:07:37,694	[INFO]	85	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:07:37,696	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:07:38,649	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:07:41,523	[INFO]	87	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:07:41,524	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 32,37 ****
--- 33,43 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:07:42,411	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:07:42,413	[INFO]	89	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:07:42,413	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  
***************
*** 32,37 ****
--- 33,43 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:07:42,414	[INFO]	90	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:07:42,415	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:07:43,348	[INFO]	91	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:07:43,350	[INFO]	92	SUCCESS	+4.0	
2020-12-10 05:07:43,351	[DEBUG]	
2020-12-10 05:07:46,240	[INFO]	93	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:07:46,242	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             return longest;
          }
          return longest;
      }

2020-12-10 05:07:46,244	[INFO]	94	SUCCESS	+4.0	
2020-12-10 05:07:46,245	[DEBUG]	
2020-12-10 05:07:47,151	[INFO]	95	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:07:50,010	[INFO]	96	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:07:50,011	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:07:52,979	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:07:52,980	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:07:52,982	[INFO]	98	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:07:52,982	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:07:52,983	[INFO]	99	SUCCESS	+4.0	
2020-12-10 05:07:52,984	[DEBUG]	
2020-12-10 05:07:55,840	[INFO]	100	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:07:55,841	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:07:56,719	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:07:56,720	[INFO]	102	SUCCESS	+4.0	
2020-12-10 05:07:56,720	[DEBUG]	
2020-12-10 05:07:57,656	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:07:58,588	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:08:01,594	[INFO]	105	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:08:01,595	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:08:01,595	[INFO]	106	SUCCESS	+4.0	
2020-12-10 05:08:01,596	[DEBUG]	
2020-12-10 05:08:02,453	[INFO]	107	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:08:05,332	[INFO]	108	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:08:05,333	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:08:06,242	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:08:06,243	[INFO]	110	SUCCESS	+4.0	
2020-12-10 05:08:06,243	[DEBUG]	
2020-12-10 05:08:07,149	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:08:08,115	[INFO]	112	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:08:09,022	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:08:09,023	[INFO]	114	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:08:09,954	[INFO]	115	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:08:10,917	[INFO]	116	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:08:11,826	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:08:12,760	[INFO]	118	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:08:13,696	[INFO]	119	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:08:14,629	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:08:15,557	[INFO]	121	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:08:16,490	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:08:17,425	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:08:20,292	[INFO]	124	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:08:20,293	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 05:08:21,184	[INFO]	125	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:08:24,220	[INFO]	126	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:08:24,221	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,58 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+                 i++;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:08:27,130	[INFO]	127	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:08:27,131	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 05:08:27,132	[INFO]	128	SUCCESS	+4.0	
2020-12-10 05:08:27,132	[DEBUG]	
2020-12-10 05:08:28,005	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:08:28,962	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:08:29,900	[INFO]	131	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:08:30,856	[INFO]	132	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:08:31,774	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:08:32,697	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:08:33,667	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:08:34,616	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:08:35,499	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:08:38,413	[INFO]	138	SUCCESS	*3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:08:38,414	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:08:39,307	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:08:40,353	[INFO]	140	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:08:40,356	[INFO]	141	SUCCESS	 4.0	
2020-12-10 05:08:43,236	[INFO]	142	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:08:46,146	[INFO]	143	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:08:46,147	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:08:48,963	[INFO]	144	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:08:48,965	[INFO]	145	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:08:48,966	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:08:48,967	[INFO]	146	SUCCESS	 4.0	
2020-12-10 05:08:49,887	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:08:50,838	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:08:51,757	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:08:52,657	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:08:55,504	[INFO]	151	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:08:56,294	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:08:57,219	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:08:58,150	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:08:59,074	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:09:02,000	[INFO]	156	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:09:02,001	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:09:04,834	[INFO]	157	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:09:04,835	[INFO]	158	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:09:04,836	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:09:05,742	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:09:05,744	[INFO]	160	SUCCESS	 4.0	
2020-12-10 05:09:08,609	[INFO]	161	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:09:08,609	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,26 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
--- 19,29 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 05:09:08,610	[INFO]	162	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:09:08,611	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:09:09,545	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:09:12,357	[INFO]	164	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:09:12,360	[INFO]	165	SUCCESS	 4.0	
2020-12-10 05:09:12,362	[INFO]	166	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:09:13,280	[INFO]	167	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:09:14,214	[INFO]	168	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:09:17,110	[INFO]	169	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:09:20,002	[INFO]	170	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:09:20,871	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:09:21,799	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:09:22,711	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:09:25,652	[INFO]	174	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 05:09:26,504	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:09:27,425	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:09:28,346	[INFO]	177	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:09:29,280	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:09:30,204	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:09:31,172	[INFO]	180	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:09:32,104	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:09:33,072	[INFO]	182	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:09:34,011	[INFO]	183	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:09:36,901	[INFO]	184	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:09:39,695	[INFO]	185	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:09:39,696	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:09:42,580	[INFO]	186	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:09:42,581	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,28 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
!                     if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 34,41 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:09:43,511	[INFO]	187	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:09:43,514	[INFO]	188	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:09:43,516	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:09:46,373	[INFO]	189	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:09:47,266	[INFO]	190	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:09:48,214	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:09:51,224	[INFO]	192	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:09:52,095	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:09:52,096	[INFO]	194	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:09:52,096	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:09:52,097	[INFO]	195	SUCCESS	 4.0	
2020-12-10 05:09:53,011	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:09:53,903	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:09:54,815	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:09:57,696	[INFO]	199	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:09:58,618	[INFO]	200	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:09:58,623	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:09:59,528	[INFO]	202	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:10:00,479	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:10:01,421	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:10:02,364	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:10:03,320	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:10:04,256	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:10:05,201	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:10:06,159	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:10:06,162	[INFO]	210	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:06,163	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:10:07,097	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:10:08,012	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:10:08,959	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:10:11,922	[INFO]	215	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:10:12,875	[INFO]	216	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:10:12,879	[INFO]	217	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:10:12,879	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:10:13,790	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:10:13,791	[INFO]	219	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:10:13,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:10:14,738	[INFO]	220	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:10:14,739	[INFO]	221	SUCCESS	 4.0	
2020-12-10 05:10:15,682	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:10:15,686	[INFO]	223	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:10:15,687	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:10:16,605	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:10:16,606	[INFO]	225	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:10:17,555	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:10:20,492	[INFO]	227	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:10:20,493	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,28 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:10:20,494	[INFO]	228	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:10:20,494	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:10:21,285	[INFO]	229	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:10:21,286	[INFO]	230	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:10:21,287	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:10:21,287	[INFO]	231	SUCCESS	 4.0	
2020-12-10 05:10:22,234	[INFO]	232	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:10:23,170	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:10:24,081	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:10:25,017	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:25,957	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:10:26,907	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:10:29,803	[INFO]	238	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:10:29,805	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:10:32,632	[INFO]	239	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:32,633	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:33,548	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:10:34,378	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:37,972	[INFO]	242	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:41,714	[INFO]	243	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:10:41,716	[INFO]	244	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:10:41,717	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:41,719	[INFO]	245	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:10:41,721	[INFO]	246	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:10:41,722	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:41,724	[INFO]	247	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:10:41,725	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:42,829	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:10:43,783	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:10:45,157	[INFO]	250	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:10:46,173	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:10:47,151	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:10:48,061	[INFO]	253	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:10:48,063	[INFO]	254	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:10:48,064	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:49,008	[INFO]	255	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:10:49,958	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:10:50,951	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:10:51,913	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:10:52,870	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:10:52,872	[INFO]	260	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:10:52,873	[INFO]	261	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:10:52,874	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:55,696	[INFO]	262	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 05:10:55,697	[INFO]	263	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:10:55,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:55,700	[INFO]	264	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:10:55,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:55,702	[INFO]	265	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:10:55,702	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:55,703	[INFO]	266	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:10:55,704	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:10:56,626	[INFO]	267	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:10:59,453	[INFO]	268	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:11:00,410	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:11:00,414	[INFO]	270	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:11:00,416	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:11:00,418	[INFO]	271	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:11:00,419	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:11:00,422	[INFO]	272	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:11:00,424	[INFO]	273	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:11:00,427	[INFO]	274	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:11:00,429	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:11:03,296	[INFO]	275	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:11:03,297	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:11:06,080	[INFO]	276	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:11:06,081	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 i++;
+                 longest = length + 1;
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:11:06,982	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:11:07,931	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:11:10,845	[INFO]	279	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:11:11,804	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:11:11,808	[INFO]	281	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:11:11,810	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:11:12,753	[INFO]	282	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:11:13,732	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:11:16,684	[INFO]	284	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:11:16,685	[INFO]	285	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:11:16,685	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:11:19,544	[INFO]	286	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:11:19,546	[INFO]	287	SUCCESS	 4.0	
2020-12-10 05:11:20,427	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:11:21,381	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:11:22,315	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:11:23,279	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:11:24,218	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:11:25,143	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:11:26,063	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:11:26,960	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:11:29,869	[INFO]	296	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:11:32,745	[INFO]	297	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:11:32,746	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,39 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              }
  
              i++;

2020-12-10 05:11:35,538	[INFO]	298	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:11:38,352	[INFO]	299	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:11:38,354	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,46 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:11:39,296	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:11:40,260	[INFO]	301	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:11:41,174	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:11:41,178	[INFO]	303	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 05:11:41,180	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,46 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:11:42,102	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:11:45,057	[INFO]	305	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 05:11:45,927	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:11:45,931	[INFO]	307	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'})
2020-12-10 05:11:45,933	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,39 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              }
  
              i++;

2020-12-10 05:11:46,847	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:11:47,776	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:11:47,778	[INFO]	310	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:11:47,778	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,39 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
              }
  
              i++;

2020-12-10 05:11:48,737	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:11:49,692	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:11:49,694	[INFO]	313	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:11:50,651	[INFO]	314	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:11:50,655	[INFO]	315	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:11:50,655	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:11:51,625	[INFO]	316	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:11:51,626	[INFO]	317	SUCCESS	 4.0	
2020-12-10 05:11:52,596	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:11:53,425	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:11:56,328	[INFO]	320	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:11:56,330	[INFO]	321	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:11:56,330	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:11:59,233	[INFO]	322	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:12:00,165	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:12:00,166	[INFO]	324	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:00,167	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:01,105	[INFO]	325	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:12:01,107	[INFO]	326	SUCCESS	 4.0	
2020-12-10 05:12:03,933	[INFO]	327	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:12:03,934	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,28 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
!                     if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:03,935	[INFO]	328	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:03,935	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:03,936	[INFO]	329	SUCCESS	 4.0	
2020-12-10 05:12:04,887	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:12:05,803	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:12:06,749	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:12:07,690	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:12:08,620	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:12:09,469	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:12:10,349	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:12:11,326	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:12:14,188	[INFO]	338	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:12:14,191	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,26 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:15,119	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:12:16,051	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:12:16,052	[INFO]	341	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:16,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:17,005	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:12:17,007	[INFO]	343	SUCCESS	 4.0	
2020-12-10 05:12:17,957	[INFO]	344	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:12:17,961	[INFO]	345	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:12:17,962	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:12:18,915	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:12:19,891	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:12:19,895	[INFO]	348	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:19,895	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:20,849	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:12:20,851	[INFO]	350	SUCCESS	 4.0	
2020-12-10 05:12:21,806	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:12:22,740	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:12:23,715	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:12:24,642	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:12:25,588	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:12:26,514	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:12:27,410	[INFO]	357	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:12:27,412	[INFO]	358	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:12:28,300	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:12:29,241	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:12:32,155	[INFO]	361	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:12:33,071	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:12:35,905	[INFO]	363	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:12:35,907	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,26 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
--- 19,29 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 05:12:36,804	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:12:37,752	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:12:38,673	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:12:38,676	[INFO]	367	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:38,678	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:41,551	[INFO]	368	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:12:42,453	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:12:42,454	[INFO]	370	SUCCESS	 4.0	
2020-12-10 05:12:43,375	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:12:44,276	[INFO]	372	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:12:47,100	[INFO]	373	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:12:47,101	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 05:12:49,996	[INFO]	374	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:12:49,997	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,35 ****
--- 29,38 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
+ 
+             i++;
  
              i++;
          }

2020-12-10 05:12:52,839	[INFO]	375	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:12:52,840	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:12:52,841	[INFO]	376	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:52,841	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:12:52,842	[INFO]	377	SUCCESS	 4.0	
2020-12-10 05:12:55,723	[INFO]	378	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:12:56,636	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:12:59,481	[INFO]	380	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:12:59,482	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 27,32 ****
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 i++;
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:12:59,483	[INFO]	381	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:12:59,484	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:13:00,428	[INFO]	382	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:13:01,270	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:13:01,271	[INFO]	384	SUCCESS	 4.0	
2020-12-10 05:13:02,220	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:13:03,130	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:13:04,050	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:13:05,015	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:13:05,947	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:13:06,935	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:13:07,826	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:13:08,763	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:13:09,705	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:13:10,643	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:13:13,492	[INFO]	395	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:13:14,393	[INFO]	396	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:13:15,302	[INFO]	397	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:13:16,255	[INFO]	398	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:13:16,260	[INFO]	399	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:13:16,261	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:13:16,263	[INFO]	400	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:13:16,264	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:13:16,265	[INFO]	401	SUCCESS	 4.0	
2020-12-10 05:13:17,188	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:13:18,113	[INFO]	403	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:13:18,115	[INFO]	404	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:13:18,115	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:13:18,117	[INFO]	405	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:13:18,118	[INFO]	406	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:13:19,076	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:13:19,997	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:13:19,998	[INFO]	409	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:13:19,999	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:13:22,951	[INFO]	410	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:13:23,855	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:13:23,856	[INFO]	412	SUCCESS	 4.0	
2020-12-10 05:13:24,798	[INFO]	413	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:13:25,716	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:13:28,608	[INFO]	415	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:13:28,609	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:13:31,419	[INFO]	416	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:13:31,420	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:13:31,420	[INFO]	==== END ====
2020-12-10 05:13:31,420	[INFO]	Reason: target fitness reached
2020-12-10 05:13:31,421	[INFO]	
2020-12-10 05:13:31,421	[INFO]	========== EPOCH 16 ==========
2020-12-10 05:13:31,422	[INFO]	==== WARMUP ====
2020-12-10 05:13:34,319	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:34,319	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:37,223	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:37,223	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:40,056	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:40,056	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:42,950	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:13:42,950	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:42,951	[INFO]	==== START ====
2020-12-10 05:13:45,748	[INFO]	1	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:13:45,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:13:45,751	[INFO]	==== END ====
2020-12-10 05:13:45,751	[INFO]	Reason: target fitness reached
2020-12-10 05:13:45,753	[INFO]	
2020-12-10 05:13:45,753	[INFO]	========== EPOCH 17 ==========
2020-12-10 05:13:45,754	[INFO]	==== WARMUP ====
2020-12-10 05:13:48,708	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:48,709	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:51,507	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:51,508	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:54,324	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:13:54,325	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:57,194	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:13:57,195	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:13:57,195	[INFO]	==== START ====
2020-12-10 05:13:58,078	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:13:59,096	[INFO]	2	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:14:00,062	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:14:02,888	[INFO]	4	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:14:02,889	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 05:14:05,788	[INFO]	5	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'})
2020-12-10 05:14:05,790	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length > longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
+ 
+             longest = length + 1;
  
              i++;
          }

2020-12-10 05:14:06,677	[INFO]	6	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:14:06,679	[INFO]	7	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:14:06,679	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length > longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
+ 
+             longest = length + 1;
  
              i++;
          }

2020-12-10 05:14:07,587	[INFO]	8	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:14:10,470	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:14:10,471	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length > longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:14:10,472	[INFO]	10	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:14:10,472	[DEBUG]	
2020-12-10 05:14:10,473	[INFO]	11	SUCCESS	+4.0	
2020-12-10 05:14:10,473	[DEBUG]	
2020-12-10 05:14:11,368	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:14:12,276	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:14:13,230	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:14:16,124	[INFO]	15	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:14:16,125	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:14:17,025	[INFO]	16	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:14:17,946	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:14:20,831	[INFO]	18	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:14:20,832	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:23,768	[INFO]	19	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:14:23,768	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:26,563	[INFO]	20	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:14:26,564	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,38 ****
--- 28,40 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:29,430	[INFO]	21	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:14:29,431	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,38 ****
--- 31,43 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:29,433	[INFO]	22	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:14:29,434	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,38 ****
--- 31,43 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:30,359	[INFO]	23	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:14:31,296	[INFO]	24	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:14:32,123	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:14:32,125	[INFO]	26	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:14:32,126	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,38 ****
--- 28,40 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:33,045	[INFO]	27	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:14:33,995	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:14:34,963	[INFO]	29	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:14:35,873	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:14:35,874	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:14:35,875	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,38 ****
--- 28,40 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:35,876	[INFO]	32	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:14:35,876	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:14:36,826	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:14:37,755	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:14:37,756	[INFO]	35	SUCCESS	+4.0	
2020-12-10 05:14:37,757	[DEBUG]	
2020-12-10 05:14:40,638	[INFO]	36	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:14:40,640	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 05:14:40,642	[INFO]	37	SUCCESS	+4.0	
2020-12-10 05:14:40,643	[DEBUG]	
2020-12-10 05:14:41,517	[INFO]	38	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:14:42,427	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:14:42,429	[INFO]	40	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:14:43,365	[INFO]	41	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:14:44,287	[INFO]	42	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:14:45,154	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:14:46,059	[INFO]	44	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:14:46,967	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:14:47,901	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:14:50,781	[INFO]	47	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:14:50,784	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:14:51,698	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:14:51,700	[INFO]	49	SUCCESS	+4.0	
2020-12-10 05:14:51,700	[DEBUG]	
2020-12-10 05:14:52,615	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:14:55,477	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:14:55,478	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 05:14:56,372	[INFO]	52	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:14:57,307	[INFO]	53	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:14:58,215	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:14:58,217	[INFO]	55	SUCCESS	+4.0	
2020-12-10 05:14:58,218	[DEBUG]	
2020-12-10 05:15:01,044	[INFO]	56	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:15:01,046	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:15:01,048	[INFO]	57	SUCCESS	+4.0	
2020-12-10 05:15:01,049	[DEBUG]	
2020-12-10 05:15:03,784	[INFO]	58	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:15:03,785	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:03,786	[INFO]	59	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:15:03,787	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:04,613	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:15:04,615	[INFO]	61	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:15:04,616	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:04,617	[INFO]	62	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:04,618	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:04,619	[INFO]	63	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:04,620	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:05,544	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:05,545	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:15:05,546	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:05,547	[INFO]	66	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:05,548	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:05,549	[INFO]	67	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:15:05,549	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:06,494	[INFO]	68	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:15:06,495	[INFO]	69	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:06,496	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:06,497	[INFO]	70	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:06,498	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:06,499	[INFO]	71	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:06,499	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:07,439	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:07,441	[INFO]	73	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:07,442	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:08,364	[INFO]	74	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:09,193	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:15:09,196	[INFO]	76	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:15:09,197	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:15:09,199	[INFO]	77	SUCCESS	+4.0	
2020-12-10 05:15:09,200	[DEBUG]	
2020-12-10 05:15:10,145	[INFO]	78	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:15:11,090	[INFO]	79	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:15:11,986	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:15:12,943	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:15:13,857	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:15:14,784	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:15:17,699	[INFO]	84	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:15:17,700	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:15:17,701	[INFO]	85	SUCCESS	+4.0	
2020-12-10 05:15:17,701	[DEBUG]	
2020-12-10 05:15:18,603	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:15:19,506	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:15:20,448	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:15:21,378	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:15:22,317	[INFO]	90	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:15:23,253	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:15:26,114	[INFO]	92	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 05:15:26,116	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:15:26,117	[INFO]	93	SUCCESS	+4.0	
2020-12-10 05:15:26,118	[DEBUG]	
2020-12-10 05:15:26,120	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:15:26,121	[DEBUG]	
2020-12-10 05:15:26,123	[INFO]	95	SUCCESS	+4.0	
2020-12-10 05:15:26,123	[DEBUG]	
2020-12-10 05:15:27,067	[INFO]	96	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:15:30,039	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:15:30,041	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 ends.put(length+1, i);
              }
  
              i++;

2020-12-10 05:15:30,044	[INFO]	98	SUCCESS	+4.0	
2020-12-10 05:15:30,044	[DEBUG]	
2020-12-10 05:15:30,949	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:15:31,862	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:15:34,790	[INFO]	101	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:15:34,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:15:35,920	[INFO]	102	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:15:36,843	[INFO]	103	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:15:36,845	[INFO]	104	SUCCESS	+4.0	
2020-12-10 05:15:36,845	[DEBUG]	
2020-12-10 05:15:37,868	[INFO]	105	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:15:38,822	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:15:41,755	[INFO]	107	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:15:41,756	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 05:15:42,647	[INFO]	108	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:15:43,585	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:15:43,586	[INFO]	110	SUCCESS	+4.0	
2020-12-10 05:15:43,586	[DEBUG]	
2020-12-10 05:15:44,537	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:15:44,541	[INFO]	112	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:15:44,541	[DEBUG]	
2020-12-10 05:15:45,467	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:15:46,404	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:15:46,405	[INFO]	115	SUCCESS	+4.0	
2020-12-10 05:15:46,405	[DEBUG]	
2020-12-10 05:15:49,304	[INFO]	116	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:49,305	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     prefix_lengths.add(j);
                  }
              }
  

2020-12-10 05:15:50,187	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:15:51,153	[INFO]	118	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:15:52,087	[INFO]	119	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:15:53,036	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:15:53,037	[INFO]	121	SUCCESS	+4.0	
2020-12-10 05:15:53,037	[DEBUG]	
2020-12-10 05:15:53,947	[INFO]	122	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:15:54,897	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:15:57,752	[INFO]	124	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:15:57,753	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  }
              }
  
+             i++;
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 05:15:58,657	[INFO]	125	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:15:58,659	[INFO]	126	SUCCESS	+4.0	
2020-12-10 05:15:58,659	[DEBUG]	
2020-12-10 05:15:59,590	[INFO]	127	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:16:00,535	[INFO]	128	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:16:01,466	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:16:02,392	[INFO]	130	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:16:05,282	[INFO]	131	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:16:05,283	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  }
              }
  

2020-12-10 05:16:05,284	[INFO]	132	SUCCESS	+4.0	
2020-12-10 05:16:05,284	[DEBUG]	
2020-12-10 05:16:05,286	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:16:06,202	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:16:07,143	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:16:08,092	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:16:09,015	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:16:09,889	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:16:10,806	[INFO]	139	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:16:11,758	[INFO]	140	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:16:12,708	[INFO]	141	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:16:15,540	[INFO]	142	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:16:15,541	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:16:16,449	[INFO]	143	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:16:17,385	[INFO]	144	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:16:17,388	[INFO]	145	SUCCESS	+4.0	
2020-12-10 05:16:17,388	[DEBUG]	
2020-12-10 05:16:20,249	[INFO]	146	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:16:20,250	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  }
              }
  
+             i++;
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 05:16:23,139	[INFO]	147	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:16:23,141	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  }
              }
  
+             i++;
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
***************
*** 33,38 ****
--- 35,41 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 05:16:24,049	[INFO]	148	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:16:24,051	[INFO]	149	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:16:24,051	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  }
              }
  
+             i++;
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 05:16:24,052	[INFO]	150	SUCCESS	+4.0	
2020-12-10 05:16:24,052	[DEBUG]	
2020-12-10 05:16:24,959	[INFO]	151	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:16:25,887	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:16:26,834	[INFO]	153	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:16:27,766	[INFO]	154	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:16:28,733	[INFO]	155	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:16:29,687	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:16:30,609	[INFO]	157	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:16:31,556	[INFO]	158	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:16:32,513	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:16:33,427	[INFO]	160	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:16:34,351	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:16:37,182	[INFO]	162	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:16:37,183	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:16:38,102	[INFO]	163	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:16:39,026	[INFO]	164	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:16:39,028	[INFO]	165	SUCCESS	+4.0	
2020-12-10 05:16:39,029	[DEBUG]	
2020-12-10 05:16:41,868	[INFO]	166	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:16:41,869	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:16:41,869	[INFO]	167	SUCCESS	+4.0	
2020-12-10 05:16:41,870	[DEBUG]	
2020-12-10 05:16:44,747	[INFO]	168	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:16:44,748	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:16:47,644	[INFO]	169	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:16:47,645	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 32,37 ****
--- 33,40 ----
              }
  
              i++;
+ 
+             longest = length + 1;
          }
          return longest;
      }

2020-12-10 05:16:50,469	[INFO]	170	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:16:50,470	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             longest = length + 1;
          }
          return longest;
      }

2020-12-10 05:16:50,470	[INFO]	171	SUCCESS	+4.0	
2020-12-10 05:16:50,471	[DEBUG]	
2020-12-10 05:16:51,387	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:16:52,329	[INFO]	173	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:16:53,299	[INFO]	174	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:16:54,242	[INFO]	175	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:16:55,156	[INFO]	176	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:16:56,094	[INFO]	177	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:16:57,035	[INFO]	178	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:16:57,966	[INFO]	179	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:16:58,900	[INFO]	180	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:16:59,844	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:17:00,795	[INFO]	182	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:17:01,746	[INFO]	183	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:17:02,784	[INFO]	184	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:17:03,751	[INFO]	185	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:17:06,644	[INFO]	186	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:17:06,645	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 05:17:07,545	[INFO]	187	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:17:08,477	[INFO]	188	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:17:08,479	[INFO]	189	SUCCESS	+4.0	
2020-12-10 05:17:08,479	[DEBUG]	
2020-12-10 05:17:09,402	[INFO]	190	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:17:10,322	[INFO]	191	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:17:11,304	[INFO]	192	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:17:12,227	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:17:15,049	[INFO]	194	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:17:15,050	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:17:17,931	[INFO]	195	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:17:17,932	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,30 ****
--- 22,37 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:17:20,824	[INFO]	196	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:17:20,825	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:17:20,825	[INFO]	197	SUCCESS	+4.0	
2020-12-10 05:17:20,826	[DEBUG]	
2020-12-10 05:17:21,750	[INFO]	198	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:17:22,693	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:17:23,627	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:17:24,572	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:17:25,480	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:17:28,378	[INFO]	203	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='})
2020-12-10 05:17:28,379	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val != arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:17:29,233	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:17:30,196	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:17:31,141	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:17:31,142	[INFO]	207	SUCCESS	+4.0	
2020-12-10 05:17:31,143	[DEBUG]	
2020-12-10 05:17:32,033	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:17:34,887	[INFO]	209	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:17:34,888	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:17:34,888	[INFO]	210	SUCCESS	+4.0	
2020-12-10 05:17:34,889	[DEBUG]	
2020-12-10 05:17:35,780	[INFO]	211	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:17:36,701	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:17:37,640	[INFO]	213	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:17:38,490	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:17:39,398	[INFO]	215	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:17:40,337	[INFO]	216	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:17:43,315	[INFO]	217	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:17:43,316	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:17:44,214	[INFO]	218	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:17:45,183	[INFO]	219	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:17:45,184	[INFO]	220	SUCCESS	+4.0	
2020-12-10 05:17:45,184	[DEBUG]	
2020-12-10 05:17:46,125	[INFO]	221	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:17:47,057	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:17:48,025	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:17:48,937	[INFO]	224	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:17:49,795	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:17:52,597	[INFO]	226	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:17:52,598	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:17:52,599	[INFO]	227	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:17:52,599	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:17:52,600	[INFO]	228	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:17:52,601	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:17:52,602	[INFO]	229	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:17:52,603	[INFO]	230	SUCCESS	+4.0	
2020-12-10 05:17:52,603	[DEBUG]	
2020-12-10 05:17:53,525	[INFO]	231	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:17:54,463	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:17:54,464	[INFO]	233	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:17:55,564	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:17:56,814	[INFO]	235	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:17:58,327	[INFO]	236	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:17:59,547	[INFO]	237	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:18:00,696	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:18:01,945	[INFO]	239	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:18:02,948	[INFO]	240	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:18:05,917	[INFO]	241	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:18:05,917	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:18:06,824	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:18:09,668	[INFO]	243	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:18:09,670	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,43 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:18:09,672	[INFO]	244	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:18:09,673	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:18:09,674	[INFO]	245	SUCCESS	+4.0	
2020-12-10 05:18:09,675	[DEBUG]	
2020-12-10 05:18:10,702	[INFO]	246	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:18:11,644	[INFO]	247	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:18:11,646	[INFO]	248	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:18:11,646	[DEBUG]	
2020-12-10 05:18:14,601	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 05:18:14,602	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:18:14,603	[INFO]	250	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '>='})
2020-12-10 05:18:14,603	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length >= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:18:14,604	[INFO]	251	SUCCESS	+4.0	
2020-12-10 05:18:14,604	[DEBUG]	
2020-12-10 05:18:15,473	[INFO]	252	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:18:16,402	[INFO]	253	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:18:17,338	[INFO]	254	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:18:18,267	[INFO]	255	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:18:19,218	[INFO]	256	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:18:20,157	[INFO]	257	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:18:21,074	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:18:22,014	[INFO]	259	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:18:22,015	[INFO]	260	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:18:22,016	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:18:22,947	[INFO]	261	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:18:22,949	[INFO]	262	SUCCESS	+4.0	
2020-12-10 05:18:22,949	[DEBUG]	
2020-12-10 05:18:23,904	[INFO]	263	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:18:24,960	[INFO]	264	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:18:25,905	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:18:26,823	[INFO]	266	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:18:27,728	[INFO]	267	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:18:28,683	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:18:29,631	[INFO]	269	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:18:32,476	[INFO]	270	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:18:32,477	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 05:18:33,388	[INFO]	271	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:18:33,389	[INFO]	272	SUCCESS	+4.0	
2020-12-10 05:18:33,389	[DEBUG]	
2020-12-10 05:18:36,245	[INFO]	273	SUCCESS	*1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:18:36,246	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:18:36,247	[INFO]	274	SUCCESS	 4.0	
2020-12-10 05:18:37,150	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:18:40,009	[INFO]	276	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '!='})
2020-12-10 05:18:42,820	[INFO]	277	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:18:43,717	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:18:44,648	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:18:45,588	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:18:46,517	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:18:46,519	[INFO]	282	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:18:46,519	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:18:46,520	[INFO]	283	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:18:46,521	[INFO]	284	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:18:46,521	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:18:47,361	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:18:48,297	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:18:49,227	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:18:49,228	[INFO]	288	SUCCESS	 4.0	
2020-12-10 05:18:50,160	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:18:51,119	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:18:54,019	[INFO]	291	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:18:54,881	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:18:57,756	[INFO]	293	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '=='})
2020-12-10 05:19:00,650	[INFO]	294	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:19:01,544	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:19:02,489	[INFO]	296	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:19:03,457	[INFO]	297	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:19:04,375	[INFO]	298	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:19:05,280	[INFO]	299	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:19:06,202	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:19:06,204	[INFO]	301	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:19:06,204	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:06,205	[INFO]	302	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:19:07,129	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:19:07,132	[INFO]	304	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:19:07,133	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:08,057	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:19:08,058	[INFO]	306	SUCCESS	 4.0	
2020-12-10 05:19:08,966	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:19:09,882	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:19:10,827	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:19:11,785	[INFO]	310	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:19:12,720	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:19:13,648	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:19:16,682	[INFO]	313	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:19:19,650	[INFO]	314	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:19:20,482	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:19:21,407	[INFO]	316	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:19:22,354	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:19:23,309	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:19:26,112	[INFO]	319	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:19:29,063	[INFO]	320	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:19:29,961	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:19:30,861	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:19:31,770	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:19:31,772	[INFO]	324	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:19:31,772	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:31,773	[INFO]	325	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:19:31,773	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:31,774	[INFO]	326	SUCCESS	 4.0	
2020-12-10 05:19:32,743	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:19:35,576	[INFO]	328	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:19:35,577	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:38,355	[INFO]	329	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:19:38,357	[INFO]	330	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:19:38,357	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,32 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 21,35 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:41,278	[INFO]	331	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:19:42,162	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:19:44,994	[INFO]	333	SUCCESS	 4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:19:45,883	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:19:46,826	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:19:47,756	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:19:47,758	[INFO]	337	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:19:47,758	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:47,759	[INFO]	338	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:19:47,759	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:19:47,760	[INFO]	339	SUCCESS	 4.0	
2020-12-10 05:19:48,697	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:19:49,654	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:19:50,635	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:19:51,573	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:19:52,504	[INFO]	344	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:19:53,421	[INFO]	345	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:19:54,346	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:19:55,257	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:19:56,203	[INFO]	348	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:19:57,048	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:19:57,951	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:19:58,909	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:19:59,847	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:20:00,713	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:20:01,626	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:20:04,493	[INFO]	355	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:20:04,494	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:20:07,258	[INFO]	356	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:20:08,182	[INFO]	357	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:20:09,217	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:20:10,225	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:20:10,228	[INFO]	360	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:20:10,228	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:20:13,067	[INFO]	361	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:20:15,944	[INFO]	362	SUCCESS	+1.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:20:15,945	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:20:16,854	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:20:19,769	[INFO]	364	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:20:22,606	[INFO]	365	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:20:23,527	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:20:26,364	[INFO]	367	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:20:29,236	[INFO]	368	SUCCESS	*0.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:20:29,237	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:20:29,237	[INFO]	==== END ====
2020-12-10 05:20:29,237	[INFO]	Reason: target fitness reached
2020-12-10 05:20:29,238	[INFO]	
2020-12-10 05:20:29,238	[INFO]	========== EPOCH 18 ==========
2020-12-10 05:20:29,238	[INFO]	==== WARMUP ====
2020-12-10 05:20:32,066	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:20:32,067	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:20:34,892	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:20:34,893	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:20:38,633	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:20:38,633	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:20:41,521	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:20:41,522	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:20:41,522	[INFO]	==== START ====
2020-12-10 05:20:42,443	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:20:43,460	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:20:44,420	[INFO]	3	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:20:45,360	[INFO]	4	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:20:46,299	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:20:47,232	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:20:48,140	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:20:51,039	[INFO]	8	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:20:51,040	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 05:20:51,944	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:20:51,945	[INFO]	10	SUCCESS	+4.0	
2020-12-10 05:20:51,945	[DEBUG]	
2020-12-10 05:20:52,896	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:20:53,829	[INFO]	12	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:20:54,777	[INFO]	13	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:20:55,702	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:20:56,632	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:20:59,618	[INFO]	16	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:20:59,619	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:21:00,504	[INFO]	17	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:21:00,507	[INFO]	18	SUCCESS	+4.0	
2020-12-10 05:21:00,508	[DEBUG]	
2020-12-10 05:21:01,483	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:21:04,332	[INFO]	20	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:21:04,333	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 05:21:04,334	[INFO]	21	SUCCESS	+4.0	
2020-12-10 05:21:04,334	[DEBUG]	
2020-12-10 05:21:05,229	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:21:06,173	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:21:08,990	[INFO]	24	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 05:21:08,990	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:21:08,991	[INFO]	25	SUCCESS	+4.0	
2020-12-10 05:21:08,991	[DEBUG]	
2020-12-10 05:21:11,702	[INFO]	26	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:21:11,703	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:21:11,704	[INFO]	27	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:21:11,704	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:21:12,615	[INFO]	28	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:21:12,618	[INFO]	29	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:21:12,619	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         
          return longest;
      }
  }

2020-12-10 05:21:12,621	[INFO]	30	SUCCESS	+4.0	
2020-12-10 05:21:12,622	[DEBUG]	
2020-12-10 05:21:15,442	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:21:15,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:21:18,303	[INFO]	32	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 05:21:18,304	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,28 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:21:19,216	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:21:20,156	[INFO]	34	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:21:23,015	[INFO]	35	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:21:23,017	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,28 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 31,36 ****
--- 32,43 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:21:23,941	[INFO]	36	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:21:24,897	[INFO]	37	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:21:27,750	[INFO]	38	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 05:21:27,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,27 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 18,28 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 31,36 ****
--- 32,43 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:21:30,585	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 05:21:30,586	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,25 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 31,36 ****
--- 31,42 ----
                  longest = length + 1;
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:21:33,480	[INFO]	40	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 05:21:33,481	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,25 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 18,25 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:21:33,482	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '=='})
2020-12-10 05:21:33,482	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j == longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:21:33,482	[INFO]	42	SUCCESS	+4.0	
2020-12-10 05:21:33,483	[DEBUG]	
2020-12-10 05:21:34,407	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:21:34,410	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:21:35,337	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:21:36,261	[INFO]	46	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:21:37,203	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:21:38,135	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:21:39,070	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:21:41,921	[INFO]	50	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:21:41,922	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:21:44,661	[INFO]	51	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:21:44,661	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:44,662	[INFO]	52	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:21:44,663	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:45,468	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:21:45,472	[INFO]	54	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:21:45,473	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:45,475	[INFO]	55	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:21:45,477	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:45,479	[INFO]	56	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:21:45,480	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:45,482	[INFO]	57	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:21:45,483	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:46,300	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:21:47,191	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:21:48,068	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:21:48,071	[INFO]	61	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:21:48,072	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:48,075	[INFO]	62	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:21:48,076	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:48,078	[INFO]	63	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:48,080	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:48,969	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:48,971	[INFO]	65	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:48,971	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:49,908	[INFO]	66	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:49,912	[INFO]	67	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:49,913	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:49,915	[INFO]	68	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:21:49,917	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:49,920	[INFO]	69	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:21:49,921	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:50,839	[INFO]	70	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:21:50,843	[INFO]	71	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:21:50,844	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:51,789	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:21:51,790	[INFO]	73	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:21:51,791	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:51,792	[INFO]	74	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:21:51,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:51,793	[INFO]	75	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:21:51,794	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:52,686	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:21:52,688	[INFO]	77	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:52,688	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:52,689	[INFO]	78	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:52,690	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:52,691	[INFO]	79	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:52,691	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:53,601	[INFO]	80	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:54,407	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:21:54,408	[INFO]	82	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:21:54,409	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:55,232	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:21:55,233	[INFO]	84	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:21:55,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:55,235	[INFO]	85	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:21:55,236	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:56,174	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:21:56,993	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:21:57,849	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:21:57,851	[INFO]	89	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:21:57,852	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:57,853	[INFO]	90	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:21:57,853	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:58,669	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:21:58,670	[INFO]	92	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:21:58,671	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:21:58,671	[INFO]	93	SUCCESS	+4.0	
2020-12-10 05:21:58,672	[DEBUG]	
2020-12-10 05:21:59,585	[INFO]	94	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:22:00,508	[INFO]	95	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:22:01,420	[INFO]	96	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:22:04,270	[INFO]	97	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:22:04,271	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:22:04,272	[INFO]	98	SUCCESS	+4.0	
2020-12-10 05:22:04,272	[DEBUG]	
2020-12-10 05:22:05,213	[INFO]	99	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:22:06,133	[INFO]	100	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:22:08,971	[INFO]	101	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:22:08,972	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,41 ----
                  longest = length + 1;
              }
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
          }
          return longest;
      }

2020-12-10 05:22:09,883	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:22:09,885	[INFO]	103	SUCCESS	+4.0	
2020-12-10 05:22:09,886	[DEBUG]	
2020-12-10 05:22:10,810	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:22:11,739	[INFO]	105	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:22:11,743	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:22:14,690	[INFO]	107	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:22:14,691	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  

2020-12-10 05:22:14,691	[INFO]	108	SUCCESS	+4.0	
2020-12-10 05:22:14,692	[DEBUG]	
2020-12-10 05:22:15,589	[INFO]	109	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:22:16,515	[INFO]	110	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:22:17,431	[INFO]	111	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:22:18,346	[INFO]	112	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:22:19,321	[INFO]	113	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:22:20,269	[INFO]	114	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:22:21,181	[INFO]	115	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:22:22,129	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:22:24,961	[INFO]	117	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 05:22:24,962	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:22:25,887	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:22:26,788	[INFO]	119	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:22:27,683	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:22:28,639	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:22:31,628	[INFO]	122	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:22:31,629	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,38 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
  }
--- 26,39 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:22:31,630	[INFO]	123	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 05:22:31,630	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:22:34,416	[INFO]	124	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:22:34,417	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,37 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
--- 26,42 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:35,360	[INFO]	125	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:22:38,213	[INFO]	126	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:22:38,215	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 21,37 ****
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
--- 21,43 ----
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:39,128	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:22:39,132	[INFO]	128	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:22:39,133	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,37 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
          }
          return longest;
      }
--- 26,42 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:42,052	[INFO]	129	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:22:42,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:42,937	[INFO]	130	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:22:45,790	[INFO]	131	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='})
2020-12-10 05:22:45,791	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j != longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:45,792	[INFO]	132	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:22:45,792	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,42 ----
              }
  
              i++;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
          }
          return longest;
      }

2020-12-10 05:22:45,793	[INFO]	133	SUCCESS	+4.0	
2020-12-10 05:22:45,793	[DEBUG]	
2020-12-10 05:22:48,669	[INFO]	134	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:22:48,670	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 05:22:48,671	[INFO]	135	SUCCESS	+4.0	
2020-12-10 05:22:48,671	[DEBUG]	
2020-12-10 05:22:49,606	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:22:50,553	[INFO]	137	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:22:53,587	[INFO]	138	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:22:53,590	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:22:53,591	[INFO]	139	SUCCESS	+4.0	
2020-12-10 05:22:53,592	[DEBUG]	
2020-12-10 05:22:56,362	[INFO]	140	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 05:22:56,363	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j <= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:22:57,278	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:22:57,279	[INFO]	142	SUCCESS	+4.0	
2020-12-10 05:22:57,280	[DEBUG]	
2020-12-10 05:22:57,281	[INFO]	143	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:22:57,281	[DEBUG]	
2020-12-10 05:22:57,282	[INFO]	144	SUCCESS	+4.0	
2020-12-10 05:22:57,282	[DEBUG]	
2020-12-10 05:23:00,124	[INFO]	145	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:23:00,125	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
              }
  
              i++;

2020-12-10 05:23:01,071	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:23:01,074	[INFO]	147	SUCCESS	+4.0	
2020-12-10 05:23:01,074	[DEBUG]	
2020-12-10 05:23:03,893	[INFO]	148	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:23:03,895	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:23:03,898	[INFO]	149	SUCCESS	+4.0	
2020-12-10 05:23:03,898	[DEBUG]	
2020-12-10 05:23:04,775	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:23:05,720	[INFO]	151	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:06,664	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:23:07,614	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:23:08,470	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:23:08,472	[INFO]	155	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:23:08,472	[INFO]	156	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:23:08,473	[DEBUG]	
2020-12-10 05:23:08,473	[INFO]	157	SUCCESS	+4.0	
2020-12-10 05:23:08,473	[DEBUG]	
2020-12-10 05:23:09,393	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:23:10,316	[INFO]	159	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:23:11,272	[INFO]	160	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:23:12,245	[INFO]	161	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:13,157	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:23:16,024	[INFO]	163	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:23:16,027	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 05:23:16,028	[INFO]	164	SUCCESS	+4.0	
2020-12-10 05:23:16,029	[DEBUG]	
2020-12-10 05:23:16,934	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:23:17,873	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:23:18,829	[INFO]	167	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:19,773	[INFO]	168	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:23:20,698	[INFO]	169	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:23:23,593	[INFO]	170	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:23:23,595	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
+                 }
                  }
              }
  

2020-12-10 05:23:23,595	[INFO]	171	SUCCESS	+4.0	
2020-12-10 05:23:23,596	[DEBUG]	
2020-12-10 05:23:26,526	[INFO]	172	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:23:26,527	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 05:23:26,528	[INFO]	173	SUCCESS	+4.0	
2020-12-10 05:23:26,528	[DEBUG]	
2020-12-10 05:23:27,423	[INFO]	174	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:23:28,345	[INFO]	175	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:23:29,277	[INFO]	176	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:23:30,202	[INFO]	177	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:23:31,140	[INFO]	178	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:23:32,095	[INFO]	179	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:23:35,083	[INFO]	180	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:23:35,084	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 05:23:35,085	[INFO]	181	SUCCESS	+4.0	
2020-12-10 05:23:35,085	[DEBUG]	
2020-12-10 05:23:35,965	[INFO]	182	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:23:36,877	[INFO]	183	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:23:37,825	[INFO]	184	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:23:38,762	[INFO]	185	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:23:41,613	[INFO]	186	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:23:41,614	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:44,512	[INFO]	187	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:23:44,513	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:44,515	[INFO]	188	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:23:44,515	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:45,417	[INFO]	189	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:23:45,419	[INFO]	190	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:23:45,420	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:45,421	[INFO]	191	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:23:45,422	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:45,423	[INFO]	192	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:23:45,423	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:46,339	[INFO]	193	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:23:47,283	[INFO]	194	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:23:48,103	[INFO]	195	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:23:49,057	[INFO]	196	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:50,014	[INFO]	197	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:23:50,016	[INFO]	198	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:23:50,016	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,33 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 18,34 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:23:50,916	[INFO]	199	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:23:53,881	[INFO]	200	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:53,883	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,58 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:23:53,886	[INFO]	201	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:53,888	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,58 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:23:54,784	[INFO]	202	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:23:57,667	[INFO]	203	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:23:57,669	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,53 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             i++;
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:24:00,586	[INFO]	204	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:24:00,587	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,55 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 prefix_lengths.add(j);
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:24:01,540	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:24:01,544	[INFO]	206	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:24:01,545	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
+ 
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 33,38 ****
--- 34,55 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 prefix_lengths.add(j);
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:24:02,492	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:24:03,454	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:24:06,337	[INFO]	209	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:24:06,338	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,39 ----
          int longest = 0;
  
          int i = 0;
+ 
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 05:24:07,275	[INFO]	210	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:24:08,221	[INFO]	211	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:24:08,222	[INFO]	212	SUCCESS	+4.0	
2020-12-10 05:24:08,223	[DEBUG]	
2020-12-10 05:24:09,151	[INFO]	213	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:24:10,093	[INFO]	214	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:24:11,060	[INFO]	215	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:24:13,945	[INFO]	216	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:24:13,947	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:14,856	[INFO]	217	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:24:14,857	[INFO]	218	SUCCESS	+4.0	
2020-12-10 05:24:14,857	[DEBUG]	
2020-12-10 05:24:15,774	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:24:16,723	[INFO]	220	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:24:17,689	[INFO]	221	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:24:18,639	[INFO]	222	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:24:19,626	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:24:20,554	[INFO]	224	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:24:23,455	[INFO]	225	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:24:23,457	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,40 ----
                  longest = length + 1;
              }
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
          }
          return longest;
      }

2020-12-10 05:24:24,330	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:24:25,283	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:24:25,286	[INFO]	228	SUCCESS	+4.0	
2020-12-10 05:24:25,287	[DEBUG]	
2020-12-10 05:24:26,093	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:24:26,095	[INFO]	230	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:24:27,065	[INFO]	231	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:24:28,029	[INFO]	232	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:24:28,971	[INFO]	233	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:24:31,936	[INFO]	234	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:24:31,937	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             
  
              i++;
          }

2020-12-10 05:24:31,938	[INFO]	235	SUCCESS	+4.0	
2020-12-10 05:24:31,938	[DEBUG]	
2020-12-10 05:24:32,810	[INFO]	236	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:24:33,693	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:24:34,634	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:24:34,637	[INFO]	239	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:24:34,638	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:37,558	[INFO]	240	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:24:37,559	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }
***************
*** 28,33 ****
--- 29,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:37,560	[INFO]	241	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:24:37,560	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:37,561	[INFO]	242	SUCCESS	+4.0	
2020-12-10 05:24:37,561	[DEBUG]	
2020-12-10 05:24:38,425	[INFO]	243	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:24:39,351	[INFO]	244	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:24:40,292	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:24:41,194	[INFO]	246	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:24:42,160	[INFO]	247	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:24:43,066	[INFO]	248	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:24:44,047	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:24:44,977	[INFO]	250	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:24:45,902	[INFO]	251	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:24:46,846	[INFO]	252	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:24:46,847	[INFO]	253	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:24:47,770	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:24:50,706	[INFO]	255	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:24:50,707	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 ends.put(length+1, i);
                  longest = length + 1;
              }
  

2020-12-10 05:24:51,577	[INFO]	256	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:24:51,578	[INFO]	257	SUCCESS	+4.0	
2020-12-10 05:24:51,579	[DEBUG]	
2020-12-10 05:24:51,580	[INFO]	258	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:24:51,580	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:51,581	[INFO]	259	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:24:51,581	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:54,441	[INFO]	260	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 05:24:54,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,33 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:24:57,261	[INFO]	261	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:24:57,262	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,33 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 19,35 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:25:00,210	[INFO]	262	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:25:00,211	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,30 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:25:00,212	[INFO]	263	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:25:00,212	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,32 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 19,30 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:25:01,104	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:25:04,026	[INFO]	265	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 05:25:04,028	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:25:06,934	[INFO]	266	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:25:06,935	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,36 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val < arr[ends.get(length+1)]) {
!                 if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:25:09,828	[INFO]	267	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:25:09,830	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:25:09,831	[INFO]	268	SUCCESS	+4.0	
2020-12-10 05:25:09,831	[DEBUG]	
2020-12-10 05:25:10,746	[INFO]	269	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:25:13,609	[INFO]	270	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:25:13,610	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:25:14,540	[INFO]	271	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:25:14,543	[INFO]	272	SUCCESS	+4.0	
2020-12-10 05:25:14,544	[DEBUG]	
2020-12-10 05:25:15,471	[INFO]	273	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:25:16,412	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:25:17,356	[INFO]	275	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:25:20,243	[INFO]	276	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:25:20,244	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:25:23,081	[INFO]	277	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 05:25:23,082	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:25:24,018	[INFO]	278	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:25:26,954	[INFO]	279	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:25:26,956	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
--- 19,42 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] <= val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:25:27,861	[INFO]	280	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:25:27,863	[INFO]	281	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 05:25:27,864	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:25:30,746	[INFO]	282	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:25:30,747	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,30 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
- 
-             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 18,32 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:25:30,748	[INFO]	283	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='})
2020-12-10 05:25:30,749	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,30 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
--- 19,36 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] <= val) {
                      prefix_lengths.add(j);
                  }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);

2020-12-10 05:25:31,660	[INFO]	284	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:25:31,661	[INFO]	285	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:25:31,662	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:25:31,662	[INFO]	286	SUCCESS	+4.0	
2020-12-10 05:25:31,663	[DEBUG]	
2020-12-10 05:25:32,631	[INFO]	287	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:25:33,563	[INFO]	288	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:25:36,581	[INFO]	289	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:25:36,582	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 i++;
              }
  
              i++;

2020-12-10 05:25:37,496	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:25:37,497	[INFO]	291	SUCCESS	+4.0	
2020-12-10 05:25:37,498	[DEBUG]	
2020-12-10 05:25:38,441	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:25:39,447	[INFO]	293	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:25:40,385	[INFO]	294	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:25:41,306	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:25:42,236	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:25:45,138	[INFO]	297	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:25:45,139	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 24,29 ****
--- 24,35 ----
                  }
              }
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {

2020-12-10 05:25:45,139	[INFO]	298	SUCCESS	+4.0	
2020-12-10 05:25:45,140	[DEBUG]	
2020-12-10 05:25:46,037	[INFO]	299	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:25:46,989	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:25:49,887	[INFO]	301	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:25:49,889	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             ends.put(length+1, i);
  
              i++;
          }

2020-12-10 05:25:49,890	[INFO]	302	SUCCESS	+4.0	
2020-12-10 05:25:49,891	[DEBUG]	
2020-12-10 05:25:50,826	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:25:51,772	[INFO]	304	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:25:52,703	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:25:53,651	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:25:56,498	[INFO]	307	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:25:56,499	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:25:56,500	[INFO]	308	SUCCESS	+4.0	
2020-12-10 05:25:56,501	[DEBUG]	
2020-12-10 05:25:59,394	[INFO]	309	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:25:59,395	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:26:02,219	[INFO]	310	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:26:02,220	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,37 ****
--- 26,41 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
+ 
+             longest = length + 1;
          }
          return longest;
      }

2020-12-10 05:26:03,147	[INFO]	311	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:26:04,078	[INFO]	312	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:26:04,079	[INFO]	313	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:26:04,080	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:26:04,080	[INFO]	314	SUCCESS	+4.0	
2020-12-10 05:26:04,081	[DEBUG]	
2020-12-10 05:26:05,027	[INFO]	315	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:26:06,019	[INFO]	316	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:26:07,287	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:26:08,267	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:26:11,257	[INFO]	319	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='})
2020-12-10 05:26:11,257	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j != longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:26:12,177	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '!='}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:26:12,179	[INFO]	321	SUCCESS	+4.0	
2020-12-10 05:26:12,180	[DEBUG]	
2020-12-10 05:26:15,092	[INFO]	322	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:26:15,093	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:26:16,122	[INFO]	323	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:26:16,127	[INFO]	324	SUCCESS	+4.0	
2020-12-10 05:26:16,128	[DEBUG]	
2020-12-10 05:26:16,132	[INFO]	325	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '<'})
2020-12-10 05:26:16,133	[DEBUG]	
2020-12-10 05:26:16,136	[INFO]	326	SUCCESS	+4.0	
2020-12-10 05:26:16,137	[DEBUG]	
2020-12-10 05:26:19,023	[INFO]	327	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '!='})
2020-12-10 05:26:19,024	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] != val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:26:19,024	[INFO]	328	SUCCESS	+4.0	
2020-12-10 05:26:19,025	[DEBUG]	
2020-12-10 05:26:19,955	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:26:22,806	[INFO]	330	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:26:22,808	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,29 ----
                      prefix_lengths.add(j);
                  }
              }
+             i++;
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 05:26:22,810	[INFO]	331	SUCCESS	+4.0	
2020-12-10 05:26:22,810	[DEBUG]	
2020-12-10 05:26:23,784	[INFO]	332	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:26:24,765	[INFO]	333	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:26:25,732	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:26:26,700	[INFO]	335	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:26:29,676	[INFO]	336	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:26:29,677	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 prefix_lengths.add(j);
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:26:29,678	[INFO]	337	SUCCESS	+4.0	
2020-12-10 05:26:29,678	[DEBUG]	
2020-12-10 05:26:30,548	[INFO]	338	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:26:33,372	[INFO]	339	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:26:33,373	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             i++;
  
              i++;
          }

2020-12-10 05:26:34,316	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:26:35,257	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:26:35,259	[INFO]	342	SUCCESS	+4.0	
2020-12-10 05:26:35,260	[DEBUG]	
2020-12-10 05:26:38,275	[INFO]	343	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:26:38,276	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             longest = length + 1;
+ 
              i++;
          }
          return longest;

2020-12-10 05:26:38,276	[INFO]	344	SUCCESS	+4.0	
2020-12-10 05:26:38,277	[DEBUG]	
2020-12-10 05:26:39,183	[INFO]	345	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:26:40,104	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:26:40,106	[INFO]	347	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:26:40,106	[DEBUG]	
2020-12-10 05:26:41,032	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:26:41,945	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:26:42,821	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:26:42,822	[INFO]	351	SUCCESS	+4.0	
2020-12-10 05:26:42,822	[DEBUG]	
2020-12-10 05:26:43,750	[INFO]	352	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:26:44,694	[INFO]	353	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:26:45,644	[INFO]	354	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:26:46,587	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:26:47,522	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:26:50,455	[INFO]	357	SUCCESS	*0.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:26:50,456	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:26:50,456	[INFO]	==== END ====
2020-12-10 05:26:50,456	[INFO]	Reason: target fitness reached
2020-12-10 05:26:50,457	[INFO]	
2020-12-10 05:26:50,457	[INFO]	========== EPOCH 19 ==========
2020-12-10 05:26:50,457	[INFO]	==== WARMUP ====
2020-12-10 05:26:53,292	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:26:53,292	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:26:56,445	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:26:56,445	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:26:59,306	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:26:59,307	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:27:02,160	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:27:02,160	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:27:02,160	[INFO]	==== START ====
2020-12-10 05:27:03,067	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:27:04,005	[INFO]	2	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:27:04,876	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:27:07,759	[INFO]	4	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:27:07,760	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,43 ----
              }
  
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:27:08,666	[INFO]	5	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:27:08,667	[INFO]	6	SUCCESS	+4.0	
2020-12-10 05:27:08,668	[DEBUG]	
2020-12-10 05:27:09,626	[INFO]	7	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:27:10,476	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:27:11,425	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:27:12,354	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:27:13,286	[INFO]	11	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:27:16,096	[INFO]	12	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:27:16,097	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     i++;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:27:16,097	[INFO]	13	SUCCESS	+4.0	
2020-12-10 05:27:16,098	[DEBUG]	
2020-12-10 05:27:16,998	[INFO]	14	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:27:17,931	[INFO]	15	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:27:20,904	[INFO]	16	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:27:20,906	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  longest = length + 1;
              }
  
+             ends.put(length+1, i);
+ 
              i++;
          }
          return longest;

2020-12-10 05:27:20,907	[INFO]	17	SUCCESS	+4.0	
2020-12-10 05:27:20,907	[DEBUG]	
2020-12-10 05:27:23,795	[INFO]	18	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:27:23,795	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:27:24,683	[INFO]	19	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:27:25,617	[INFO]	20	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:27:26,581	[INFO]	21	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:27:27,500	[INFO]	22	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:27:28,484	[INFO]	23	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:27:28,487	[INFO]	24	SUCCESS	+4.0	
2020-12-10 05:27:28,488	[DEBUG]	
2020-12-10 05:27:29,412	[INFO]	25	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:27:32,303	[INFO]	26	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:27:32,304	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:27:32,304	[INFO]	27	SUCCESS	+4.0	
2020-12-10 05:27:32,305	[DEBUG]	
2020-12-10 05:27:32,305	[INFO]	28	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:27:32,306	[DEBUG]	
2020-12-10 05:27:32,306	[INFO]	29	SUCCESS	+4.0	
2020-12-10 05:27:32,307	[DEBUG]	
2020-12-10 05:27:33,212	[INFO]	30	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:27:36,060	[INFO]	31	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:27:36,061	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:27:36,994	[INFO]	32	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:27:37,935	[INFO]	33	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:27:37,936	[INFO]	34	SUCCESS	+4.0	
2020-12-10 05:27:37,936	[DEBUG]	
2020-12-10 05:27:38,894	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:27:41,747	[INFO]	36	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:27:41,748	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 05:27:41,749	[INFO]	37	SUCCESS	+4.0	
2020-12-10 05:27:41,749	[DEBUG]	
2020-12-10 05:27:42,667	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:27:43,610	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:27:46,543	[INFO]	40	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:27:46,546	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             i++;
          }
          return longest;
      }

2020-12-10 05:27:46,547	[INFO]	41	SUCCESS	+4.0	
2020-12-10 05:27:46,548	[DEBUG]	
2020-12-10 05:27:49,341	[INFO]	42	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:27:49,343	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
                  longest = length + 1;
              }
  

2020-12-10 05:27:50,298	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:27:50,299	[INFO]	44	SUCCESS	+4.0	
2020-12-10 05:27:50,300	[DEBUG]	
2020-12-10 05:27:51,280	[INFO]	45	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:27:54,150	[INFO]	46	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:27:54,151	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             
          }
          return longest;
      }

2020-12-10 05:27:54,151	[INFO]	47	SUCCESS	+4.0	
2020-12-10 05:27:54,152	[DEBUG]	
2020-12-10 05:27:55,065	[INFO]	48	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:27:55,995	[INFO]	49	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:27:56,936	[INFO]	50	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:27:57,916	[INFO]	51	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:28:00,801	[INFO]	52	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:28:00,802	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:28:00,803	[INFO]	53	SUCCESS	+4.0	
2020-12-10 05:28:00,804	[DEBUG]	
2020-12-10 05:28:01,734	[INFO]	54	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:28:02,673	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:28:05,531	[INFO]	56	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:28:05,532	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:28:06,449	[INFO]	57	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:28:06,452	[INFO]	58	SUCCESS	+4.0	
2020-12-10 05:28:06,453	[DEBUG]	
2020-12-10 05:28:07,394	[INFO]	59	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:28:08,338	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:28:09,260	[INFO]	61	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:28:10,234	[INFO]	62	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:28:13,159	[INFO]	63	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:28:13,160	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:28:14,095	[INFO]	64	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:28:15,002	[INFO]	65	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:28:15,949	[INFO]	66	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:28:18,815	[INFO]	67	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:28:18,816	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
***************
*** 28,33 ****
--- 30,39 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:28:18,817	[INFO]	68	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:28:18,817	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:28:18,818	[INFO]	69	SUCCESS	+4.0	
2020-12-10 05:28:18,818	[DEBUG]	
2020-12-10 05:28:21,641	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 05:28:21,641	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j > longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:28:21,642	[INFO]	71	SUCCESS	+4.0	
2020-12-10 05:28:21,643	[DEBUG]	
2020-12-10 05:28:22,560	[INFO]	72	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:28:23,512	[INFO]	73	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:28:26,399	[INFO]	74	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:28:26,400	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             return longest;
          }
          return longest;
      }

2020-12-10 05:28:27,340	[INFO]	75	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:28:27,343	[INFO]	76	SUCCESS	+4.0	
2020-12-10 05:28:27,344	[DEBUG]	
2020-12-10 05:28:28,308	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:28:29,145	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:28:31,998	[INFO]	79	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:28:31,999	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:28:32,000	[INFO]	80	SUCCESS	+4.0	
2020-12-10 05:28:32,000	[DEBUG]	
2020-12-10 05:28:32,931	[INFO]	81	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:28:33,830	[INFO]	82	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:28:34,775	[INFO]	83	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:28:35,714	[INFO]	84	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:28:36,559	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:28:37,490	[INFO]	86	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:28:38,444	[INFO]	87	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:28:39,372	[INFO]	88	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:28:40,313	[INFO]	89	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:28:40,316	[INFO]	90	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:28:40,317	[DEBUG]	
2020-12-10 05:28:40,317	[INFO]	91	SUCCESS	+4.0	
2020-12-10 05:28:40,318	[DEBUG]	
2020-12-10 05:28:43,231	[INFO]	92	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:28:43,231	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,37 ****
                  longest = length + 1;
              }
  
!             i++;
          }
          return longest;
      }
--- 31,37 ----
                  longest = length + 1;
              }
  
!             ends.put(length+1, i);
          }
          return longest;
      }

2020-12-10 05:28:43,232	[INFO]	93	SUCCESS	+4.0	
2020-12-10 05:28:43,232	[DEBUG]	
2020-12-10 05:28:43,233	[INFO]	94	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:28:43,234	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:28:44,120	[INFO]	95	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:28:44,122	[INFO]	96	SUCCESS	+4.0	
2020-12-10 05:28:44,122	[DEBUG]	
2020-12-10 05:28:47,050	[INFO]	97	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:28:47,051	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 longest = length + 1;
                  longest = length + 1;
              }
  

2020-12-10 05:28:47,922	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:28:48,852	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:28:48,854	[INFO]	100	SUCCESS	+4.0	
2020-12-10 05:28:48,854	[DEBUG]	
2020-12-10 05:28:49,793	[INFO]	101	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:28:52,671	[INFO]	102	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:28:52,672	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 05:28:52,673	[INFO]	103	SUCCESS	+4.0	
2020-12-10 05:28:52,673	[DEBUG]	
2020-12-10 05:28:53,574	[INFO]	104	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:28:54,487	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:28:55,401	[INFO]	106	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:28:56,364	[INFO]	107	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:28:59,479	[INFO]	108	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:28:59,479	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 32,37 ****
--- 32,39 ----
              }
  
              i++;
+ 
+             return longest;
          }
          return longest;
      }

2020-12-10 05:28:59,480	[INFO]	109	SUCCESS	+4.0	
2020-12-10 05:28:59,480	[DEBUG]	
2020-12-10 05:29:02,403	[INFO]	110	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:29:02,405	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 05:29:03,310	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:29:03,312	[INFO]	112	SUCCESS	+4.0	
2020-12-10 05:29:03,313	[DEBUG]	
2020-12-10 05:29:06,185	[INFO]	113	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '!='})
2020-12-10 05:29:06,186	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length != longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:29:06,187	[INFO]	114	SUCCESS	+4.0	
2020-12-10 05:29:06,187	[DEBUG]	
2020-12-10 05:29:09,011	[INFO]	115	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:29:09,012	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,28 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 05:29:09,012	[INFO]	116	SUCCESS	+4.0	
2020-12-10 05:29:09,013	[DEBUG]	
2020-12-10 05:29:09,900	[INFO]	117	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:29:10,836	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:29:11,760	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:29:12,697	[INFO]	120	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:29:13,643	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:29:14,565	[INFO]	122	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:29:15,531	[INFO]	123	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:29:16,440	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:29:16,441	[INFO]	125	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:29:16,442	[DEBUG]	
2020-12-10 05:29:17,305	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:29:17,306	[INFO]	127	SUCCESS	+4.0	
2020-12-10 05:29:17,306	[DEBUG]	
2020-12-10 05:29:20,233	[INFO]	128	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:29:20,233	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 
              }
  
              i++;

2020-12-10 05:29:21,136	[INFO]	129	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:29:22,046	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 15)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:29:22,047	[INFO]	131	SUCCESS	+4.0	
2020-12-10 05:29:22,047	[DEBUG]	
2020-12-10 05:29:22,982	[INFO]	132	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:29:24,053	[INFO]	133	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:29:24,969	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:29:25,931	[INFO]	135	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:29:26,868	[INFO]	136	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:29:27,809	[INFO]	137	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:29:28,765	[INFO]	138	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:29:29,798	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:29:30,713	[INFO]	140	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:29:31,617	[INFO]	141	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:29:34,487	[INFO]	142	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:29:34,488	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,36 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:29:34,488	[INFO]	143	SUCCESS	+4.0	
2020-12-10 05:29:34,489	[DEBUG]	
2020-12-10 05:29:35,395	[INFO]	144	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:29:36,339	[INFO]	145	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:29:37,285	[INFO]	146	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:29:38,244	[INFO]	147	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:29:39,219	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:29:40,172	[INFO]	149	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:29:43,052	[INFO]	150	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:29:43,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 05:29:43,053	[INFO]	151	SUCCESS	+4.0	
2020-12-10 05:29:43,054	[DEBUG]	
2020-12-10 05:29:43,953	[INFO]	152	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:29:44,873	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:29:45,813	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:29:46,766	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:29:47,680	[INFO]	156	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:29:48,623	[INFO]	157	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:29:49,581	[INFO]	158	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:29:50,579	[INFO]	159	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:29:51,506	[INFO]	160	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:29:52,447	[INFO]	161	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:29:53,376	[INFO]	162	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:29:54,327	[INFO]	163	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:29:57,156	[INFO]	164	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:29:57,157	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             longest = length + 1;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:29:58,071	[INFO]	165	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:29:58,074	[INFO]	166	SUCCESS	+4.0	
2020-12-10 05:29:58,074	[DEBUG]	
2020-12-10 05:29:58,077	[INFO]	167	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:29:58,990	[INFO]	168	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:29:58,992	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:29:59,906	[INFO]	170	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:30:00,779	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:30:01,719	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:30:01,722	[INFO]	173	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:30:01,723	[DEBUG]	
2020-12-10 05:30:02,641	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:30:02,642	[INFO]	175	SUCCESS	+4.0	
2020-12-10 05:30:02,642	[DEBUG]	
2020-12-10 05:30:03,560	[INFO]	176	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:30:04,661	[INFO]	177	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:30:04,662	[INFO]	178	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:30:04,662	[DEBUG]	
2020-12-10 05:30:04,663	[INFO]	179	SUCCESS	+4.0	
2020-12-10 05:30:04,664	[DEBUG]	
2020-12-10 05:30:05,585	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:30:06,502	[INFO]	181	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:30:09,452	[INFO]	182	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:30:09,453	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,20 ****
--- 15,22 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);

2020-12-10 05:30:10,343	[INFO]	183	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:30:11,275	[INFO]	184	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:30:11,277	[INFO]	185	SUCCESS	+4.0	
2020-12-10 05:30:11,277	[DEBUG]	
2020-12-10 05:30:12,184	[INFO]	186	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:30:12,185	[INFO]	187	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:30:13,148	[INFO]	188	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:30:16,037	[INFO]	189	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:30:16,038	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,35 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
  
              i++;
          }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             longest = length + 1;
  
              i++;
          }

2020-12-10 05:30:16,039	[INFO]	190	SUCCESS	+4.0	
2020-12-10 05:30:16,039	[DEBUG]	
2020-12-10 05:30:16,940	[INFO]	191	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:30:17,877	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:30:20,766	[INFO]	193	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='})
2020-12-10 05:30:20,767	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j <= longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:30:20,768	[INFO]	194	SUCCESS	+4.0	
2020-12-10 05:30:20,768	[DEBUG]	
2020-12-10 05:30:21,696	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:30:22,651	[INFO]	196	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:30:23,578	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:30:23,582	[INFO]	198	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:30:23,583	[DEBUG]	
2020-12-10 05:30:24,504	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:30:25,457	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:30:26,400	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 0)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:30:26,403	[INFO]	202	SUCCESS	+4.0	
2020-12-10 05:30:26,404	[DEBUG]	
2020-12-10 05:30:27,323	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:30:28,256	[INFO]	204	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:30:29,223	[INFO]	205	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:30:30,188	[INFO]	206	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:30:31,133	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:30:32,056	[INFO]	208	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:30:33,035	[INFO]	209	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:30:33,972	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:30:34,920	[INFO]	211	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:30:36,149	[INFO]	212	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:30:37,409	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:30:38,717	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:30:39,862	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:30:43,400	[INFO]	216	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<'})
2020-12-10 05:30:43,402	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length < longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:30:43,404	[INFO]	217	SUCCESS	+4.0	
2020-12-10 05:30:43,405	[DEBUG]	
2020-12-10 05:30:44,499	[INFO]	218	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:30:45,828	[INFO]	219	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:30:48,782	[INFO]	220	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:30:48,783	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 05:30:49,685	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:30:52,594	[INFO]	222	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:30:52,595	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,31 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     return longest;
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:30:52,596	[INFO]	223	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:30:52,596	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,31 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     return longest;
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:30:52,597	[INFO]	224	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:30:52,598	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,31 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     return longest;
+                 }
+             }
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:30:52,599	[INFO]	225	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:30:52,599	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
                  }
              }
  
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
!                     return longest;
                  }
              }
  

2020-12-10 05:30:53,442	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:30:54,356	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:30:55,311	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:30:55,312	[INFO]	229	SUCCESS	+4.0	
2020-12-10 05:30:55,312	[DEBUG]	
2020-12-10 05:30:56,231	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:30:57,157	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:30:58,057	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:30:58,986	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:31:01,863	[INFO]	234	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:31:01,864	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:31:02,747	[INFO]	235	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:31:03,697	[INFO]	236	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:31:04,634	[INFO]	237	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:31:04,635	[INFO]	238	SUCCESS	+4.0	
2020-12-10 05:31:04,635	[DEBUG]	
2020-12-10 05:31:05,479	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:31:06,417	[INFO]	240	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:31:07,358	[INFO]	241	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:31:10,242	[INFO]	242	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:31:10,243	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,56 ----
  
              i++;
          }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
          return longest;
      }
  }

2020-12-10 05:31:13,236	[INFO]	243	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:31:13,239	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,43 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
+             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
+ 
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
+             i++;
+         }
+         for (int val : arr) {
+ 
+             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
+             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:31:14,142	[INFO]	244	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:31:17,052	[INFO]	245	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:31:17,053	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:31:19,955	[INFO]	246	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:31:19,956	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:22,749	[INFO]	247	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:31:22,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,37 ****
--- 32,49 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:31:23,672	[INFO]	248	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:31:23,674	[INFO]	249	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:31:23,674	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,37 ****
--- 32,49 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:31:23,676	[INFO]	250	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:31:23,677	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,37 ****
--- 32,49 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:31:23,678	[INFO]	251	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:23,679	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,37 ****
--- 32,49 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
+ 
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
          }
          return longest;
      }

2020-12-10 05:31:23,680	[INFO]	252	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:23,681	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:23,682	[INFO]	253	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:23,683	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:24,601	[INFO]	254	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'before'})
2020-12-10 05:31:24,603	[INFO]	255	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:24,604	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:25,544	[INFO]	256	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:31:26,475	[INFO]	257	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:31:26,480	[INFO]	258	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:31:26,481	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:26,484	[INFO]	259	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:26,485	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:27,335	[INFO]	260	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:31:27,337	[INFO]	261	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:31:27,338	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 31,36 ****
--- 32,42 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:28,296	[INFO]	262	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:31:28,301	[INFO]	263	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:31:28,303	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:31:28,305	[INFO]	264	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:28,306	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
+                 i++;
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }

2020-12-10 05:31:28,308	[INFO]	265	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:31:28,309	[DEBUG]	
2020-12-10 05:31:29,252	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:31:30,174	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:31:33,015	[INFO]	268	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:31:33,016	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:31:33,017	[INFO]	269	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:31:33,017	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:31:33,018	[INFO]	270	SUCCESS	+4.0	
2020-12-10 05:31:33,018	[DEBUG]	
2020-12-10 05:31:35,846	[INFO]	271	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:31:35,847	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 31,36 ****
--- 31,41 ----
                  longest = length + 1;
              }
  
+             if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
+                 longest = length + 1;
+             }
+ 
              i++;
          }
          return longest;

2020-12-10 05:31:35,848	[INFO]	272	SUCCESS	+4.0	
2020-12-10 05:31:35,848	[DEBUG]	
2020-12-10 05:31:36,760	[INFO]	273	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:31:37,675	[INFO]	274	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:31:38,616	[INFO]	275	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:31:39,526	[INFO]	276	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:31:39,528	[INFO]	277	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:31:39,528	[DEBUG]	
2020-12-10 05:31:39,529	[INFO]	278	SUCCESS	+4.0	
2020-12-10 05:31:39,529	[DEBUG]	
2020-12-10 05:31:40,461	[INFO]	279	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:31:41,403	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:31:42,311	[INFO]	281	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:31:43,228	[INFO]	282	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:31:46,135	[INFO]	283	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:31:46,136	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             i++;
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:31:46,137	[INFO]	284	SUCCESS	+4.0	
2020-12-10 05:31:46,137	[DEBUG]	
2020-12-10 05:31:47,026	[INFO]	285	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:31:49,968	[INFO]	286	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:31:49,969	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 i++;
              }
  
              i++;

2020-12-10 05:31:49,969	[INFO]	287	SUCCESS	+4.0	
2020-12-10 05:31:49,970	[DEBUG]	
2020-12-10 05:31:52,781	[INFO]	288	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:31:52,781	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:31:53,719	[INFO]	289	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:31:53,721	[INFO]	290	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:31:53,722	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:31:54,694	[INFO]	291	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:31:54,697	[INFO]	292	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:31:54,698	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:31:55,648	[INFO]	293	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:31:56,557	[INFO]	294	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:31:56,558	[INFO]	295	SUCCESS	+4.0	
2020-12-10 05:31:56,559	[DEBUG]	
2020-12-10 05:31:57,508	[INFO]	296	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:31:57,511	[INFO]	297	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:31:57,512	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,34 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:31:58,453	[INFO]	298	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:31:59,381	[INFO]	299	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:31:59,382	[INFO]	300	SUCCESS	+4.0	
2020-12-10 05:31:59,382	[DEBUG]	
2020-12-10 05:32:00,341	[INFO]	301	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:32:01,273	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:32:02,200	[INFO]	303	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:32:03,124	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:32:04,061	[INFO]	305	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:32:05,015	[INFO]	306	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:32:05,910	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:32:06,869	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:32:09,750	[INFO]	309	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:32:09,751	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 05:32:09,752	[INFO]	310	SUCCESS	+4.0	
2020-12-10 05:32:09,752	[DEBUG]	
2020-12-10 05:32:10,679	[INFO]	311	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:32:11,644	[INFO]	312	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:32:12,579	[INFO]	313	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:32:13,536	[INFO]	314	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:32:14,489	[INFO]	315	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:32:17,304	[INFO]	316	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:32:17,306	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,33 ****
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  longest = length + 1;
              }
  

2020-12-10 05:32:17,307	[INFO]	317	SUCCESS	+4.0	
2020-12-10 05:32:17,307	[DEBUG]	
2020-12-10 05:32:18,221	[INFO]	318	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:32:19,154	[INFO]	319	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:32:22,020	[INFO]	320	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '<='})
2020-12-10 05:32:22,021	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val <= arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:32:22,021	[INFO]	321	SUCCESS	+4.0	
2020-12-10 05:32:22,022	[DEBUG]	
2020-12-10 05:32:22,972	[INFO]	322	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:32:23,907	[INFO]	323	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:32:24,824	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:32:25,757	[INFO]	325	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'after'})
2020-12-10 05:32:26,685	[INFO]	326	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:32:27,609	[INFO]	327	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:32:28,573	[INFO]	328	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:32:29,522	[INFO]	329	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:32:32,440	[INFO]	330	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:32:32,441	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 i++;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:32:32,441	[INFO]	331	SUCCESS	+4.0	
2020-12-10 05:32:32,442	[DEBUG]	
2020-12-10 05:32:33,360	[INFO]	332	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:32:33,364	[INFO]	333	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:32:34,325	[INFO]	334	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:32:37,215	[INFO]	335	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:32:37,217	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,32 ****
--- 27,37 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
+                 for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:32:37,219	[INFO]	336	SUCCESS	+4.0	
2020-12-10 05:32:37,219	[DEBUG]	
2020-12-10 05:32:40,047	[INFO]	337	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:32:40,048	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 28,38 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
!                 for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
              }
  
              i++;

2020-12-10 05:32:40,963	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:32:41,921	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 5)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:32:41,924	[INFO]	340	SUCCESS	+4.0	
2020-12-10 05:32:41,925	[DEBUG]	
2020-12-10 05:32:42,892	[INFO]	341	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'before'})
2020-12-10 05:32:43,851	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:32:44,750	[INFO]	343	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:32:45,701	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 16), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:32:46,676	[INFO]	345	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:32:46,679	[INFO]	346	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15)})
2020-12-10 05:32:46,680	[DEBUG]	
2020-12-10 05:32:46,681	[INFO]	347	SUCCESS	+4.0	
2020-12-10 05:32:46,682	[DEBUG]	
2020-12-10 05:32:47,616	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:32:47,618	[INFO]	349	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:32:48,560	[INFO]	350	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:32:49,492	[INFO]	351	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:32:50,446	[INFO]	352	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:32:51,266	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:32:51,267	[INFO]	354	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:32:52,198	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:32:53,117	[INFO]	356	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:32:54,036	[INFO]	357	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:32:56,942	[INFO]	358	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:32:56,943	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:32:59,853	[INFO]	359	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:32:59,854	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
              }
  
              i++;
--- 26,35 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              i++;

2020-12-10 05:32:59,855	[INFO]	360	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:32:59,855	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 29,34 ****
--- 29,35 ----
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+                 longest = length + 1;
              }
  
              i++;

2020-12-10 05:33:00,790	[INFO]	361	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:33:01,721	[INFO]	362	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:33:02,647	[INFO]	363	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:33:03,607	[INFO]	364	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:33:03,608	[INFO]	365	SUCCESS	+4.0	
2020-12-10 05:33:03,608	[DEBUG]	
2020-12-10 05:33:04,554	[INFO]	366	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:33:05,519	[INFO]	367	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:33:06,491	[INFO]	368	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:33:09,412	[INFO]	369	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:33:09,413	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 i++;
                  longest = length + 1;
              }
  

2020-12-10 05:33:09,414	[INFO]	370	SUCCESS	+4.0	
2020-12-10 05:33:09,414	[DEBUG]	
2020-12-10 05:33:12,288	[INFO]	371	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:12,289	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:12,290	[INFO]	372	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:33:12,291	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:13,228	[INFO]	373	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:33:14,187	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:33:15,118	[INFO]	375	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:33:17,980	[INFO]	376	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'})
2020-12-10 05:33:17,982	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 18,24 ****
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
--- 18,24 ----
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j > longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:18,880	[INFO]	377	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'before'})
2020-12-10 05:33:19,810	[INFO]	378	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 15), 'direction': 'after'})
2020-12-10 05:33:20,735	[INFO]	379	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:33:21,690	[INFO]	380	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '>'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:33:21,693	[INFO]	381	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)})
2020-12-10 05:33:21,694	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:22,615	[INFO]	382	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:33:23,581	[INFO]	383	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:24,533	[INFO]	384	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:33:24,534	[INFO]	385	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:24,535	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:24,536	[INFO]	386	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:33:24,536	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:25,453	[INFO]	387	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:33:26,406	[INFO]	388	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'})
2020-12-10 05:33:27,343	[INFO]	389	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:33:28,284	[INFO]	390	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:28,286	[INFO]	391	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:33:28,287	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:28,288	[INFO]	392	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:33:28,289	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:29,224	[INFO]	393	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:33:29,226	[INFO]	394	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:33:29,226	[INFO]	395	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:29,227	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:29,228	[INFO]	396	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:33:29,228	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:30,163	[INFO]	397	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:33:31,116	[INFO]	398	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:33:32,061	[INFO]	399	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:33,019	[INFO]	400	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'after'})
2020-12-10 05:33:33,021	[INFO]	401	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:33,023	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:35,965	[INFO]	402	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:33:35,966	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
***************
*** 33,38 ****
--- 31,37 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:36,859	[INFO]	403	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'before'})
2020-12-10 05:33:39,796	[INFO]	404	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:33:39,798	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:33:40,655	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:33:41,547	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:33:41,548	[INFO]	407	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:33:41,549	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:33:41,550	[INFO]	408	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:33:41,550	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,27 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:33:44,442	[INFO]	409	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:33:44,443	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,26 ****
--- 20,28 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
+                     i++;
                  }
              }
  

2020-12-10 05:33:47,264	[INFO]	410	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'before'})
2020-12-10 05:33:47,265	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 20,25 ****
--- 20,26 ----
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
+                     int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:33:47,265	[INFO]	411	SUCCESS	+4.0	
2020-12-10 05:33:47,266	[DEBUG]	
2020-12-10 05:33:48,211	[INFO]	412	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'})
2020-12-10 05:33:49,106	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:33:50,059	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:33:50,061	[INFO]	415	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'})
2020-12-10 05:33:50,062	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
          return longest;
      }
  }

2020-12-10 05:33:51,000	[INFO]	416	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 4), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:33:51,001	[INFO]	417	SUCCESS	+4.0	
2020-12-10 05:33:51,001	[DEBUG]	
2020-12-10 05:33:52,045	[INFO]	418	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:33:54,998	[INFO]	419	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'before'})
2020-12-10 05:33:54,999	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:33:55,000	[INFO]	420	SUCCESS	+4.0	
2020-12-10 05:33:55,000	[DEBUG]	
2020-12-10 05:33:55,893	[INFO]	421	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 10), 'direction': 'after'})
2020-12-10 05:33:56,789	[INFO]	422	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:33:57,708	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 1)})
2020-12-10 05:34:00,621	[INFO]	424	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 5), 'direction': 'after'})
2020-12-10 05:34:00,622	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 23,28 ****
--- 23,33 ----
                      prefix_lengths.add(j);
                  }
              }
+             for (int j=1; j < longest+1; j++) {
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
+             }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  

2020-12-10 05:34:00,623	[INFO]	425	SUCCESS	+4.0	
2020-12-10 05:34:00,623	[DEBUG]	
2020-12-10 05:34:03,383	[INFO]	426	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'after'})
2020-12-10 05:34:03,384	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,30 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 if (arr[ends.get(j)] < val) {
+                     prefix_lengths.add(j);
+                 }
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:34:03,384	[INFO]	427	SUCCESS	+4.0	
2020-12-10 05:34:03,385	[DEBUG]	
2020-12-10 05:34:04,289	[INFO]	428	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 1), 'direction': 'after'})
2020-12-10 05:34:05,214	[INFO]	429	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:34:06,150	[INFO]	430	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'})
2020-12-10 05:34:07,086	[INFO]	431	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'after'})
2020-12-10 05:34:07,087	[INFO]	432	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 2)})
2020-12-10 05:34:07,087	[DEBUG]	
2020-12-10 05:34:07,088	[INFO]	433	SUCCESS	+4.0	
2020-12-10 05:34:07,088	[DEBUG]	
2020-12-10 05:34:07,089	[INFO]	434	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:34:07,089	[DEBUG]	
2020-12-10 05:34:10,050	[INFO]	435	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'after'})
2020-12-10 05:34:10,051	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 22,27 ****
--- 22,28 ----
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
+                 return longest;
              }
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

2020-12-10 05:34:10,053	[INFO]	436	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:34:10,053	[DEBUG]	
2020-12-10 05:34:10,935	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'})
2020-12-10 05:34:13,773	[INFO]	438	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/LIS.java.xml', 14)})
2020-12-10 05:34:13,773	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 27,33 ****
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
                  longest = length + 1;
              }
  
--- 27,33 ----
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
              if (length == longest || val < arr[ends.get(length+1)]) {
!                 
                  longest = length + 1;
              }
  

2020-12-10 05:34:13,774	[INFO]	439	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:34:13,775	[DEBUG]	
2020-12-10 05:34:13,775	[INFO]	440	SUCCESS	+4.0	
2020-12-10 05:34:13,776	[DEBUG]	
2020-12-10 05:34:14,695	[INFO]	441	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 2), 'direction': 'before'})
2020-12-10 05:34:15,755	[INFO]	442	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 0), 'ingredient': ('java_programs/LIS.java.xml', 3), 'direction': 'after'})
2020-12-10 05:34:16,714	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 14), 'ingredient': ('java_programs/LIS.java.xml', 17)})
2020-12-10 05:34:19,584	[INFO]	444	SUCCESS	*0.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:34:19,585	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:19,585	[INFO]	==== END ====
2020-12-10 05:34:19,585	[INFO]	Reason: target fitness reached
2020-12-10 05:34:19,586	[INFO]	
2020-12-10 05:34:19,586	[INFO]	========== EPOCH 20 ==========
2020-12-10 05:34:19,586	[INFO]	==== WARMUP ====
2020-12-10 05:34:22,407	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:34:22,407	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:34:25,235	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:34:25,235	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:34:28,163	[INFO]	WARM	SUCCESS	 4.0	
2020-12-10 05:34:28,163	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:34:31,014	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-10 05:34:31,014	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-10 05:34:31,015	[INFO]	==== START ====
2020-12-10 05:34:31,916	[INFO]	1	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'})
2020-12-10 05:34:32,830	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 5)})
2020-12-10 05:34:33,756	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0)})
2020-12-10 05:34:34,701	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 4)})
2020-12-10 05:34:35,615	[INFO]	5	PARSE_ERROR	 None	StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 17), 'direction': 'before'})
2020-12-10 05:34:35,616	[INFO]	6	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)})
2020-12-10 05:34:35,617	[DEBUG]	
2020-12-10 05:34:38,333	[INFO]	7	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:34:38,334	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:34:39,165	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'before'})
2020-12-10 05:34:39,167	[INFO]	9	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16)})
2020-12-10 05:34:39,168	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,38 ****
          int longest = 0;
  
          int i = 0;
!         for (int val : arr) {
! 
!             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
!             for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
!                     prefix_lengths.add(j);
!                 }
!             }
! 
!             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
! 
!             if (length == longest || val < arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 longest = length + 1;
!             }
! 
!             i++;
!         }
          return longest;
      }
  }
--- 15,21 ----
          int longest = 0;
  
          int i = 0;
!         i++;
          return longest;
      }
  }

2020-12-10 05:34:39,169	[INFO]	10	SUCCESS	+4.0	
2020-12-10 05:34:39,169	[DEBUG]	
2020-12-10 05:34:40,078	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 7)})
2020-12-10 05:34:41,026	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/LIS.java.xml', 1), 'ingredient': ('java_programs/LIS.java.xml', 3)})
2020-12-10 05:34:43,864	[INFO]	13	SUCCESS	+4.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:34:43,865	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 33,38 ****
--- 33,39 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 05:34:43,866	[INFO]	14	SUCCESS	+4.0	
2020-12-10 05:34:43,866	[DEBUG]	
2020-12-10 05:34:46,777	[INFO]	15	SUCCESS	*0.0	StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:34:46,779	[DEBUG]	*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,779	[INFO]	==== END ====
2020-12-10 05:34:46,780	[INFO]	Reason: target fitness reached
2020-12-10 05:34:46,782	[INFO]	
2020-12-10 05:34:46,782	[INFO]	========== REPORT ==========
2020-12-10 05:34:46,782	[INFO]	==== Epoch 1 ====
2020-12-10 05:34:46,783	[INFO]	Termination: step budget
2020-12-10 05:34:46,783	[INFO]	Number of interations: 500
2020-12-10 05:34:46,783	[INFO]	Best fitness: 1.0
2020-12-10 05:34:46,783	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:34:46,783	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:34:46,784	[INFO]	==== Epoch 2 ====
2020-12-10 05:34:46,784	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,784	[INFO]	Number of interations: 460
2020-12-10 05:34:46,784	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,784	[INFO]	Best patch: StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:34:46,784	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,784	[INFO]	==== Epoch 3 ====
2020-12-10 05:34:46,785	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,785	[INFO]	Number of interations: 60
2020-12-10 05:34:46,785	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,785	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,785	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,785	[INFO]	==== Epoch 4 ====
2020-12-10 05:34:46,785	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,786	[INFO]	Number of interations: 116
2020-12-10 05:34:46,786	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,786	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,786	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,786	[INFO]	==== Epoch 5 ====
2020-12-10 05:34:46,786	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,786	[INFO]	Number of interations: 370
2020-12-10 05:34:46,787	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,787	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 12), 'value': '<='})
2020-12-10 05:34:46,787	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,34 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
  
              i++;
--- 26,37 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length <= longest || val >= arr[ends.get(length+1)]) {
!                 ends.put(length+1, i);
!                 if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,787	[INFO]	==== Epoch 6 ====
2020-12-10 05:34:46,787	[INFO]	Termination: step budget
2020-12-10 05:34:46,787	[INFO]	Number of interations: 500
2020-12-10 05:34:46,788	[INFO]	Best fitness: 1.0
2020-12-10 05:34:46,788	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '=='})
2020-12-10 05:34:46,788	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val == arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:34:46,788	[INFO]	==== Epoch 7 ====
2020-12-10 05:34:46,788	[INFO]	Termination: step budget
2020-12-10 05:34:46,788	[INFO]	Number of interations: 500
2020-12-10 05:34:46,788	[INFO]	Best fitness: 3.0
2020-12-10 05:34:46,788	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 05:34:46,788	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:34:46,788	[INFO]	==== Epoch 8 ====
2020-12-10 05:34:46,788	[INFO]	Termination: step budget
2020-12-10 05:34:46,789	[INFO]	Number of interations: 500
2020-12-10 05:34:46,789	[INFO]	Best fitness: 2.0
2020-12-10 05:34:46,789	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 3), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 17), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 6), 'value': '<='}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 10)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 4), 'ingredient': ('java_programs/LIS.java.xml', 7), 'direction': 'before'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 9), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 5), 'ingredient': ('java_programs/LIS.java.xml', 3)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 7), 'ingredient': ('java_programs/LIS.java.xml', 9), 'direction': 'after'}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 17)}) | StmtInsertion({'target': ('java_programs/LIS.java.xml', 2), 'ingredient': ('java_programs/LIS.java.xml', 16), 'direction': 'after'})
2020-12-10 05:34:46,789	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 15,25 ****
          int longest = 0;
  
          int i = 0;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 15,28 ----
          int longest = 0;
  
          int i = 0;
+ 
+         i++;
+         i++;
          for (int val : arr) {
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }
***************
*** 33,38 ****
--- 36,42 ----
  
              i++;
          }
+         i++;
          return longest;
      }
  }

2020-12-10 05:34:46,789	[INFO]	==== Epoch 9 ====
2020-12-10 05:34:46,789	[INFO]	Termination: step budget
2020-12-10 05:34:46,789	[INFO]	Number of interations: 500
2020-12-10 05:34:46,790	[INFO]	Best fitness: 3.0
2020-12-10 05:34:46,790	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>='})
2020-12-10 05:34:46,790	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] >= val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:34:46,790	[INFO]	==== Epoch 10 ====
2020-12-10 05:34:46,790	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,790	[INFO]	Number of interations: 99
2020-12-10 05:34:46,790	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,790	[INFO]	Best patch: StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:34:46,790	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,791	[INFO]	==== Epoch 11 ====
2020-12-10 05:34:46,791	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,791	[INFO]	Number of interations: 165
2020-12-10 05:34:46,791	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,791	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,791	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,791	[INFO]	==== Epoch 12 ====
2020-12-10 05:34:46,791	[INFO]	Termination: step budget
2020-12-10 05:34:46,791	[INFO]	Number of interations: 500
2020-12-10 05:34:46,792	[INFO]	Best fitness: 3.0
2020-12-10 05:34:46,792	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 8), 'value': '>'})
2020-12-10 05:34:46,792	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 19,25 ****
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }
--- 19,25 ----
  
              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
!                 if (arr[ends.get(j)] > val) {
                      prefix_lengths.add(j);
                  }
              }

2020-12-10 05:34:46,792	[INFO]	==== Epoch 13 ====
2020-12-10 05:34:46,792	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,792	[INFO]	Number of interations: 133
2020-12-10 05:34:46,792	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,792	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,793	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,793	[INFO]	==== Epoch 14 ====
2020-12-10 05:34:46,793	[INFO]	Termination: step budget
2020-12-10 05:34:46,793	[INFO]	Number of interations: 500
2020-12-10 05:34:46,793	[INFO]	Best fitness: 1.0
2020-12-10 05:34:46,793	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/LIS.java.xml', 13), 'value': '>'})
2020-12-10 05:34:46,793	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,32 ****
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }
--- 26,32 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
!             if (length == longest || val > arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

2020-12-10 05:34:46,793	[INFO]	==== Epoch 15 ====
2020-12-10 05:34:46,793	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,793	[INFO]	Number of interations: 416
2020-12-10 05:34:46,794	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,794	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,794	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,794	[INFO]	==== Epoch 16 ====
2020-12-10 05:34:46,794	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,794	[INFO]	Number of interations: 1
2020-12-10 05:34:46,794	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,794	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,794	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,794	[INFO]	==== Epoch 17 ====
2020-12-10 05:34:46,795	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,795	[INFO]	Number of interations: 368
2020-12-10 05:34:46,795	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,795	[INFO]	Best patch: StmtReplacement({'target': ('java_programs/LIS.java.xml', 15), 'ingredient': ('java_programs/LIS.java.xml', 11)})
2020-12-10 05:34:46,795	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 28,34 ****
--- 28,37 ----
  
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
+                 if (length == longest || val < arr[ends.get(length+1)]) {
+                 ends.put(length+1, i);
                  longest = length + 1;
+             }
              }
  
              i++;

2020-12-10 05:34:46,795	[INFO]	==== Epoch 18 ====
2020-12-10 05:34:46,795	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,795	[INFO]	Number of interations: 357
2020-12-10 05:34:46,795	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,795	[INFO]	Best patch: StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:34:46,795	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,795	[INFO]	==== Epoch 19 ====
2020-12-10 05:34:46,795	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,796	[INFO]	Number of interations: 444
2020-12-10 05:34:46,796	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,796	[INFO]	Best patch: StmtInsertion({'target': ('java_programs/LIS.java.xml', 11), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'before'})
2020-12-10 05:34:46,796	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,796	[INFO]	==== Epoch 20 ====
2020-12-10 05:34:46,796	[INFO]	Termination: target fitness reached
2020-12-10 05:34:46,796	[INFO]	Number of interations: 15
2020-12-10 05:34:46,796	[INFO]	Best fitness: 0.0
2020-12-10 05:34:46,796	[INFO]	Best patch: StmtInsertion({'target': ('java_programs/LIS.java.xml', 10), 'ingredient': ('java_programs/LIS.java.xml', 14), 'direction': 'after'})
2020-12-10 05:34:46,796	[INFO]	Diff:
*** before: java_programs/LIS.java.xml
--- after: java_programs/LIS.java.xml
***************
*** 26,31 ****
--- 26,33 ----
  
              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;
  
+             ends.put(length+1, i);
+ 
              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;

2020-12-10 05:34:46,800	[INFO]	Experiment duration: 6598.374521493912
